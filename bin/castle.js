// Generated by Haxe 4.0.3
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var vdom_Server = function(root) {
	this.root = root;
	this.nodes = [root];
	this.events = new haxe_ds_IntMap();
	this.serializer = new hxbit_Serializer();
};
$hxClasses["vdom.Server"] = vdom_Server;
vdom_Server.__name__ = "vdom.Server";
vdom_Server.prototype = {
	send: function(msg) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,encodeAnswer: function(msg) {
		this.serializer.begin();
		hxbit_enumSer_Vdom_$Answer.doSerialize(this.serializer,msg);
		return this.serializer.end();
	}
	,decodeMessage: function(bytes) {
		this.serializer.setInput(bytes,0);
		var m = hxbit_enumSer_Vdom_$Message.doUnserialize(this.serializer);
		this.serializer.setInput(null,0);
		return m;
	}
	,handleSpecial: function(e,name,args,result) {
	}
	,bindEvent: function(n,id,name,eid) {
		var _gthis = this;
		var callb = function(e) {
			var sendValue = false;
			var props = null;
			switch(name) {
			case "blur":
				if(n.tagName == "INPUT") {
					sendValue = true;
				}
				break;
			case "change":case "input":
				sendValue = true;
				break;
			case "keydown":
				props = { keyCode : e.keyCode, shiftKey : e.shiftKey, ctrlKey : e.ctrlKey};
				if(n.tagName == "INPUT") {
					sendValue = true;
				}
				break;
			case "mousedown":case "mouseup":
				props = { which : e.which};
				break;
			default:
			}
			if(sendValue) {
				_gthis.send(vdom_Answer.SetValue(id,"" + Std.string(Reflect.field(n,"value"))));
			}
			_gthis.send(vdom_Answer.Event(eid,props));
		};
		this.events.h[eid] = { name : name, callb : callb, n : n};
		n.addEventListener(name,callb);
	}
	,onMessage: function(msg) {
		var _gthis = this;
		switch(msg._hx_index) {
		case 0:
			var attr = msg.attr;
			var name = msg.name;
			var id = msg.id;
			var n = window.document.createElement(name);
			if(attr != null) {
				var _g = 0;
				while(_g < attr.length) {
					var a = attr[_g];
					++_g;
					n.setAttribute(a.name,a.value);
				}
			}
			this.nodes[id] = n;
			break;
		case 1:
			var name1 = msg.name;
			var id1 = msg.id;
			this.nodes[id1].classList.add(name1);
			break;
		case 2:
			var name2 = msg.name;
			var id2 = msg.id;
			this.nodes[id2].classList.remove(name2);
			break;
		case 3:
			var to = msg.to;
			var id3 = msg.id;
			this.nodes[to].appendChild(this.nodes[id3]);
			break;
		case 4:
			var pos = msg.pos;
			var to1 = msg.to;
			var id4 = msg.id;
			var p = this.nodes[to1];
			p.insertBefore(this.nodes[id4],p.childNodes[pos]);
			break;
		case 5:
			var pid = msg.pid;
			var text = msg.text;
			var id5 = msg.id;
			var t = window.document.createTextNode(text);
			this.nodes[id5] = t;
			if(pid != null) {
				this.nodes[pid].appendChild(t);
			}
			break;
		case 6:
			var id6 = msg.id;
			var n1 = this.nodes[id6];
			while(n1.firstChild != null) n1.removeChild(n1.firstChild);
			break;
		case 7:
			var id7 = msg.id;
			this.nodes[id7].remove();
			break;
		case 8:
			var eid = msg.eid;
			var name3 = msg.name;
			var id8 = msg.id;
			var n2 = this.nodes[id8];
			this.bindEvent(n2,id8,name3,eid);
			break;
		case 9:
			var val = msg.val;
			var att = msg.att;
			var id9 = msg.id;
			if(val == null) {
				this.nodes[id9].removeAttribute(att);
			} else {
				this.nodes[id9].setAttribute(att,val);
			}
			break;
		case 10:
			var val1 = msg.val;
			var s = msg.st;
			var id10 = msg.id;
			this.nodes[id10].style[s] = val1;
			break;
		case 11:
			var s1 = msg.name;
			var id11 = msg.id;
			var n3 = this.nodes[id11];
			var m = Reflect.field(n3,s1);
			if(m == null) {
				throw new js__$Boot_HaxeError(Std.string(n3) + " has no method " + Std.string(m));
			}
			m.apply(n3,[]);
			if(s1 == "focus" && n3.tagName == "SELECT") {
				var event = window.document.createEvent("MouseEvents");
				event.initMouseEvent("mousedown",true,true,window);
				n3.dispatchEvent(event);
			}
			break;
		case 12:
			var eid1 = msg.eid;
			var args = msg.args;
			var name4 = msg.name;
			var id12 = msg.id;
			var tmp = eid1 == null ? function(_) {
			} : function(v) {
				_gthis.send(vdom_Answer.Event(eid1,{ value : v}));
			};
			this.handleSpecial(this.nodes[id12],name4,args,tmp);
			break;
		case 13:
			var duration = msg.dur;
			var name5 = msg.name;
			var id13 = msg.id;
			this.handleSpecial(this.nodes[id13],"animate",[name5,duration],null);
			break;
		case 14:
			var eids = msg.events;
			var id14 = msg.id;
			this.nodes[id14].remove();
			this.nodes[id14] = null;
			if(eids != null) {
				this.onMessage(vdom_Message.Unbind(eids));
			}
			break;
		case 15:
			var eids1 = msg.events;
			var _g1 = 0;
			while(_g1 < eids1.length) {
				var eid2 = eids1[_g1];
				++_g1;
				var e = this.events.h[eid2];
				if(e != null) {
					this.events.remove(eid2);
					e.n.removeEventListener(e.name,e.callb);
				}
			}
			break;
		case 16:
			var msgs = msg.msg;
			var _g2 = 0;
			while(_g2 < msgs.length) {
				var m1 = msgs[_g2];
				++_g2;
				this.onMessage(m1);
			}
			break;
		case 17:
			var val2 = msg.value;
			var id15 = msg.id;
			try {
				this.nodes[id15].value = val2;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			}
			break;
		}
	}
	,__class__: vdom_Server
};
var JqPage = function(sock) {
	vdom_Server.call(this,window.document.createElement("div"));
	this.sock = sock;
	this.page = window.document.createElement("div");
	this.page.setAttribute("class","jqpage");
	this.page.appendChild(this.root);
	window.document.body.appendChild(this.page);
	this.page.style.visibility = "hidden";
	this.name = "";
	this.panels = new haxe_ds_ObjectMap();
	this.dnodes = new haxe_ds_ObjectMap();
	this.dockManager = new dockspawn.DockManager(this.page);
	this.dockManager.initialize();
	this.dockManager.resize(800,600);
	this.dnodes.set(this.root,this.dockManager.context.model.documentManagerNode);
};
$hxClasses["JqPage"] = JqPage;
JqPage.__name__ = "JqPage";
JqPage.__super__ = vdom_Server;
JqPage.prototype = $extend(vdom_Server.prototype,{
	send: function(msg) {
		var bytes = this.encodeAnswer(msg);
		var buf = new js_node_buffer_Buffer(bytes.length + 2);
		buf[0] = bytes.length & 255;
		buf[1] = bytes.length >> 8;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			buf[i + 2] = bytes.b[i];
		}
		this.sock.write(buf);
	}
	,onMessage: function(msg) {
		vdom_Server.prototype.onMessage.call(this,msg);
		if(msg._hx_index == 9) {
			if(msg.id == 0) {
				if(msg.att == "title") {
					var val = msg.val;
					this.tab.text(val);
				}
			}
		}
	}
	,bindEvent: function(n,id,name,eid) {
		var _gthis = this;
		if(name == "paneldock") {
			var p = this.panels.h[n.__id__];
			if(p == null) {
				return;
			}
			p.__onDestroy = function() {
				_gthis.send(vdom_Answer.Event(eid,{ }));
			};
		} else {
			vdom_Server.prototype.bindEvent.call(this,n,id,name,eid);
		}
	}
	,handleSpecial: function(e,name,args,result) {
		var _gthis = this;
		switch(name) {
		case "animate":
			var j = $(e);
			Reflect.field(j,args[0]).apply(j,[args[1]]);
			break;
		case "colorPick":
			var id = Std.random(1);
			e.innerHTML = "<div class=\"modal\" onclick=\"$('#_c" + id + "').spectrum('toggle')\"></div><input type=\"text\" id=\"_c" + id + "\"/>";
			var spect = $("#_c" + id);
			var val = args[0];
			var getColor = function(vcol) {
				return Std.parseInt("0x" + Std.string(vcol.toHex())) | (vcol.getAlpha() * 255 | 0) << 24;
			};
			spect.spectrum({ color : "rgba(" + [val >> 16 & 255,val >> 8 & 255,val & 255,(val >>> 24) / 255].join(",") + ")", showInput : true, showButtons : false, showAlpha : args[1], clickoutFiresChange : true, move : function(vcol1) {
				var tmp = getColor(vcol1);
				result({ color : tmp, done : false});
			}, change : function(vcol2) {
				spect.spectrum("hide");
				var tmp1 = getColor(vcol2);
				result({ color : tmp1, done : true});
			}, hide : function(vcol3) {
				var tmp2 = getColor(vcol3);
				result({ color : tmp2, done : true});
			}}).spectrum("show");
			break;
		case "dock":
			var dir = e.getAttribute("dock");
			if(dir == null) {
				var p = this.panels.h[e.__id__];
				if(p == null) {
					return;
				}
				this.panels.remove(e);
				this.dnodes.remove(e);
				try {
					p.onCloseButtonClicked();
				} catch( e1 ) {
					var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				}
				return;
			}
			var parent = e.parentElement;
			var n = this.dnodes.h[parent.__id__];
			if(n == null) {
				console.log("src/JqPages.hx:250:","Could not dock:");
				console.log("src/JqPages.hx:251:",e);
				console.log("src/JqPages.hx:252:","to:");
				console.log("src/JqPages.hx:253:",parent);
				return;
			}
			var p1 = this.panels.h[e.__id__];
			if(p1 == null) {
				e.remove();
				p1 = new dockspawn.PanelContainer(e,this.dockManager);
				this.panels.set(e,p1);
			}
			var size = e.getAttribute("docksize");
			var size1 = size == null ? null : parseFloat(size);
			var n1;
			switch(dir.toLowerCase()) {
			case "down":
				n1 = this.dockManager.dockDown(n,p1,size1);
				break;
			case "left":
				n1 = this.dockManager.dockLeft(n,p1,size1);
				break;
			case "right":
				n1 = this.dockManager.dockRight(n,p1,size1);
				break;
			case "up":
				n1 = this.dockManager.dockUp(n,p1,size1);
				break;
			default:
				n1 = this.dockManager.dockFill(n,p1);
			}
			this.dnodes.set(e,n1);
			break;
		case "fileSave":case "fileSelect":
			var path = args[0];
			var ext = args[1] == null ? [] : args[1].split(",");
			var data = args[2];
			var saveAs = name == "fileSave";
			var fs = $("#fileSelect");
			if(path != null && StringTools.startsWith(window.navigator.platform,"Win")) {
				path = path.split("/").join("\\");
			}
			var fpath = new haxe_io_Path(path == null ? "" : path);
			fs.removeAttr("nwworkingdir");
			fs.removeAttr("nwsaveas");
			fs.attr("nwworkingdir",fpath.dir);
			if(saveAs && path != null) {
				fs.attr("nwsaveas",path);
			}
			if(this.prevSelectEvent != null) {
				this.prevSelectEvent(null);
			}
			this.prevSelectEvent = result;
			fs.val("");
			fs.off("change");
			fs.change(function(_) {
				_gthis.prevSelectEvent = null;
				fs.off("change");
				var path1 = fs.val().split("\\").join("/");
				fs.val("");
				if(path1 == "") {
					result(null);
					return;
				}
				if(saveAs) {
					if(((data) instanceof haxe_io_Bytes)) {
						var data1 = data;
						var _g12 = [];
						var _g13 = 0;
						var _g14 = data1.length;
						while(_g13 < _g14) {
							var i = _g13++;
							_g12.push(data1.b[i]);
						}
						var buf = new js_node_buffer_Buffer(_g12);
						js_node_Fs.writeFileSync(path1,buf);
					} else {
						js_node_Fs.writeFileSync(path1,data);
					}
				}
				fs.attr("nwworkingdir","");
				result(path1);
			}).click();
			break;
		case "popupMenu":
			var args1 = args;
			var n2 = new js_node_webkit_Menu();
			var _g = 0;
			var _g1 = args1.length;
			while(_g < _g1) {
				var i1 = [_g++];
				var mit = new js_node_webkit_MenuItem({ label : args1[i1[0]]});
				n2.append(mit);
				mit.click = (function(i2) {
					return function() {
						result(i2[0]);
					};
				})(i1);
			}
			n2.popup(Main.inst.mousePos.x,Main.inst.mousePos.y);
			break;
		case "scrollIntoView":
			e.scrollIntoView();
			break;
		case "setName":
			name = args[0];
			if(this.tab != null) {
				this.tab.text(name);
			}
			break;
		case "startDrag":
			var document = window.document;
			var onMove = function(event) {
				if(document.pointerLockElement != e) {
					return;
				}
				result({ dx : event.movementX, dy : event.movementY});
			};
			var onUp = function() {
				document.exitPointerLock();
			};
			var onChange = null;
			onChange = function() {
				if(document.pointerLockElement == e) {
					document.addEventListener("mousemove",onMove,false);
					document.addEventListener("mouseup",onUp,false);
				} else {
					result({ dx : 0, dy : 0, done : true});
					document.removeEventListener("pointerlockchange",onChange,false);
					document.removeEventListener("mousemove",onMove,false);
					document.removeEventListener("mouseup",onUp,false);
				}
			};
			document.addEventListener("pointerlockchange",onChange,false);
			e.requestPointerLock();
			break;
		default:
			throw new js__$Boot_HaxeError("Don't know how to handle " + name + "(" + args.join(",") + ")");
		}
	}
	,__class__: JqPage
});
var JqPages = function(main) {
	this.curPage = -1;
	this.main = main;
	this.pages = [];
	js_node_Net.createServer($bind(this,this.onClient)).listen(6669,"127.0.0.1");
};
$hxClasses["JqPages"] = JqPages;
JqPages.__name__ = "JqPages";
JqPages.prototype = {
	updateTabs: function() {
		var _gthis = this;
		var sheets = $("ul#sheets");
		sheets.find("li.client").remove();
		var _g = 0;
		var _g1 = this.pages;
		while(_g < _g1.length) {
			var p = [_g1[_g]];
			++_g;
			var jc = p[0].name == "" ? "???" : p[0].name;
			var jc1 = [$("<li>").addClass("client").text(jc).appendTo(sheets)];
			p[0].tab = jc1[0];
			var tmp = (function(jc2,p1) {
				return function(e) {
					_gthis.curPage = Lambda.indexOf(_gthis.pages,p1[0]);
					$("#sheets li").removeClass("active");
					jc2[0].addClass("active");
					_gthis.select();
				};
			})(jc1,p);
			jc1[0].click(tmp);
			if(Lambda.indexOf(this.pages,p[0]) == this.curPage) {
				jc1[0].addClass("active");
			}
		}
	}
	,onKey: function(e) {
		this.pages[this.curPage].send(vdom_Answer.Event(-1,{ keyCode : e.keyCode, shiftKey : e.shiftKey, ctrlKey : e.ctrlKey}));
	}
	,select: function() {
		var p = this.pages[this.curPage];
		$("#content").html("").append(p.page);
		p.page.style.visibility = "";
		this.onResize();
	}
	,onResize: function() {
		if(this.curPage >= 0) {
			var p = this.pages[this.curPage];
			p.page.style.width = "100%";
			p.page.style.height = "100%";
			p.dockManager.resize(p.page.clientWidth,p.page.clientHeight - (30 + p.root.clientHeight));
		}
	}
	,onClient: function(sock) {
		var _gthis = this;
		var p = new JqPage(sock);
		this.pages.push(p);
		this.updateTabs();
		sock.setNoDelay(true);
		sock.on("error",function() {
			sock.end();
		});
		sock.on("close",function() {
			var cur = _gthis.curPage == Lambda.indexOf(_gthis.pages,p);
			p.page.remove();
			HxOverrides.remove(_gthis.pages,p);
			_gthis.updateTabs();
			if(cur) {
				_gthis.curPage--;
				_gthis.main.initContent();
			}
		});
		var curBuffer = null;
		var curPos = 0;
		var size = 0;
		var sizeCount = 0;
		sock.on("data",function(e) {
			var pos = 0;
			while(pos < e.length) if(curBuffer == null) {
				size |= e.readUInt8(pos++) << sizeCount * 8;
				sizeCount += 1;
				if(sizeCount == 4) {
					curBuffer = new haxe_io_Bytes(new ArrayBuffer(size));
					curPos = 0;
				}
			} else {
				var max = e.length - pos;
				if(max > curBuffer.length - curPos) {
					max = curBuffer.length - curPos;
				}
				var _g = 0;
				var _g1 = max;
				while(_g < _g1) {
					var i = _g++;
					curPos += 1;
					var pos1 = curPos - 1;
					var v = e.readUInt8(pos++);
					curBuffer.b[pos1] = v;
				}
				if(curPos == curBuffer.length) {
					var tmp = p.decodeMessage(curBuffer);
					p.onMessage(tmp);
					curBuffer = null;
					sizeCount = 0;
					size = 0;
				}
			}
		});
	}
	,__class__: JqPages
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(x1));
	}
	return l;
};
Lambda.mapi = function(it,f) {
	var l = new haxe_ds_List();
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(f(i++,x1));
	}
	return l;
};
Lambda.flatten = function(it) {
	var l = new haxe_ds_List();
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(x1);
		}
	}
	return l;
};
Lambda.flatMap = function(it,f) {
	return Lambda.flatten(Lambda.map(it,f));
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var l = new haxe_ds_List();
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = new haxe_ds_List();
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.add(x1);
	}
	var x2 = $getIterator(b);
	while(x2.hasNext()) {
		var x3 = x2.next();
		l.add(x3);
	}
	return l;
};
var Level = function(model,sheet,index) {
	this.reloading = false;
	this.rotation = 0;
	this.flipMode = false;
	this.startPos = null;
	this.mousePos = { x : 0, y : 0};
	this.zoomView = 1.;
	this.sheet = sheet;
	this.sheetPath = sheet.getPath();
	this.index = index;
	this.obj = sheet.sheet.lines[index];
	this.model = model;
	this.references = [];
	this.palette = new lvl_Palette(this);
};
$hxClasses["Level"] = Level;
Level.__name__ = "Level";
Level.prototype = {
	getName: function() {
		var name = "#" + this.index;
		var _g = 0;
		var _g1 = this.sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var v = Reflect.field(this.obj,c.name);
			var _g2 = c.type;
			switch(_g2._hx_index) {
			case 0:
				name = v;
				break;
			case 1:
				if(c.name == this.sheet.sheet.props.displayColumn && v != null && v != "") {
					return Std.string(v) + "#" + this.index;
				}
				break;
			case 6:
				var _g11 = _g2.sheet;
				if(c.name == this.sheet.sheet.props.displayColumn && v != null && v != "") {
					return Std.string(v) + "#" + this.index;
				}
				break;
			default:
			}
		}
		return name;
	}
	,set_mouseCapture: function(e) {
		var _gthis = this;
		this.mouseCapture = e;
		if(e != null) {
			var onUp = null;
			onUp = function(_) {
				window.document.removeEventListener("mouseup",onUp);
				if(_gthis.mouseCapture != null) {
					_gthis.mouseCapture.mouseup();
					_gthis.mouseCapture = null;
				}
			};
			window.document.addEventListener("mouseup",onUp);
		}
		return e;
	}
	,init: function() {
		var _gthis = this;
		this.layers = [];
		this.watchList = [];
		this.watchTimer = new haxe_Timer(50);
		this.watchTimer.run = $bind(this,this.checkWatch);
		var key = Level.loadedTilesCache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.watchSplit(key1);
		}
		this.props = this.obj.props;
		if(this.props == null) {
			this.props = { };
			this.obj.props = this.props;
		}
		if(this.props.tileSize == null) {
			this.props.tileSize = 16;
		}
		this.tileSize = this.props.tileSize;
		var lprops = new haxe_ds_StringMap();
		if(this.props.layers == null) {
			this.props.layers = [];
		}
		var _g = 0;
		var _g1 = this.props.layers;
		while(_g < _g1.length) {
			var ld = _g1[_g];
			++_g;
			var key2 = ld.l;
			var prev = __map_reserved[key2] != null ? lprops.getReserved(key2) : lprops.h[key2];
			if(prev != null) {
				HxOverrides.remove(this.props.layers,prev);
			}
			var key3 = ld.l;
			if(__map_reserved[key3] != null) {
				lprops.setReserved(key3,ld);
			} else {
				lprops.h[key3] = ld;
			}
		}
		var getProps = function(name) {
			var p = __map_reserved[name] != null ? lprops.getReserved(name) : lprops.h[name];
			if(p == null) {
				p = { l : name, p : { alpha : 1.}};
				_gthis.props.layers.push(p);
			}
			lprops.remove(name);
			return p.p;
		};
		this.waitCount = 1;
		var title = "";
		var _g2 = 0;
		var _g3 = this.sheet.sheet.columns;
		while(_g2 < _g3.length) {
			var c = _g3[_g2];
			++_g2;
			var val = Reflect.field(this.obj,c.name);
			switch(c.name) {
			case "height":
				this.height = val;
				break;
			case "width":
				this.width = val;
				break;
			default:
			}
			var _g31 = c.type;
			switch(_g31._hx_index) {
			case 0:
				title = val;
				break;
			case 8:
				var _this = this.sheet;
				var sheet = _this.base.getSheet(_this.sheet.name + "@" + c.name);
				var floatCoord = false;
				var tmp;
				if(!(sheet.hasColumn("x",[cdb_ColumnType.TInt]) && sheet.hasColumn("y",[cdb_ColumnType.TInt]))) {
					floatCoord = sheet.hasColumn("x",[cdb_ColumnType.TFloat]) && sheet.hasColumn("y",[cdb_ColumnType.TFloat]);
					tmp = floatCoord;
				} else {
					tmp = true;
				}
				if(tmp) {
					var sid = null;
					var idCol = null;
					var _g32 = 0;
					var _g4 = sheet.sheet.columns;
					while(_g32 < _g4.length) {
						var cid = _g4[_g32];
						++_g32;
						var _g33 = cid.type;
						if(_g33._hx_index == 6) {
							var rid = _g33.sheet;
							sid = this.model.base.getSheet(rid);
							idCol = cid.name;
							break;
						}
					}
					var l = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
					l.hasFloatCoord = l.floatCoord = floatCoord;
					l.baseSheet = sheet;
					l.loadSheetData(sid);
					l.setObjectsData(idCol,val);
					l.hasSize = sheet.hasColumn("width",[floatCoord ? cdb_ColumnType.TFloat : cdb_ColumnType.TInt]) && sheet.hasColumn("height",[floatCoord ? cdb_ColumnType.TFloat : cdb_ColumnType.TInt]);
					this.layers.push(l);
				} else if(sheet.hasColumn("name",[cdb_ColumnType.TString]) && sheet.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
					var val1 = val;
					var _g34 = 0;
					while(_g34 < val1.length) {
						var lobj = val1[_g34];
						++_g34;
						if(lobj.name == null) {
							continue;
						}
						var l1 = new lvl_LayerData(this,lobj.name,getProps(lobj.name),{ o : lobj, f : "data"});
						l1.setTilesData(lobj.data);
						l1.listColumnn = c;
						this.layers.push(l1);
					}
					this.newLayer = c;
				}
				break;
			case 12:
				var type = _g31.type;
				var l2 = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
				l2.loadSheetData(this.model.base.getSheet(type));
				l2.setLayerData(val);
				this.layers.push(l2);
				break;
			case 15:
				var l3 = new lvl_LayerData(this,c.name,getProps(c.name),{ o : this.obj, f : c.name});
				l3.setTilesData(val);
				this.layers.push(l3);
				break;
			default:
			}
		}
		var c1 = lprops.arrayKeys();
		var c2 = new haxe_ds__$StringMap_StringMapIterator(lprops,c1);
		while(c2.hasNext()) {
			var c3 = c2.next();
			HxOverrides.remove(this.props.layers,c3);
		}
		if(this.sheet.sheet.props.displayColumn != null) {
			var t = Reflect.field(this.obj,this.sheet.sheet.props.displayColumn);
			if(t != null) {
				title = t;
			}
		}
		this.palette.init();
		this.waitDone();
	}
	,watchSplit: function(key) {
		var _gthis = this;
		var file = key.split("@").shift();
		var abs = this.model.getAbsPath(file);
		this.watch(file,function() {
			lvl_Image.load(abs,function(_) {
				Level.loadedTilesCache.remove(key);
				_gthis.reload();
			},function() {
				var _g = 0;
				var _g1 = _gthis.watchList;
				while(_g < _g1.length) {
					var w = _g1[_g];
					++_g;
					if(w.path == abs) {
						w.time = 0;
					}
				}
			},true);
		});
	}
	,loadAndSplit: function(file,size,callb) {
		var key = file + "@" + size;
		var _this = Level.loadedTilesCache;
		var a = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(a == null) {
			a = { pending : [], data : null};
			var _this1 = Level.loadedTilesCache;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,a);
			} else {
				_this1.h[key] = a;
			}
			lvl_Image.load(this.model.getAbsPath(file),function(i) {
				var images = [];
				var blanks = [];
				var w = i.width / size | 0;
				var h = i.height / size | 0;
				var _g = 0;
				var _g1 = h;
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = w;
					while(_g2 < _g11) {
						var x = _g2++;
						var i1 = i.sub(x * size,y * size,size,size);
						blanks[images.length] = i1.isBlank();
						images.push(i1);
					}
				}
				a.data = { w : w, h : h, img : images, blanks : blanks};
				var _g21 = 0;
				var _g3 = a.pending;
				while(_g21 < _g3.length) {
					var p = _g3[_g21];
					++_g21;
					p(w,h,images,blanks);
				}
				a.pending = [];
			},function() {
				throw new js__$Boot_HaxeError("Could not load " + file);
			});
			this.watchSplit(key);
		}
		if(a.data != null) {
			callb(a.data.w,a.data.h,a.data.img,a.data.blanks);
		} else {
			a.pending.push(callb);
		}
	}
	,reload: function() {
		if(!this.reloading) {
			this.reloading = true;
			var value = this.model;
			(((value) instanceof Main) ? value : null).initContent();
		}
	}
	,allocRef: function(f) {
		var r = { ref : f};
		this.references.push(r);
		return r;
	}
	,dispose: function() {
		if(this.content != null) {
			this.content.html("");
		}
		if(this.view != null) {
			this.view.dispose();
			this.view.viewport.parentNode.removeChild(this.view.viewport);
			this.view = null;
			var _g = 0;
			var _g1 = this.references;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				r.ref = null;
			}
		}
		this.watchTimer.stop();
		this.watchTimer = null;
	}
	,isDisposed: function() {
		return this.watchTimer == null;
	}
	,watch: function(path,callb) {
		path = this.model.getAbsPath(path);
		var _g = 0;
		var _g1 = this.watchList;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			if(w.path == path) {
				w.callb.push(callb);
				return;
			}
		}
		this.watchList.push({ path : path, time : this.getFileTime(path), callb : [callb]});
	}
	,checkWatch: function() {
		var _g = 0;
		var _g1 = this.watchList;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			var f = this.getFileTime(w.path);
			if(f != w.time && f != 0.) {
				w.time = f;
				js_node_webkit_App.clearCache();
				var _g2 = 0;
				var _g11 = w.callb;
				while(_g2 < _g11.length) {
					var c = _g11[_g2];
					++_g2;
					c();
				}
			}
		}
	}
	,getFileTime: function(path) {
		try {
			return js_node_Fs.statSync(path).mtime.getTime();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return 0.;
		}
	}
	,wait: function() {
		this.waitCount++;
		var nowLoading = window.document.querySelector("#now-loading-text");
		nowLoading.className = "";
		nowLoading.innerText = "Working... " + this.waitCount + "+";
	}
	,waitDone: function() {
		var nowLoading = window.document.querySelector("#now-loading-text");
		if(--this.waitCount != 0) {
			nowLoading.innerText = "Working... " + this.waitCount + "-";
			return;
		}
		if(this.isDisposed()) {
			return;
		}
		nowLoading.className = "no-display";
		this.setup();
		var layer = this.layers[0];
		var state;
		try {
			state = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem(this.sheetPath + "#" + this.index));
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			state = null;
		}
		if(state != null) {
			var _g = 0;
			var _g1 = this.layers;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.name == state.curLayer) {
					layer = l;
					break;
				}
			}
			this.zoomView = state.zoomView;
			this.palette.paintMode = state.paintMode;
			this.palette.randomMode = state.randomMode;
			this.palette.mode = state.paletteMode;
			this.palette.modeCursor = state.paletteModeCursor;
			this.palette.small = state.smallPalette;
			this.flipMode = state.flipMode;
			this.rotation = state.rotation;
			if(this.rotation == null) {
				this.rotation = 0;
			}
			if(this.palette.small == null) {
				this.palette.small = false;
			}
		}
		this.setLayer(layer);
		this.updateZoom();
		var sc = this.content.find(".scroll");
		if(state != null) {
			sc.scrollLeft(state.scrollX);
			sc.scrollTop(state.scrollY);
		}
		sc.scroll();
	}
	,toColor: function(v) {
		return "#" + StringTools.hex(v,6);
	}
	,hasHole: function(i,x,y) {
		var x1 = x + (-1);
		var y1 = y + (-1);
		if(x1 >= 0 && y1 >= 0 && x1 < i.width && y1 < i.height && i.getPixel(x1,y1) >>> 24 != 0) {
			return false;
		}
		var x2 = x + (-1);
		var y2 = y;
		if(x2 >= 0 && y2 >= 0 && x2 < i.width && y2 < i.height && i.getPixel(x2,y2) >>> 24 != 0) {
			return false;
		}
		var x3 = x + (-1);
		var y3 = y + 1;
		if(x3 >= 0 && y3 >= 0 && x3 < i.width && y3 < i.height && i.getPixel(x3,y3) >>> 24 != 0) {
			return false;
		}
		var x4 = x;
		var y4 = y + (-1);
		if(x4 >= 0 && y4 >= 0 && x4 < i.width && y4 < i.height && i.getPixel(x4,y4) >>> 24 != 0) {
			return false;
		}
		var x5 = x;
		var y5 = y;
		if(x5 >= 0 && y5 >= 0 && x5 < i.width && y5 < i.height && i.getPixel(x5,y5) >>> 24 != 0) {
			return false;
		}
		var x6 = x;
		var y6 = y + 1;
		if(x6 >= 0 && y6 >= 0 && x6 < i.width && y6 < i.height && i.getPixel(x6,y6) >>> 24 != 0) {
			return false;
		}
		var x7 = x + 1;
		var y7 = y + (-1);
		if(x7 >= 0 && y7 >= 0 && x7 < i.width && y7 < i.height && i.getPixel(x7,y7) >>> 24 != 0) {
			return false;
		}
		var x8 = x + 1;
		var y8 = y;
		if(x8 >= 0 && y8 >= 0 && x8 < i.width && y8 < i.height && i.getPixel(x8,y8) >>> 24 != 0) {
			return false;
		}
		var x9 = x + 1;
		var y9 = y + 1;
		if(x9 >= 0 && y9 >= 0 && x9 < i.width && y9 < i.height && i.getPixel(x9,y9) >>> 24 != 0) {
			return false;
		}
		return true;
	}
	,pick: function(filter) {
		if(this.curPos == null) {
			return null;
		}
		var i = this.layers.length - 1;
		while(i >= 0) {
			var l = this.layers[i--];
			if(!l.enabled() || filter != null && !filter(l)) {
				continue;
			}
			var x = this.curPos.xf;
			var y = this.curPos.yf;
			var ix = (x - this.curPos.x) * this.tileSize | 0;
			var iy = (y - this.curPos.y) * this.tileSize | 0;
			var _g = l.data;
			switch(_g._hx_index) {
			case 0:
				var data = _g.a;
				var idx = this.curPos.x + this.curPos.y * this.width;
				var k = data[idx];
				if(k == 0 && i >= 0) {
					continue;
				}
				if(l.images != null) {
					var i1 = l.images[k];
					if(this.hasHole(i1,ix + (i1.width - this.tileSize >> 1),iy + (i1.height - this.tileSize))) {
						continue;
					}
				}
				return { k : k, layer : l, index : idx};
			case 1:
				var objs = [_g.objs];
				var idCol = _g.idCol;
				if(l.images == null) {
					var found = [];
					var _g1 = 0;
					var _g11 = objs[0].length;
					while(_g1 < _g11) {
						var i2 = _g1++;
						var o = objs[0][i2];
						var w = l.hasSize ? o.width : 1;
						var h = l.hasSize ? o.height : 1;
						if(x >= o.x && y >= o.y && x < o.x + w && y < o.y + h) {
							if(l.idToIndex == null) {
								found.push({ k : 0, layer : l, index : i2});
							} else {
								var key = Reflect.field(o,idCol);
								var _this = l.idToIndex;
								found.push({ k : __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key], layer : l, index : i2});
							}
						}
					}
					if(l.hasSize) {
						found.sort((function(objs1) {
							return function(f1,f2) {
								var o1 = objs1[0][f1.index];
								var o2 = objs1[0][f2.index];
								return Reflect.compare(o2.width * o2.height,o1.width * o1.height);
							};
						})(objs));
					}
					if(found.length > 0) {
						return found.pop();
					}
				} else {
					var max = objs[0].length - 1;
					var _g2 = 0;
					var _g12 = objs[0].length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						var i4 = max - i3;
						var o3 = objs[0][i4];
						var key1 = Reflect.field(o3,idCol);
						var _this1 = l.idToIndex;
						var k1 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						if(k1 == null) {
							continue;
						}
						var img = l.images[k1];
						var w1 = img.width / this.tileSize;
						var h1 = img.height / this.tileSize;
						var ox = o3.x;
						var oy = o3.y;
						if(x >= ox && y >= oy && x < ox + w1 && y < oy + h1 && !this.hasHole(img,(x - ox) * this.tileSize | 0,(y - oy) * this.tileSize | 0)) {
							return { k : k1, layer : l, index : i4};
						}
					}
				}
				break;
			case 2:
				var _g6 = _g.t;
				var data1 = _g.data;
				var idx1 = this.curPos.x + this.curPos.y * this.width;
				var k2 = data1[idx1] - 1;
				if(k2 < 0) {
					continue;
				}
				var i5 = l.images[k2];
				if(i5.getPixel(ix,iy) >>> 24 == 0) {
					continue;
				}
				return { k : k2, layer : l, index : idx1};
			case 3:
				var _g13 = _g.t;
				var insts = _g.insts;
				var objs2 = l.getTileObjects();
				var idx2 = insts.length;
				while(idx2 > 0) {
					var i6 = insts[--idx2];
					var o4 = objs2.h[i6.o];
					if(x >= i6.x && y >= i6.y && x < i6.x + (o4 == null ? 1 : o4.w) && y < i6.y + (o4 == null ? 1 : o4.h)) {
						var im = l.images[i6.o + (x - i6.x | 0) + (y - i6.y | 0) * l.stride];
						if(this.hasHole(im,ix,iy)) {
							continue;
						}
						return { k : i6.o, layer : l, index : idx2};
					}
				}
				break;
			}
		}
		return null;
	}
	,action: function(name,val) {
		var _gthis = this;
		var op = this.prepOp("Action '" + name + "'");
		var l = this.currentLayer;
		switch(name) {
		case "alpha":
			l.props.alpha = val / 100;
			this.draw();
			break;
		case "close":
			(js_Boot.__cast(this.model , Main)).closeLevel(this);
			break;
		case "file":
			var m = js_Boot.__cast(this.model , Main);
			m.chooseFile(function(path) {
				var _g = _gthis.currentLayer.data;
				switch(_g._hx_index) {
				case 2:
					var _g4 = _g.data;
					var t = _g.t;
					if(t.file == null) {
						var size = _gthis.props.tileSize;
						t.stride = t.size * t.stride / size | 0;
						t.size = size;
					}
					t.file = path;
					_gthis.currentLayer.dirty = true;
					_gthis.commitOp(op);
					_gthis.reload();
					break;
				case 3:
					var _g2 = _g.insts;
					var t1 = _g.t;
					if(t1.file == null) {
						var size1 = _gthis.props.tileSize;
						t1.stride = t1.size * t1.stride / size1 | 0;
						t1.size = size1;
					}
					t1.file = path;
					_gthis.currentLayer.dirty = true;
					_gthis.commitOp(op);
					_gthis.reload();
					break;
				default:
				}
			});
			break;
		case "layer":
			if(this.newLayer == null) {
				return;
			}
			var opt = this.content.find(".submenu.newlayer");
			var hide = opt.is(":visible");
			this.content.find(".submenu").hide();
			if(hide) {
				this.content.find(".submenu.layer").show();
			} else {
				opt.show();
				this.content.find("[name=newName]").val("");
			}
			break;
		case "lock":
			l.lock = val;
			l.comp.toggleClass("locked",l.lock);
			l.saveState();
			break;
		case "lockGrid":
			l.floatCoord = l.hasFloatCoord && !val;
			l.saveState();
			break;
		case "mode":
			this.setLayerMode(val);
			break;
		case "options":
			var opt1 = this.content.find(".submenu.options");
			var hide1 = opt1.is(":visible");
			this.content.find(".submenu").hide();
			if(hide1) {
				this.content.find(".submenu.layer").show();
			} else {
				opt1.show();
				this.content.find("[name=tileSize]").val("" + this.tileSize);
			}
			break;
		case "size":
			var _g1 = l.data;
			switch(_g1._hx_index) {
			case 2:
				var _g41 = _g1.data;
				var t2 = _g1.t;
				var size2 = val;
				t2.stride = t2.size * t2.stride / size2 | 0;
				t2.size = size2;
				l.dirty = true;
				this.commitOp(op);
				this.reload();
				break;
			case 3:
				var _g21 = _g1.insts;
				var t3 = _g1.t;
				var size3 = val;
				t3.stride = t3.size * t3.stride / size3 | 0;
				t3.size = size3;
				l.dirty = true;
				this.commitOp(op);
				this.reload();
				break;
			default:
			}
			break;
		case "visible":
			l.set_visible(val);
			l.saveState();
			this.draw();
			break;
		}
		$(":focus").blur();
	}
	,addNewLayer: function(name) {
		var op = this.prepOp("New Layer");
		if(this.newLayer.type._hx_index == 8) {
			var _this = this.sheet;
			var s = _this.base.getSheet(_this.sheet.name + "@" + this.newLayer.name);
			var o = { name : null, data : null};
			var _g = 0;
			var _g1 = s.sheet.columns;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var v = this.model.base.getDefault(c);
				if(v != null) {
					o[c.name] = v;
				}
			}
			var a = Reflect.field(this.obj,this.newLayer.name);
			o.name = name;
			a.push(o);
			var n = a.length - 2;
			while(n >= 0) {
				var o2 = a[n--];
				if(o2.data != null) {
					var _g2 = [];
					var _g3 = 0;
					var _g4 = this.width * this.height;
					while(_g3 < _g4) {
						var k = _g3++;
						_g2.push(0);
					}
					var a1 = cdb__$Types_TileLayerData_$Impl_$.encode(_g2,this.model.compressionEnabled());
					o.data = { file : o2.data.file, size : o2.data.size, stride : o2.data.stride, data : a1};
					break;
				}
			}
			this.props.layers.push({ l : name, p : { alpha : 1.}});
			this.currentLayer = { name : name};
			this.savePrefs();
			this.commitOp(op);
			this.reload();
		}
	}
	,popupLayer: function(l,mouseX,mouseY) {
		var _gthis = this;
		this.setLayer(l);
		var n = new js_node_webkit_Menu();
		var nclear = new js_node_webkit_MenuItem({ label : "Clear"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var nshow = new js_node_webkit_MenuItem({ label : "Show Only"});
		var nshowAll = new js_node_webkit_MenuItem({ label : "Show All"});
		var nrename = new js_node_webkit_MenuItem({ label : "Rename"});
		var m = nshow;
		n.append(m);
		var m1 = nshowAll;
		n.append(m1);
		var m2 = nrename;
		n.append(m2);
		var m3 = nclear;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		nclear.click = function() {
			var op = _gthis.prepOp("Clear");
			var _g = l.data;
			switch(_g._hx_index) {
			case 0:
				var data = _g.a;
				var _g1 = 0;
				var _g11 = data.length;
				while(_g1 < _g11) {
					var i = _g1++;
					data[i] = 0;
				}
				break;
			case 1:
				var _g3 = _g.idCol;
				var objs = _g.objs;
				while(objs.length > 0) objs.pop();
				break;
			case 2:
				var _g6 = _g.t;
				var data1 = _g.data;
				var _g2 = 0;
				var _g12 = data1.length;
				while(_g2 < _g12) {
					var i1 = _g2++;
					data1[i1] = 0;
				}
				break;
			case 3:
				var _g13 = _g.t;
				var insts = _g.insts;
				while(insts.length > 0) insts.pop();
				break;
			}
			l.dirty = true;
			_gthis.commitOp(op);
			_gthis.draw();
		};
		ndel.enabled = l.listColumnn != null;
		ndel.click = function() {
			var op1 = _gthis.prepOp("Delete Layer");
			var layers = Reflect.field(_gthis.obj,l.listColumnn.name);
			HxOverrides.remove(layers,l.targetObj.o);
			_gthis.commitOp(op1);
			_gthis.reload();
		};
		nshow.click = function() {
			var _g4 = 0;
			var _g14 = _gthis.layers;
			while(_g4 < _g14.length) {
				var l2 = _g14[_g4];
				++_g4;
				l2.set_visible(l == l2);
				l2.saveState();
			}
			_gthis.draw();
		};
		nshowAll.click = function() {
			var _g5 = 0;
			var _g15 = _gthis.layers;
			while(_g5 < _g15.length) {
				var l21 = _g15[_g5];
				++_g5;
				l21.set_visible(true);
				l21.saveState();
			}
			_gthis.draw();
		};
		nrename.click = function() {
			l.comp.find("span").remove();
			l.comp.prepend($("<input type='text'>").val(l.name).focus().blur(function(_) {
				var n1 = StringTools.trim($(this).val());
				var _g7 = 0;
				var _g16 = _gthis.props.layers;
				while(_g7 < _g16.length) {
					var p = _g16[_g7];
					++_g7;
					if(p.l == n1) {
						_gthis.reload();
						return;
					}
				}
				var op2 = _gthis.prepOp("Rename");
				var _g21 = 0;
				var _g31 = _gthis.props.layers;
				while(_g21 < _g31.length) {
					var p1 = _g31[_g21];
					++_g21;
					if(p1.l == l.name) {
						p1.l = n1;
					}
				}
				var layers1 = Reflect.field(_gthis.obj,_gthis.newLayer.name);
				var _g41 = 0;
				while(_g41 < layers1.length) {
					var l22 = layers1[_g41];
					++_g41;
					if(l22.name == l.name) {
						l22.name = n1;
					}
				}
				l.name = n1;
				_gthis.currentLayer = null;
				_gthis.setLayer(l);
				_gthis.commitOp(op2);
				_gthis.reload();
			}).keypress(function(e) {
				if(e.keyCode == 13) {
					$(this).blur();
				}
			}));
		};
		nrename.enabled = ndel.enabled;
		n.popup(mouseX,mouseY);
	}
	,onResize: function() {
		var win = js_node_webkit_Window.get();
		this.content.find(".scroll").css("height",win.height - 240 + "px");
	}
	,setSort: function(j,callb) {
		j.sortable({ vertical : false, onDrop : function(item,container,_super) {
			_super(item,container);
			callb.ref(null);
		}});
	}
	,spectrum: function(j,options,change,show) {
		options.change = function(c) {
			var change1 = change;
			var tmp = Std.parseInt("0x" + c.toHex());
			change1.ref(tmp);
		};
		if(show != null) {
			options.show = function() {
				show.ref(null);
			};
		}
		j.spectrum(options);
	}
	,setup: function() {
		var _gthis = this;
		var page = $("#content");
		page.html("");
		this.content = $($("#levelContent").html()).appendTo(page);
		var mlayers = this.content.find(".layers");
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var index = _g++;
			var l = [this.layers[index]];
			var td = $("<li class='item layer'>").appendTo(mlayers);
			l[0].comp = td;
			td.data("index",index);
			if(!l[0].visible) {
				td.addClass("hidden");
			}
			if(l[0].lock) {
				td.addClass("locked");
			}
			td.mousedown((function(l1) {
				return function(e) {
					switch(e.which) {
					case 1:
						_gthis.palette.mode = null;
						_gthis.setLayer(l1[0]);
						break;
					case 3:
						_gthis.popupLayer(l1[0],e.pageX | 0,e.pageY | 0);
						e.preventDefault();
						break;
					}
				};
			})(l));
			$("<span>").text(l[0].name).appendTo(td);
			if(l[0].images != null || l[0].colors == null) {
				continue;
			}
			var id = Level.UID++;
			var t = $("<input type=\"text\" id=\"_" + Level.UID++ + "\">").appendTo(td);
			var tmp = this.toColor(l[0].colors[l[0].current]);
			var _g2 = [];
			var _g11 = 0;
			var _g21 = l[0].colors;
			while(_g11 < _g21.length) {
				var c = _g21[_g11];
				++_g11;
				_g2.push(this.toColor(c));
			}
			var tmp1 = this.allocRef((function(l2) {
				return function(color) {
					var _g3 = 0;
					var _g4 = l2[0].colors.length;
					while(_g3 < _g4) {
						var i = _g3++;
						if(l2[0].colors[i] == color) {
							l2[0].set_current(i);
							_gthis.setLayer(l2[0]);
							return;
						}
					}
					_gthis.setLayer(l2[0]);
				};
			})(l));
			var tmp2 = this.allocRef((function(l3) {
				return function(_) {
					_gthis.setLayer(l3[0]);
				};
			})(l));
			this.spectrum(t,{ color : tmp, clickoutFiresChange : true, showButtons : false, showPaletteOnly : true, showPalette : true, palette : _g2},tmp1,tmp2);
		}
		var callb = this.allocRef(function(_1) {
			var op = _gthis.prepOp("???");
			var indexes = [];
			var _g2_i = 0;
			var _g2_j = mlayers.find("li");
			while(_g2_i < _g2_j.length) {
				var i1 = $(_g2_j[_g2_i++]);
				indexes.push(i1.data("index"));
			}
			var _g31 = [];
			var _g41 = 0;
			var _g5 = _gthis.layers.length;
			while(_g41 < _g5) {
				var i2 = _g41++;
				_g31.push(_gthis.layers[indexes[i2]]);
			}
			_gthis.layers = _g31;
			var _g6 = 0;
			var _g7 = _gthis.layers.length;
			while(_g6 < _g7) {
				var i3 = _g6++;
				_gthis.layers[i3].comp.data("index",i3);
			}
			var groups = new haxe_ds_StringMap();
			var _g8 = 0;
			var _g9 = _gthis.layers;
			while(_g8 < _g9.length) {
				var l4 = _g9[_g8];
				++_g8;
				if(l4.listColumnn == null) {
					continue;
				}
				var key = l4.listColumnn.name;
				var g = __map_reserved[key] != null ? groups.getReserved(key) : groups.h[key];
				if(g == null) {
					g = [];
					var key1 = l4.listColumnn.name;
					if(__map_reserved[key1] != null) {
						groups.setReserved(key1,g);
					} else {
						groups.h[key1] = g;
					}
				}
				g.push(l4);
			}
			var g1 = groups.keys();
			while(g1.hasNext()) {
				var g2 = g1.next();
				var layers = __map_reserved[g2] != null ? groups.getReserved(g2) : groups.h[g2];
				var _g10 = [];
				var _g111 = 0;
				while(_g111 < layers.length) {
					var l5 = layers[_g111];
					++_g111;
					_g10.push(l5.targetObj.o);
				}
				var objs = _g10;
				_gthis.obj[g2] = objs;
			}
			_gthis.commitOp(op);
			_gthis.draw();
		});
		this.setSort(mlayers,callb);
		var tmp3 = this.newLayer != null ? "block" : "none";
		this.content.find("[name=newlayer]").css({ display : tmp3});
		var scroll = this.content.find(".scroll");
		var scont = this.content.find(".scrollContent");
		this.view = lvl_Image3D.getInstance();
		scont.append(this.view.viewport);
		scroll.scroll(function(_2) {
			_gthis.savePrefs();
			_gthis.view.setScrollPos((scroll.scrollLeft() | 0) - 20,(scroll.scrollTop() | 0) - 20);
		});
		scroll[0].onmousewheel = function(e1) {
			if(e1.shiftKey) {
				_gthis.updateZoom(e1.wheelDelta > 0);
			}
		};
		var tmp4 = this.content.find("[name=color]");
		var tmp5 = this.allocRef(function(c1) {
			var op1 = _gthis.prepOp("Color");
			_gthis.currentLayer.props.color = c1;
			_gthis.commitOp(op1);
			_gthis.draw();
		});
		this.spectrum(tmp4,{ clickoutFiresChange : true, showButtons : false},tmp5);
		this.onResize();
		this.cursor = this.content.find("#cursor");
		this.cursorImage = new lvl_Image(0,0);
		this.cursorImage.set_smooth(false);
		this.tmpImage = new lvl_Image(0,0);
		this.cursor[0].appendChild(this.cursorImage.getCanvas());
		this.cursor.hide();
		scont.mouseleave(function(_3) {
			_gthis.curPos = null;
			if(_gthis.selection == null) {
				_gthis.cursor.hide();
			}
			$(".cursorPosition").text("");
		});
		scont.mousemove(function(e2) {
			_gthis.mousePos.x = e2.pageX | 0;
			_gthis.mousePos.y = e2.pageY | 0;
			_gthis.updateCursorPos();
		});
		var onMouseUp = function(_4) {
			_gthis.mouseDown = null;
			if(_gthis.currentLayer != null && _gthis.currentLayer.hasSize) {
				_gthis.setCursor();
			}
			if(_gthis.needSave) {
				_gthis.commitOp(_gthis.opInProgress);
			}
		};
		scroll.mousedown(function(e3) {
			if(_gthis.palette.mode != null) {
				_gthis.palette.mode = null;
				_gthis.setCursor();
				return;
			}
			switch(e3.which) {
			case 1:
				var l6 = _gthis.currentLayer;
				if(l6 == null) {
					return;
				}
				var o = l6.getSelObjects()[0];
				var w = o == null ? _gthis.currentLayer.currentWidth : o.w;
				var h = o == null ? _gthis.currentLayer.currentHeight : o.h;
				if(o == null && _gthis.palette.randomMode) {
					h = 1;
					w = h;
				}
				_gthis.mouseDown = { rx : _gthis.curPos == null ? 0 : _gthis.curPos.x % w, ry : _gthis.curPos == null ? 0 : _gthis.curPos.y % h, w : w, h : h};
				_gthis.set_mouseCapture(scroll);
				if(_gthis.curPos != null) {
					_gthis.set(_gthis.curPos.x,_gthis.curPos.y,e3.ctrlKey);
					_gthis.startPos = Reflect.copy(_gthis.curPos);
				}
				break;
			case 3:
				if(_gthis.selection != null) {
					_gthis.clearSelection();
					_gthis.draw();
					return;
				}
				var p = _gthis.pick();
				if(p != null) {
					p.layer.set_current(p.k);
					var _g22 = p.layer.data;
					if(_g22._hx_index == 3) {
						var _g32 = _g22.t;
						var insts = _g22.insts;
						var i4 = insts[p.index];
						var obj = p.layer.getTileObjects().h[i4.o];
						if(obj != null) {
							p.layer.currentWidth = obj.w;
							p.layer.currentHeight = obj.h;
							p.layer.saveState();
						}
						_gthis.flipMode = i4.flip;
						_gthis.rotation = i4.rot;
					}
					_gthis.setLayer(p.layer);
				}
				break;
			}
		});
		this.content.mouseup(function(e4) {
			_gthis.set_mouseCapture(null);
			onMouseUp(e4);
			if(_gthis.curPos == null) {
				_gthis.startPos = null;
				return;
			}
			if(e4.which == 1 && _gthis.selection == null && _gthis.currentLayer.enabled() && _gthis.curPos.x >= 0 && _gthis.curPos.y >= 0) {
				_gthis.setObject();
			}
			_gthis.startPos = null;
			if(_gthis.selection != null) {
				_gthis.moveSelection();
				_gthis.commitOp(_gthis.opInProgress);
				_gthis.draw();
			}
		});
	}
	,setObject: function() {
		var op = this.prepOp("Set Object");
		var _g = this.currentLayer.data;
		if(_g._hx_index == 1) {
			var objs = _g.objs;
			var idCol = _g.idCol;
			var l = this.currentLayer;
			var fc = l.floatCoord;
			var px = fc ? this.curPos.xf : this.curPos.x;
			var py = fc ? this.curPos.yf : this.curPos.y;
			var w = 0.;
			var h = 0.;
			if(l.hasSize) {
				if(this.startPos == null) {
					return;
				}
				var sx = fc ? this.startPos.xf : this.startPos.x;
				var sy = fc ? this.startPos.yf : this.startPos.y;
				w = px - sx;
				h = py - sy;
				px = sx;
				py = sy;
				if(w < 0) {
					px += w;
					w = -w;
				}
				if(h < 0) {
					py += h;
					h = -h;
				}
				if(!fc) {
					++w;
					++h;
				}
				if(w < 0.5) {
					w = fc ? 0.5 : 1;
				}
				if(h < 0.5) {
					h = fc ? 0.5 : 1;
				}
			}
			var _g1 = 0;
			var _g11 = objs.length;
			while(_g1 < _g11) {
				var i = _g1++;
				var o = objs[i];
				if(o.x == px && o.y == py && w <= 1 && h <= 1) {
					this.editProps(l,i);
					this.setCursor();
					return;
				}
			}
			var o1 = { x : px, y : py};
			objs.push(o1);
			if(idCol != null) {
				o1[idCol] = l.indexToId[this.currentLayer.current];
			}
			var _g2 = 0;
			var _g3 = l.baseSheet.sheet.columns;
			while(_g2 < _g3.length) {
				var c = _g3[_g2];
				++_g2;
				if(c.opt || c.name == "x" || c.name == "y" || c.name == idCol) {
					continue;
				}
				var v = this.model.base.getDefault(c);
				if(v != null) {
					o1[c.name] = v;
				}
			}
			if(l.hasSize) {
				o1.width = w;
				o1.height = h;
				this.setCursor();
			}
			objs.sort(function(o11,o2) {
				var r = Reflect.compare(o11.y,o2.y);
				if(r == 0) {
					return Reflect.compare(o11.x,o2.x);
				} else {
					return r;
				}
			});
			if(this.hasProps(l,true)) {
				this.editProps(l,Lambda.indexOf(objs,o1));
			}
			this.commitOp(op);
			this.draw();
		}
	}
	,deleteSelection: function() {
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.enabled()) {
				continue;
			}
			l.dirty = true;
			var sx = this.selection.x;
			var sy = this.selection.y;
			var sw = this.selection.w;
			var sh = this.selection.h;
			var _g2 = l.data;
			switch(_g2._hx_index) {
			case 0:
				var data = _g2.a;
				var sx1 = this.selection.x | 0;
				var sy1 = this.selection.y | 0;
				var sw1 = Math.ceil(this.selection.x + this.selection.w) - sx1;
				var sh1 = Math.ceil(this.selection.y + this.selection.h) - sy1;
				var _g3 = 0;
				var _g11 = sw1;
				while(_g3 < _g11) {
					var dx = _g3++;
					var _g4 = 0;
					var _g12 = sh1;
					while(_g4 < _g12) {
						var dy = _g4++;
						data[sx1 + dx + (sy1 + dy) * this.width] = 0;
					}
				}
				break;
			case 1:
				var _g31 = _g2.idCol;
				var objs = _g2.objs;
				var _g5 = 0;
				var _g13 = objs.slice();
				while(_g5 < _g13.length) {
					var o = _g13[_g5];
					++_g5;
					var ow = l.hasSize ? o.width : 1;
					var oh = l.hasSize ? o.height : 1;
					if(sx + sw <= o.x || sy + sh <= o.y || sx >= o.x + ow || sy >= o.y + oh) {
						continue;
					}
					HxOverrides.remove(objs,o);
				}
				break;
			case 2:
				var _g6 = _g2.t;
				var data1 = _g2.data;
				var sx2 = this.selection.x | 0;
				var sy2 = this.selection.y | 0;
				var sw2 = Math.ceil(this.selection.x + this.selection.w) - sx2;
				var sh2 = Math.ceil(this.selection.y + this.selection.h) - sy2;
				var _g7 = 0;
				var _g14 = sw2;
				while(_g7 < _g14) {
					var dx1 = _g7++;
					var _g8 = 0;
					var _g15 = sh2;
					while(_g8 < _g15) {
						var dy1 = _g8++;
						data1[sx2 + dx1 + (sy2 + dy1) * this.width] = 0;
					}
				}
				break;
			case 3:
				var _g16 = _g2.t;
				var insts = _g2.insts;
				var objs1 = l.getTileObjects();
				var _g9 = 0;
				var _g17 = insts.slice();
				while(_g9 < _g17.length) {
					var i = _g17[_g9];
					++_g9;
					var o1 = objs1.h[i.o];
					var ow1 = o1 == null ? 1 : o1.w;
					var oh1 = o1 == null ? 1 : o1.h;
					if(sx + sw <= i.x || sy + sh <= i.y || sx >= i.x + ow1 || sy >= i.y + oh1) {
						continue;
					}
					HxOverrides.remove(insts,i);
				}
				break;
			}
		}
	}
	,moveSelection: function() {
		var dx = this.selection.x - this.selection.sx;
		var dy = this.selection.y - this.selection.sy;
		if(dx == 0 && dy == 0) {
			return;
		}
		var ix = dx | 0;
		var iy = dy | 0;
		var op = this.prepOp("Move selection " + ix + "," + iy);
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.enabled()) {
				continue;
			}
			var sx = this.selection.x;
			var sy = this.selection.y;
			var sw = this.selection.w;
			var sh = this.selection.h;
			l.dirty = true;
			var _g2 = l.data;
			switch(_g2._hx_index) {
			case 0:
				var data = _g2.a;
				var sx1 = this.selection.x | 0;
				var sy1 = this.selection.y | 0;
				var sw1 = Math.ceil(this.selection.x + this.selection.w) - sx1;
				var sh1 = Math.ceil(this.selection.y + this.selection.h) - sy1;
				var ndata = [];
				var _g3 = 0;
				var _g11 = this.height;
				while(_g3 < _g11) {
					var y = _g3++;
					var _g4 = 0;
					var _g12 = this.width;
					while(_g4 < _g12) {
						var x = _g4++;
						var k;
						if(x >= sx1 && x < sx1 + sw1 && y >= sy1 && y < sy1 + sh1) {
							var tx = x - ix;
							var ty = y - iy;
							if(tx >= 0 && tx < this.width && ty >= 0 && ty < this.height) {
								k = data[tx + ty * this.width];
							} else {
								k = 0;
							}
							if(k == 0 && !(x >= sx1 - ix && x < sx1 + sw1 - ix && y >= sy1 - iy && y < sy1 + sh1 - iy)) {
								k = data[x + y * this.width];
							}
						} else if(x >= sx1 - ix && x < sx1 + sw1 - ix && y >= sy1 - iy && y < sy1 + sh1 - iy) {
							k = 0;
						} else {
							k = data[x + y * this.width];
						}
						ndata.push(k);
					}
				}
				var _g21 = 0;
				var _g31 = data.length;
				while(_g21 < _g31) {
					var i = _g21++;
					data[i] = ndata[i];
				}
				break;
			case 1:
				var _g32 = _g2.idCol;
				var objs = _g2.objs;
				sx -= dx;
				sy -= dy;
				var _g5 = 0;
				var _g13 = objs.slice();
				while(_g5 < _g13.length) {
					var o = _g13[_g5];
					++_g5;
					var ow = l.hasSize ? o.width : 1;
					var oh = l.hasSize ? o.height : 1;
					if(sx + sw <= o.x || sy + sh <= o.y || sx >= o.x + ow || sy >= o.y + oh) {
						continue;
					}
					o.x += l.hasFloatCoord ? dx : ix;
					o.y += l.hasFloatCoord ? dy : iy;
					if(o.x < 0 || o.y < 0 || o.x >= this.width || o.y >= this.height) {
						HxOverrides.remove(objs,o);
					}
				}
				break;
			case 2:
				var _g6 = _g2.t;
				var data1 = _g2.data;
				var sx2 = this.selection.x | 0;
				var sy2 = this.selection.y | 0;
				var sw2 = Math.ceil(this.selection.x + this.selection.w) - sx2;
				var sh2 = Math.ceil(this.selection.y + this.selection.h) - sy2;
				var ndata1 = [];
				var _g7 = 0;
				var _g14 = this.height;
				while(_g7 < _g14) {
					var y1 = _g7++;
					var _g8 = 0;
					var _g15 = this.width;
					while(_g8 < _g15) {
						var x1 = _g8++;
						var k1;
						if(x1 >= sx2 && x1 < sx2 + sw2 && y1 >= sy2 && y1 < sy2 + sh2) {
							var tx1 = x1 - ix;
							var ty1 = y1 - iy;
							if(tx1 >= 0 && tx1 < this.width && ty1 >= 0 && ty1 < this.height) {
								k1 = data1[tx1 + ty1 * this.width];
							} else {
								k1 = 0;
							}
							if(k1 == 0 && !(x1 >= sx2 - ix && x1 < sx2 + sw2 - ix && y1 >= sy2 - iy && y1 < sy2 + sh2 - iy)) {
								k1 = data1[x1 + y1 * this.width];
							}
						} else if(x1 >= sx2 - ix && x1 < sx2 + sw2 - ix && y1 >= sy2 - iy && y1 < sy2 + sh2 - iy) {
							k1 = 0;
						} else {
							k1 = data1[x1 + y1 * this.width];
						}
						ndata1.push(k1);
					}
				}
				var _g22 = 0;
				var _g33 = data1.length;
				while(_g22 < _g33) {
					var i1 = _g22++;
					data1[i1] = ndata1[i1];
				}
				break;
			case 3:
				var _g16 = _g2.t;
				var insts = _g2.insts;
				sx -= dx;
				sy -= dy;
				var objs1 = l.getTileObjects();
				var _g9 = 0;
				var _g17 = insts.slice();
				while(_g9 < _g17.length) {
					var i2 = _g17[_g9];
					++_g9;
					var o1 = objs1.h[i2.o];
					var ow1 = o1 == null ? 1 : o1.w;
					var oh1 = o1 == null ? 1 : o1.h;
					if(sx + sw <= i2.x || sy + sh <= i2.y || sx >= i2.x + ow1 || sy >= i2.y + oh1) {
						continue;
					}
					i2.x += l.hasFloatCoord ? dx : ix;
					i2.y += l.hasFloatCoord ? dy : iy;
					if(i2.x < 0 || i2.y < 0 || i2.x >= this.width || i2.y >= this.height) {
						HxOverrides.remove(insts,i2);
					}
				}
				break;
			}
		}
		this.commitOp(op);
		this.draw();
	}
	,updateCursorPos: function() {
		if(this.currentLayer == null) {
			return;
		}
		var off = $(this.view.getCanvas()).parent().offset();
		var cxf = ((this.mousePos.x - off.left) / this.zoomView | 0) / this.tileSize;
		var cyf = ((this.mousePos.y - off.top) / this.zoomView | 0) / this.tileSize;
		var cx = cxf | 0;
		var cy = cyf | 0;
		if(cx < this.width && cy < this.height) {
			this.cursor.show();
			var fc = this.currentLayer.floatCoord;
			var border = 0;
			var ccx = fc ? cxf : cx;
			var ccy = fc ? cyf : cy;
			if(ccx < 0) {
				ccx = 0;
			}
			if(ccy < 0) {
				ccy = 0;
			}
			if(fc) {
				if(ccx > this.width) {
					ccx = this.width;
				}
				if(ccy > this.height) {
					ccy = this.height;
				}
			} else {
				if(ccx >= this.width) {
					ccx = this.width - 1;
				}
				if(ccy >= this.height) {
					ccy = this.height - 1;
				}
			}
			if(this.currentLayer.hasSize && this.mouseDown != null) {
				var px = fc ? this.startPos.xf : this.startPos.x;
				var py = fc ? this.startPos.yf : this.startPos.y;
				var pw = (fc ? cxf : cx) - px;
				var ph = (fc ? cyf : cy) - py;
				if(pw < 0) {
					px += pw;
					pw = -pw;
				}
				if(ph < 0) {
					py += ph;
					ph = -ph;
				}
				if(!fc) {
					++pw;
					++ph;
				}
				if(pw < 0.5) {
					pw = fc ? 0.5 : 1;
				}
				if(ph < 0.5) {
					ph = fc ? 0.5 : 1;
				}
				ccx = px;
				ccy = py;
				this.cursorImage.setSize(pw * this.tileSize * this.zoomView | 0,ph * this.tileSize * this.zoomView | 0);
			}
			if(this.currentLayer.images == null) {
				border = 1;
			}
			this.cursor.css({ marginLeft : (ccx * this.tileSize * this.zoomView - border | 0) + "px", marginTop : (ccy * this.tileSize * this.zoomView - border | 0) + "px"});
			this.curPos = { x : cx, y : cy, xf : cxf, yf : cyf};
			this.content.find(".cursorPosition").text(cx + "," + cy);
			if(this.mouseDown != null) {
				this.set((cx / this.mouseDown.w | 0) * this.mouseDown.w + this.mouseDown.rx,(cy / this.mouseDown.h | 0) * this.mouseDown.h + this.mouseDown.ry,false);
			}
			if(this.deleteMode != null) {
				this.doDelete();
			}
		} else {
			this.cursor.hide();
			this.curPos = null;
			this.content.find(".cursorPosition").text("");
		}
		if(this.selection != null) {
			var fc1 = this.currentLayer.floatCoord;
			var ccx1 = fc1 ? cxf : cx;
			var ccy1 = fc1 ? cyf : cy;
			if(ccx1 < 0) {
				ccx1 = 0;
			}
			if(ccy1 < 0) {
				ccy1 = 0;
			}
			if(fc1) {
				if(ccx1 > this.width) {
					ccx1 = this.width;
				}
				if(ccy1 > this.height) {
					ccy1 = this.height;
				}
			} else {
				if(ccx1 >= this.width) {
					ccx1 = this.width - 1;
				}
				if(ccy1 >= this.height) {
					ccy1 = this.height - 1;
				}
			}
			if(!this.selection.down) {
				if(this.startPos != null) {
					this.selection.x = this.selection.sx + (ccx1 - this.startPos.x);
					this.selection.y = this.selection.sy + (ccy1 - this.startPos.y);
				} else {
					this.selection.sx = this.selection.x;
					this.selection.sy = this.selection.y;
				}
				this.setCursor();
				return;
			}
			var x0 = ccx1 < this.selection.sx ? ccx1 : this.selection.sx;
			var y0 = ccy1 < this.selection.sy ? ccy1 : this.selection.sy;
			var x1 = ccx1 < this.selection.sx ? this.selection.sx : ccx1;
			var y1 = ccy1 < this.selection.sy ? this.selection.sy : ccy1;
			this.selection.x = x0;
			this.selection.y = y0;
			this.selection.w = x1 - x0;
			this.selection.h = y1 - y0;
			if(!fc1) {
				this.selection.w += 1;
				this.selection.h += 1;
			}
			this.setCursor();
		}
	}
	,hasProps: function(l,required) {
		if(required == null) {
			required = false;
		}
		var idCol;
		var _g = l.data;
		if(_g._hx_index == 1) {
			var _g2 = _g.objs;
			var idCol1 = _g.idCol;
			idCol = idCol1;
		} else {
			idCol = null;
		}
		var _g3 = 0;
		var _g4 = l.baseSheet.sheet.columns;
		while(_g3 < _g4.length) {
			var c = _g4[_g3];
			++_g3;
			if(c.name != "x" && c.name != "y" && c.name != idCol && (!required || !c.opt && this.model.base.getDefault(c) == null)) {
				return true;
			}
		}
		return false;
	}
	,editProps: function(l,index) {
		var _gthis = this;
		if(!this.hasProps(l)) {
			return;
		}
		var o = Reflect.field(this.obj,l.name)[index];
		var scroll = this.content.find(".scrollContent");
		var popup = $("<div>").addClass("popup").prependTo(scroll);
		$(window).on("mousedown",null,function(_) {
			popup.remove();
			$(window).off("mousedown");
			if(_gthis.view != null) {
				_gthis.draw();
			}
		});
		popup.mousedown(function(e) {
			e.stopPropagation();
		});
		popup.mouseup(function(e1) {
			e1.stopPropagation();
		});
		popup.click(function(e2) {
			e2.stopPropagation();
		});
		var table = $("<table>").appendTo(popup);
		var value = this.model;
		var main = ((value) instanceof Main) ? value : null;
		var _g = 0;
		var _g1 = l.baseSheet.sheet.columns;
		while(_g < _g1.length) {
			var c = [_g1[_g]];
			++_g;
			var tr = $("<tr>").appendTo(table);
			var th = $("<th>").text(c[0].name).appendTo(tr);
			var td = [$("<td>").html(main.valueHtml(c[0],Reflect.field(o,c[0].name),l.baseSheet,o)).appendTo(tr)];
			var tmp = (function(td1,c1) {
				return function(e3) {
					var psheet = new cdb_Sheet(null,{ columns : l.baseSheet.sheet.columns, props : l.baseSheet.sheet.props, name : l.baseSheet.sheet.name, lines : Reflect.field(_gthis.obj,l.name), separators : []},l.baseSheet.getPath() + ":" + index,{ sheet : _gthis.sheet, column : Lambda.indexOf(_gthis.sheet.sheet.columns,Lambda.find(_gthis.sheet.sheet.columns,(function() {
						return function(c2) {
							return c2.name == l.name;
						};
					})())), line : index});
					main.editCell(c1[0],td1[0],psheet,index);
					e3.preventDefault();
					e3.stopPropagation();
				};
			})(td,c);
			td[0].click(tmp);
		}
		var x = (o.x + 1) * this.tileSize * this.zoomView;
		var y = (o.y + 1) * this.tileSize * this.zoomView;
		var cw = this.width * this.tileSize * this.zoomView;
		var ch = this.height * this.tileSize * this.zoomView;
		if(x > cw - popup.width() - 30) {
			x = cw - popup.width() - 30;
		}
		if(y > ch - popup.height() - 30) {
			y = ch - popup.height() - 30;
		}
		var scroll1 = this.content.find(".scroll");
		if(x < scroll1.scrollLeft() + 20) {
			x = scroll1.scrollLeft() + 20;
		}
		if(y < scroll1.scrollTop() + 20) {
			y = scroll1.scrollTop() + 20;
		}
		if(x + popup.width() > scroll1.scrollLeft() + scroll1.width() - 20) {
			x = scroll1.scrollLeft() + scroll1.width() - 20 - popup.width();
		}
		if(y + popup.height() > scroll1.scrollTop() + scroll1.height() - 20) {
			y = scroll1.scrollTop() + scroll1.height() - 20 - popup.height();
		}
		popup.css({ marginLeft : (x | 0) + "px", marginTop : (y | 0) + "px"});
	}
	,updateZoom: function(f) {
		var tx = 0;
		var ty = 0;
		var sc = this.content.find(".scroll");
		if(f != null) {
			$(".popup").remove();
			var width = sc.width();
			var height = sc.height();
			var cx = (sc.scrollLeft() + width * 0.5) / this.zoomView;
			var cy = (sc.scrollTop() + height * 0.5) / this.zoomView;
			if(f) {
				this.zoomView *= 1.2;
			} else {
				this.zoomView /= 1.2;
			}
			tx = Math.round(cx * this.zoomView - width * 0.5);
			ty = Math.round(cy * this.zoomView - height * 0.5);
		}
		this.savePrefs();
		this.view.setSize(this.width * this.tileSize * this.zoomView | 0,this.height * this.tileSize * this.zoomView | 0);
		this.view.set_zoom(this.zoomView);
		this.draw();
		this.updateCursorPos();
		this.setCursor();
		if(f != null) {
			sc.scrollLeft(tx);
			sc.scrollTop(ty);
		}
	}
	,paint: function(x,y) {
		var l = this.currentLayer;
		if(!l.enabled()) {
			return;
		}
		var op = this.prepOp("Paint");
		var _g = l.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var k = data[x + y * this.width];
			if(k == l.current || l.blanks[l.current]) {
				return;
			}
			var todo = [x,y];
			while(todo.length > 0) {
				var y1 = todo.pop();
				var x1 = todo.pop();
				if(data[x1 + y1 * this.width] != k) {
					continue;
				}
				data[x1 + y1 * this.width] = l.current;
				l.dirty = true;
				if(x1 > 0) {
					todo.push(x1 - 1);
					todo.push(y1);
				}
				if(y1 > 0) {
					todo.push(x1);
					todo.push(y1 - 1);
				}
				if(x1 < this.width - 1) {
					todo.push(x1 + 1);
					todo.push(y1);
				}
				if(y1 < this.height - 1) {
					todo.push(x1);
					todo.push(y1 + 1);
				}
			}
			this.commitOp(op);
			this.draw();
			break;
		case 2:
			var _g2 = _g.t;
			var data1 = _g.data;
			var k1 = data1[x + y * this.width];
			if(k1 == l.current + 1 || l.blanks[l.current]) {
				return;
			}
			var px = x;
			var py = y;
			var zero = [];
			var todo1 = [x,y];
			while(todo1.length > 0) {
				var y2 = todo1.pop();
				var x2 = todo1.pop();
				if(data1[x2 + y2 * this.width] != k1) {
					continue;
				}
				var dx = (x2 - px) % l.currentWidth;
				if(dx < 0) {
					dx += l.currentWidth;
				}
				var dy = (y2 - py) % l.currentHeight;
				if(dy < 0) {
					dy += l.currentHeight;
				}
				var t = l.current + (this.palette.randomMode ? Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride : dx + dy * l.stride);
				if(l.blanks[t]) {
					zero.push(x2 + y2 * this.width);
				}
				data1[x2 + y2 * this.width] = t + 1;
				l.dirty = true;
				if(x2 > 0) {
					todo1.push(x2 - 1);
					todo1.push(y2);
				}
				if(y2 > 0) {
					todo1.push(x2);
					todo1.push(y2 - 1);
				}
				if(x2 < this.width - 1) {
					todo1.push(x2 + 1);
					todo1.push(y2);
				}
				if(y2 < this.height - 1) {
					todo1.push(x2);
					todo1.push(y2 + 1);
				}
			}
			var _g1 = 0;
			while(_g1 < zero.length) {
				var z = zero[_g1];
				++_g1;
				data1[z] = 0;
			}
			this.commitOp(op);
			this.draw();
			break;
		default:
		}
	}
	,onKey: function(e) {
		var _gthis = this;
		var l = this.currentLayer;
		if(e.ctrlKey) {
			switch(e.keyCode) {
			case 46:
				var p = this.pick();
				if(p != null) {
					this.deleteAll(p.layer,p.k,p.index);
				}
				break;
			case 115:
				this.action("close");
				break;
			}
			return;
		}
		if($("input[type=text]:focus").length > 0 || this.currentLayer == null) {
			return;
		}
		$(".popup").remove();
		var l1 = this.currentLayer;
		switch(e.keyCode) {
		case 9:
			var i = (this.layers.indexOf(l1) + (e.shiftKey ? this.layers.length - 1 : 1)) % this.layers.length;
			this.setLayer(this.layers[i]);
			e.preventDefault();
			e.stopPropagation();
			break;
		case 27:
			this.clearSelection();
			this.draw();
			break;
		case 32:
			e.preventDefault();
			if(this.spaceDown) {
				return;
			}
			this.spaceDown = true;
			var canvas = $(this.view.getCanvas());
			canvas.css({ cursor : "move"});
			this.cursor.hide();
			var s = canvas.closest(".scroll");
			var curX = null;
			var curY = null;
			canvas.on("mousemove",null,function(e1) {
				var tx = e1.pageX;
				var ty = e1.pageY;
				if(curX == null) {
					curX = tx;
					curY = ty;
				}
				var dx = tx - curX;
				var dy = ty - curY;
				var tmp = s.scrollLeft() - dx;
				s.scrollLeft(tmp);
				var tmp1 = s.scrollTop() - dy;
				s.scrollTop(tmp1);
				curX += dx;
				curY += dy;
				_gthis.mousePos.x = e1.pageX;
				_gthis.mousePos.y = e1.pageY;
				e1.stopPropagation();
			});
			break;
		case 37:
			e.preventDefault();
			var w = l1.currentWidth;
			var h = l1.currentHeight;
			if(l1.current % l1.stride > w - 1) {
				var _g = l1;
				_g.set_current(_g.current - w);
				if(w != 1 || h != 1) {
					l1.currentWidth = w;
					l1.currentHeight = h;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 38:
			e.preventDefault();
			var w1 = l1.currentWidth;
			var h1 = l1.currentHeight;
			if(l1.current >= l1.stride * h1) {
				var _g1 = l1;
				_g1.set_current(_g1.current - l1.stride * h1);
				if(w1 != 1 || h1 != 1) {
					l1.currentWidth = w1;
					l1.currentHeight = h1;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 39:
			e.preventDefault();
			var w2 = l1.currentWidth;
			var h2 = l1.currentHeight;
			if(l1.current % l1.stride < l1.stride - w2 && l1.images != null && l1.current + w2 < l1.images.length) {
				var _g2 = l1;
				_g2.set_current(_g2.current + w2);
				if(w2 != 1 || h2 != 1) {
					l1.currentWidth = w2;
					l1.currentHeight = h2;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 40:
			e.preventDefault();
			var w3 = l1.currentWidth;
			var h3 = l1.currentHeight;
			if(l1.images != null && l1.current + l1.stride * h3 < l1.images.length) {
				var _g3 = l1;
				_g3.set_current(_g3.current + l1.stride * h3);
				if(w3 != 1 || h3 != 1) {
					l1.currentWidth = w3;
					l1.currentHeight = h3;
					l1.saveState();
				}
				this.setCursor();
			}
			break;
		case 46:
			if(this.selection != null) {
				var op = this.prepOp("Delete Selection");
				this.deleteSelection();
				this.clearSelection();
				this.commitOp(op);
				this.draw();
				return;
			}
			break;
		case 68:
			if(this.currentLayer.hasRotFlip) {
				this.rotation++;
				this.rotation %= 4;
				this.savePrefs();
			}
			this.setCursor();
			break;
		case 70:
			if(this.currentLayer.hasRotFlip) {
				this.flipMode = !this.flipMode;
				this.savePrefs();
			}
			this.setCursor();
			break;
		case 71:
			if(l1.hasFloatCoord) {
				this.action("lockGrid",l1.floatCoord);
				this.content.find("[name=lockGrid]").prop("checked",!l1.floatCoord);
			}
			break;
		case 73:
			this.paletteOption("small");
			break;
		case 76:
			this.action("lock",!l1.lock);
			this.content.find("[name=lock]").prop("checked",l1.lock);
			break;
		case 79:
			if(this.palette != null && l1.tileProps != null) {
				var op1 = this.prepOp("O");
				var mode = "object";
				var found = false;
				var _g4 = 0;
				var _g11 = l1.tileProps.sets;
				while(_g4 < _g11.length) {
					var t = _g11[_g4];
					++_g4;
					if(t.x + t.y * l1.stride == l1.current && t.t == mode) {
						found = true;
						HxOverrides.remove(l1.tileProps.sets,t);
						break;
					}
				}
				if(!found) {
					l1.tileProps.sets.push({ x : l1.current % l1.stride, y : l1.current / l1.stride | 0, w : l1.currentWidth, h : l1.currentHeight, t : mode, opts : { }});
					var _g21 = 0;
					var _g31 = this.layers;
					while(_g21 < _g31.length) {
						var l2 = _g31[_g21];
						++_g21;
						if(l2.tileProps == l1.tileProps) {
							var _g22 = l2.data;
							if(_g22._hx_index == 3) {
								var _g32 = _g22.t;
								var insts = _g22.insts;
								var found1 = [];
								var _g23 = 0;
								while(_g23 < insts.length) {
									var i1 = insts[_g23];
									++_g23;
									if(i1.o == l1.current) {
										found1.push({ x : i1.x, y : i1.y, i : []});
									} else {
										var d = i1.o - l1.current;
										var dx1 = d % l1.stride;
										var dy1 = d / l1.stride | 0;
										var _g24 = 0;
										while(_g24 < found1.length) {
											var f = found1[_g24];
											++_g24;
											if(f.x == i1.x - dx1 && f.y == i1.y - dy1) {
												f.i.push(i1);
											}
										}
									}
								}
								var count = l1.currentWidth * l1.currentHeight - 1;
								var _g33 = 0;
								while(_g33 < found1.length) {
									var f1 = found1[_g33];
									++_g33;
									if(f1.i.length == count) {
										var _g34 = 0;
										var _g41 = f1.i;
										while(_g34 < _g41.length) {
											var i2 = _g41[_g34];
											++_g34;
											l2.dirty = true;
											HxOverrides.remove(insts,i2);
										}
									}
								}
							}
						}
					}
				}
				this.setCursor();
				this.commitOp(op1);
				this.draw();
			}
			break;
		case 82:
			this.paletteOption("random");
			break;
		case 86:
			this.action("visible",!l1.visible);
			this.content.find("[name=visible]").prop("checked",l1.visible);
			break;
		case 107:
			this.updateZoom(true);
			break;
		case 109:
			this.updateZoom(false);
			break;
		case 111:
			this.zoomView = 1;
			this.updateZoom();
			break;
		default:
		}
		if(this.curPos == null) {
			return;
		}
		switch(e.keyCode) {
		case 46:
			if(this.deleteMode != null) {
				return;
			}
			this.deleteMode = { l : null};
			this.doDelete();
			break;
		case 69:
			var p1 = this.pick(function(l3) {
				var _g12 = l3.data;
				var p2;
				if(_g12._hx_index == 1) {
					var _g35 = _g12.objs;
					var _g25 = _g12.idCol;
					p2 = true;
				} else {
					p2 = false;
				}
				if(p2) {
					return _gthis.hasProps(l3);
				} else {
					return false;
				}
			});
			if(p1 == null) {
				return;
			}
			var _g13 = p1.layer.data;
			if(_g13._hx_index == 1) {
				var _g26 = _g13.idCol;
				var objs = _g13.objs;
				$(".popup").remove();
				this.editProps(p1.layer,p1.index);
			}
			break;
		case 80:
			this.paint(this.curPos.x,this.curPos.y);
			break;
		case 83:
			if(this.selection != null) {
				if(this.selection.down) {
					return;
				}
				this.clearSelection();
			}
			var x = l1.floatCoord ? this.curPos.xf : this.curPos.x;
			var y = l1.floatCoord ? this.curPos.yf : this.curPos.y;
			this.selection = { sx : x, sy : y, x : x, y : y, w : 1, h : 1, down : true};
			this.cursor.addClass("select");
			this.setCursor();
			break;
		default:
		}
	}
	,clearSelection: function() {
		this.selection = null;
		this.cursor.removeClass("select");
		this.cursor.css({ width : "auto", height : "auto"});
		this.setCursor();
	}
	,deleteAll: function(l,k,index) {
		var op = this.prepOp("Delete All");
		var _g = l.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var _g1 = 0;
			var _g11 = this.width * this.height;
			while(_g1 < _g11) {
				var i = _g1++;
				if(data[i] == k + 1) {
					data[i] = 0;
				}
			}
			break;
		case 1:
			var _g3 = _g.idCol;
			var objs = _g.objs;
			return;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var _g2 = 0;
			var _g12 = this.width * this.height;
			while(_g2 < _g12) {
				var i1 = _g2++;
				if(data1[i1] == k + 1) {
					data1[i1] = 0;
				}
			}
			break;
		case 3:
			var _g13 = _g.t;
			var insts = _g.insts;
			var _g4 = 0;
			var _g14 = insts.slice();
			while(_g4 < _g14.length) {
				var i2 = _g14[_g4];
				++_g4;
				if(i2.o == k) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
		l.dirty = true;
		this.commitOp(op);
		this.draw();
	}
	,doDelete: function() {
		var _gthis = this;
		var p = this.pick(this.deleteMode.l == null ? null : function(l2) {
			return l2 == _gthis.deleteMode.l;
		});
		if(p == null) {
			return;
		}
		var op = this.prepOp("Delete");
		this.deleteMode.l = p.layer;
		var _g = p.layer.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			if(data[p.index] == 0) {
				return;
			}
			data[p.index] = 0;
			p.layer.dirty = true;
			this.cursor.css({ opacity : 0}).fadeTo(100,1);
			this.commitOp(op);
			this.draw();
			break;
		case 1:
			var _g3 = _g.idCol;
			var objs = _g.objs;
			if(HxOverrides.remove(objs,objs[p.index])) {
				this.commitOp(op);
				this.draw();
			}
			break;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var changed = false;
			var w = this.currentLayer.currentWidth;
			var h = this.currentLayer.currentHeight;
			if(this.palette.randomMode) {
				h = 1;
				w = h;
			}
			var _g1 = 0;
			var _g11 = h;
			while(_g1 < _g11) {
				var dy = _g1++;
				var _g2 = 0;
				var _g12 = w;
				while(_g2 < _g12) {
					var dx = _g2++;
					var i = p.index + dx + dy * this.width;
					if(data1[i] == 0) {
						continue;
					}
					data1[i] = 0;
					changed = true;
				}
			}
			if(changed) {
				p.layer.dirty = true;
				this.cursor.css({ opacity : 0}).fadeTo(100,1);
				this.commitOp(op);
				this.draw();
			}
			break;
		case 3:
			var _g13 = _g.t;
			var insts = _g.insts;
			if(HxOverrides.remove(insts,insts[p.index])) {
				p.layer.dirty = true;
				this.commitOp(op);
				this.draw();
				return;
			}
			break;
		}
	}
	,onKeyUp: function(e) {
		switch(e.keyCode) {
		case 32:
			this.spaceDown = false;
			var canvas = $(this.view.getCanvas());
			canvas.off("mousemove");
			canvas.css({ cursor : ""});
			this.updateCursorPos();
			break;
		case 46:
			this.deleteMode = null;
			if(this.needSave) {
				this.commitOp(this.opInProgress);
			}
			break;
		case 83:
			if(this.selection != null) {
				this.selection.down = false;
				this.selection.sx = this.selection.x;
				this.selection.sy = this.selection.y;
				this.setCursor();
			}
			break;
		default:
		}
	}
	,set: function(x,y,replace) {
		var _gthis = this;
		if(this.selection != null) {
			return;
		}
		if(this.palette.paintMode) {
			this.paint(x,y);
			return;
		}
		var l = this.currentLayer;
		if(!l.enabled()) {
			return;
		}
		var _g = l.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			if(data[x + y * this.width] == l.current || l.blanks[l.current]) {
				return;
			}
			var op = this.prepOp("set layer");
			data[x + y * this.width] = l.current;
			l.dirty = true;
			this.commitOp(op);
			this.draw();
			break;
		case 1:
			var _g4 = _g.objs;
			var _g3 = _g.idCol;
			break;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var changed = false;
			var op1 = this.prepOp("tiles");
			if(this.palette.randomMode) {
				var putObjs = l.getSelObjects();
				var putObj = putObjs[Std.random(putObjs.length)];
				if(putObj != null) {
					var id = putObj.x + putObj.y * l.stride + 1;
					var _g1 = 0;
					var _g11 = putObj.w;
					while(_g1 < _g11) {
						var dx = _g1++;
						var _g2 = 0;
						var _g12 = putObj.h;
						while(_g2 < _g12) {
							var dy = _g2++;
							var k = id + dx + dy * l.stride;
							var p = x + dx + (y + dy) * this.width;
							var old = data1[p];
							if(old == k || l.blanks[k - 1]) {
								continue;
							}
							if(replace && old > 0) {
								var _g5 = 0;
								var _g13 = this.width * this.height;
								while(_g5 < _g13) {
									var i = _g5++;
									if(data1[i] == old) {
										data1[i] = k;
									}
								}
							} else {
								data1[p] = k;
							}
							changed = true;
						}
					}
					changed = true;
				} else {
					var p1 = x + y * this.width;
					var old1 = data1[p1];
					if(replace && old1 > 0) {
						var _g7 = 0;
						var _g14 = this.width * this.height;
						while(_g7 < _g14) {
							var i1 = _g7++;
							if(data1[i1] == old1) {
								var id1 = l.current + Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride + 1;
								if(old1 == id1 || l.blanks[id1 - 1]) {
									continue;
								}
								data1[i1] = id1;
							}
						}
					} else {
						var id2 = l.current + Std.random(l.currentWidth) + Std.random(l.currentHeight) * l.stride + 1;
						if(old1 == id2 || l.blanks[id2 - 1]) {
							return;
						}
						data1[p1] = id2;
					}
					changed = true;
				}
			} else {
				var _g8 = 0;
				var _g15 = l.currentHeight;
				while(_g8 < _g15) {
					var dy1 = _g8++;
					var _g9 = 0;
					var _g16 = l.currentWidth;
					while(_g9 < _g16) {
						var dx1 = _g9++;
						var p2 = x + dx1 + (y + dy1) * this.width;
						var id3 = l.current + dx1 + dy1 * l.stride + 1;
						var old2 = data1[p2];
						if(old2 == id3 || l.blanks[id3 - 1]) {
							continue;
						}
						if(replace && old2 > 0) {
							var _g10 = 0;
							var _g17 = this.width * this.height;
							while(_g10 < _g17) {
								var i2 = _g10++;
								if(data1[i2] == old2) {
									data1[i2] = id3;
								}
							}
						} else {
							data1[p2] = id3;
						}
						changed = true;
					}
				}
			}
			if(!changed) {
				return;
			}
			l.dirty = true;
			this.commitOp(op1);
			this.draw();
			break;
		case 3:
			var _g18 = _g.t;
			var insts = _g.insts;
			var op2 = this.prepOp("tile instances");
			var objs = l.getTileObjects();
			var putObjs1 = l.getSelObjects();
			var putObj1 = putObjs1[Std.random(putObjs1.length)];
			var dx2 = putObj1 == null ? 0.5 : putObj1.w * 0.5;
			var dy2 = putObj1 == null ? 0.5 : putObj1.h - 0.5;
			var x1 = l.floatCoord ? this.curPos.xf : this.curPos.x;
			var y1 = l.floatCoord ? this.curPos.yf : this.curPos.y;
			if(putObj1 != null) {
				x1 += (putObjs1[0].w - putObj1.w) * 0.5;
				y1 += putObjs1[0].h - putObj1.h;
			}
			var _g19 = 0;
			while(_g19 < insts.length) {
				var i3 = insts[_g19];
				++_g19;
				var o = objs.h[i3.o];
				var ox = i3.x + (o == null ? 0.5 : o.w * 0.5);
				var oy = i3.y + (o == null ? 0.5 : o.h - 0.5);
				if(x1 + dx2 >= ox - 0.5 && y1 + dy2 >= oy - 0.5 && x1 + dx2 < ox + 0.5 && y1 + dy2 < oy + 0.5) {
					if(i3.o == l.current && i3.x == x1 && i3.y == y1 && i3.flip == this.flipMode && i3.rot == this.rotation) {
						return;
					}
					HxOverrides.remove(insts,i3);
				}
			}
			if(putObj1 != null) {
				insts.push({ x : x1, y : y1, o : putObj1.x + putObj1.y * l.stride, rot : this.rotation, flip : this.flipMode});
			} else {
				var _g110 = 0;
				var _g21 = l.currentHeight;
				while(_g110 < _g21) {
					var dy3 = _g110++;
					var _g111 = 0;
					var _g22 = l.currentWidth;
					while(_g111 < _g22) {
						var dx3 = _g111++;
						insts.push({ x : x1 + dx3, y : y1 + dy3, o : l.current + dx3 + dy3 * l.stride, rot : this.rotation, flip : this.flipMode});
					}
				}
			}
			insts.sort(function(i11,i21) {
				var o1 = objs.h[i11.o];
				var o2 = objs.h[i21.o];
				var dy4 = ((i11.y + (o1 == null ? 1 : o1.h)) * _gthis.tileSize | 0) - ((i21.y + (o2 == null ? 1 : o2.h)) * _gthis.tileSize | 0);
				if(dy4 == 0) {
					var o3 = objs.h[i11.o];
					var o4 = objs.h[i21.o];
					return ((i11.x + (o3 == null ? 0.5 : o3.w * 0.5)) * _gthis.tileSize | 0) - ((i21.x + (o4 == null ? 0.5 : o4.w * 0.5)) * _gthis.tileSize | 0);
				} else {
					return dy4;
				}
			});
			l.dirty = true;
			this.commitOp(op2);
			this.draw();
			break;
		}
	}
	,draw: function() {
		this.view.fill(-7303024);
		var _g = 0;
		var _g1 = this.layers.length;
		while(_g < _g1) {
			var index = _g++;
			var l = this.layers[index];
			if(!l.visible) {
				continue;
			}
			l.draw(this.view);
		}
		this.view.flush();
	}
	,prepOp: function(opName) {
		if(opName == null) {
			opName = "unnamed level op";
		}
		if(this.needSave) {
			return this.opInProgress;
		} else {
			this.opInProgress = new ops_RowModify(this.model,[{ col : this.sheet.sheet.name, row : this.index}]);
		}
		return this.opInProgress;
	}
	,commitOp: function(op) {
		if(this.mouseDown != null || this.deleteMode != null) {
			this.needSave = true;
			return;
		}
		this.needSave = false;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.save();
		}
		op.commitNewState(this.model);
		this.model.opStack.pushNoApply(op);
		this.opInProgress = null;
	}
	,save: function() {
		if(this.mouseDown != null || this.deleteMode != null) {
			this.needSave = true;
			return;
		}
		this.needSave = false;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l.save();
		}
		this.model.save();
	}
	,savePrefs: function() {
		var sc = this.content.find(".scroll");
		var state = { zoomView : this.zoomView, curLayer : this.currentLayer == null ? null : this.currentLayer.name, scrollX : sc.scrollLeft() | 0, scrollY : sc.scrollTop() | 0, paintMode : this.palette.paintMode, randomMode : this.palette.randomMode, paletteMode : this.palette.mode, paletteModeCursor : this.palette.modeCursor, smallPalette : this.palette.small, rotation : this.rotation, flipMode : this.flipMode};
		js_Browser.getLocalStorage().setItem(this.sheetPath + "#" + this.index,haxe_Serializer.run(state));
	}
	,scale: function(s) {
		if(s == null || isNaN(s)) {
			return;
		}
		var op = this.prepOp("Scale " + s);
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.visible) {
				continue;
			}
			l.dirty = true;
			l.scale(s);
		}
		this.commitOp(op);
		this.draw();
	}
	,scroll: function(dx,dy) {
		var op = this.prepOp("Scroll " + dx + ", " + dy);
		if(dx == null || isNaN(dx)) {
			dx = 0;
		}
		if(dy == null || isNaN(dy)) {
			dy = 0;
		}
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.visible) {
				continue;
			}
			l.dirty = true;
			l.scroll(dx,dy);
		}
		this.commitOp(op);
		this.draw();
	}
	,setTileSize: function(value) {
		var op = this.prepOp();
		this.props.tileSize = this.tileSize = value;
		var _g = 0;
		var _g1 = this.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(!l.hasFloatCoord) {
				continue;
			}
			var _g2 = l.data;
			if(_g2._hx_index == 1) {
				var _g11 = _g2.idCol;
				var objs = _g2.objs;
				var _g3 = 0;
				while(_g3 < objs.length) {
					var o = objs[_g3];
					++_g3;
					o.x = (o.x * this.tileSize | 0) / this.tileSize;
					o.y = (o.y * this.tileSize | 0) / this.tileSize;
					if(l.hasSize) {
						o.width = (o.width * this.tileSize | 0) / this.tileSize;
						o.height = (o.height * this.tileSize | 0) / this.tileSize;
					}
				}
			}
		}
		this.setCursor();
		this.commitOp(op);
		this.draw();
	}
	,setLayerMode: function(mode) {
		if(this.currentLayer.tileProps == null) {
			window.alert("Choose file first");
			return;
		}
		var op = this.prepOp();
		this.currentLayer.setMode(mode);
		this.commitOp(op);
		this.reload();
	}
	,paletteOption: function(name,val) {
		var op = this.prepOp();
		if(this.palette.option(name,val)) {
			this.commitOp(op);
			this.draw();
		}
	}
	,setLayer: function(l) {
		var old = this.currentLayer;
		if(l == old) {
			this.setCursor();
			return;
		}
		this.currentLayer = l;
		if(!l.hasRotFlip) {
			this.flipMode = false;
			this.rotation = 0;
		}
		this.savePrefs();
		this.content.find("[name=alpha]").val(Std.string(l.props.alpha * 100 | 0));
		this.content.find("[name=visible]").prop("checked",l.visible);
		this.content.find("[name=lock]").prop("checked",l.lock);
		var tmp = l.hasFloatCoord ? "" : "none";
		this.content.find("[name=lockGrid]").prop("checked",!l.floatCoord).closest(".item").css({ display : tmp});
		this.content.find("[name=mode]").val("" + (l.props.mode != null ? l.props.mode : "tiles"));
		var tmp1 = this.content.find("[name=color]");
		var css;
		if(l.idToIndex == null || (l.images == null || l.hasSize) && l.colors == null) {
			var _g = l.data;
			var css1;
			switch(_g._hx_index) {
			case 2:
				var _g4 = _g.data;
				var _g3 = _g.t;
				css1 = true;
				break;
			case 3:
				var _g2 = _g.insts;
				var _g1 = _g.t;
				css1 = true;
				break;
			default:
				css1 = false;
			}
			css = !css1;
		} else {
			css = false;
		}
		var css2 = { display : css ? "" : "none"};
		tmp1.spectrum("set",this.toColor(l.props.color)).closest(".item").css(css2);
		var _g5 = l.data;
		switch(_g5._hx_index) {
		case 2:
			var _g9 = _g5.data;
			var t = _g5.t;
			this.content.find("[name=size]").val("" + t.size).closest(".item").show();
			this.content.find("[name=file]").closest(".item").show();
			break;
		case 3:
			var _g7 = _g5.insts;
			var t1 = _g5.t;
			this.content.find("[name=size]").val("" + t1.size).closest(".item").show();
			this.content.find("[name=file]").closest(".item").show();
			break;
		default:
			this.content.find("[name=size]").closest(".item").hide();
			this.content.find("[name=file]").closest(".item").hide();
		}
		var _g10 = l.data;
		var tmp2;
		if(_g10._hx_index == 3) {
			var _g12 = _g10.insts;
			var _g11 = _g10.t;
			tmp2 = true;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this.palette.randomMode = false;
			this.palette.paintMode = false;
			this.savePrefs();
		}
		this.palette.reset();
		if(l.images == null) {
			this.setCursor();
			return;
		}
		this.palette.layerChanged(l);
		this.setCursor();
	}
	,setCursor: function() {
		var l = this.currentLayer;
		if(l == null) {
			this.cursor.hide();
			return;
		}
		this.content.find(".menu .item.selected").removeClass("selected");
		l.comp.addClass("selected");
		this.palette.updateSelect();
		var size = this.zoomView < 1 ? this.tileSize * this.zoomView | 0 : Math.ceil(this.tileSize * this.zoomView);
		if(this.selection != null) {
			this.cursorImage.setSize(0,0);
			this.cursor.show();
			this.cursor.css({ border : "", marginLeft : (this.selection.x * this.tileSize * this.zoomView - 1 | 0) + "px", marginTop : (this.selection.y * this.tileSize * this.zoomView | 0) + "px", width : (this.selection.w * this.tileSize * this.zoomView | 0) + "px", height : (this.selection.h * this.tileSize * this.zoomView | 0) + "px"});
			return;
		}
		var cur = l.current;
		var w = this.palette.randomMode ? 1 : l.currentWidth;
		var h = this.palette.randomMode ? 1 : l.currentHeight;
		var _g = l.data;
		var tmp;
		if(_g._hx_index == 3) {
			var _g2 = _g.insts;
			var _g1 = _g.t;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var o = l.getSelObjects();
			if(o.length > 0) {
				cur = o[0].x + o[0].y * l.stride;
				w = o[0].w;
				h = o[0].h;
			}
		}
		this.cursorImage.setSize(size * w,size * h);
		var px = 0;
		var py = 0;
		if(l.images != null) {
			var _g3 = l.data;
			if(_g3._hx_index == 1) {
				var _g5 = _g3.objs;
				var _g4 = _g3.idCol;
				var i = l.images[cur];
				var w1 = Math.ceil(i.width * this.zoomView);
				var h1 = Math.ceil(i.height * this.zoomView);
				this.cursorImage.setSize(w1,h1);
				this.cursorImage.clear();
				this.cursorImage.drawScaled(i,0,0,w1,h1);
			} else {
				this.cursorImage.clear();
				var _g31 = 0;
				var _g41 = h;
				while(_g31 < _g41) {
					var y = _g31++;
					var _g32 = 0;
					var _g42 = w;
					while(_g32 < _g42) {
						var x = _g32++;
						var i1 = l.images[cur + x + y * l.stride];
						this.cursorImage.drawSub(i1,0,0,i1.width,i1.height,x * size,y * size,size,size);
					}
				}
				this.cursor.css({ border : "none"});
				if(this.flipMode || this.rotation != 0) {
					var tw = size * w;
					var th = size * h;
					this.tmpImage.setSize(tw,th);
					var m = { a : 0., b : 0., c : 0., d : 0., x : 0., y : 0.};
					var rot = this.rotation;
					m.a = 1;
					m.b = 0;
					m.c = 0;
					m.d = 1;
					m.x = -tw * 0.5;
					m.y = -th * 0.5;
					if(rot != 0) {
						var a = Math.PI * rot / 2;
						var c = Math.cos(a);
						var s = Math.sin(a);
						var x1 = m.x;
						var y1 = m.y;
						m.a = c;
						m.b = s;
						m.c = -s;
						m.d = c;
						m.x = x1 * c - y1 * s;
						m.y = x1 * s + y1 * c;
					}
					if(this.flipMode) {
						m.a = -m.a;
						m.c = -m.c;
						m.x = -m.x;
					}
					m.x += Math.abs(m.a * tw * 0.5 + m.c * th * 0.5);
					m.y += Math.abs(m.b * tw * 0.5 + m.d * th * 0.5);
					this.tmpImage.clear();
					this.tmpImage.draw(this.cursorImage,0,0);
					var cw = tw * m.a + th * m.c | 0;
					var ch = tw * m.b + th * m.d | 0;
					this.cursorImage.setSize(cw < 0 ? -cw : cw,ch < 0 ? -ch : ch);
					this.cursorImage.clear();
					this.cursorImage.drawMat(this.tmpImage,m);
				}
			}
			this.cursorImage.fill(1616617979);
			if(l.hasSize) {
				this.cursor.css({ border : "1px solid black"});
			}
		} else {
			var c1 = l.colors == null ? l.props.color : l.colors[cur];
			var lum = ((c1 & 255) + (c1 >> 8 & 255) + (c1 >> 16 & 255)) / 765;
			this.cursorImage.fill(c1 | -16777216);
			this.cursor.css({ border : "1px solid " + (lum < 0.25 ? "white" : "black")});
		}
		var canvas = this.cursorImage.getCanvas();
		canvas.style.marginLeft = -px + "px";
		canvas.style.marginTop = -py + "px";
	}
	,__class__: Level
};
var K = function() { };
$hxClasses["K"] = K;
K.__name__ = "K";
var Model = function() {
	this.openedList = new haxe_ds_StringMap();
	this.prefs = { windowPos : { x : 50, y : 50, w : 800, h : 600, max : false}, curFile : null, curSheet : 0, recent : [], zoomLevel : 0, hideListPreviews : false, hideInlineIcons : false};
	this.existsCache = new haxe_ds_StringMap();
	this.loadPrefs();
};
$hxClasses["Model"] = Model;
Model.__name__ = "Model";
Model.prototype = {
	get_schemaPath: function() {
		return this.prefs.curFile;
	}
	,installFileWatcher: function() {
	}
	,removeFileWatcher: function() {
	}
	,quickExists: function(path) {
		var _this = this.existsCache;
		var c = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(c == null) {
			c = { t : -1e9, r : false};
			var _this1 = this.existsCache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,c);
			} else {
				_this1.h[path] = c;
			}
		}
		var t = Date.now() / 1000;
		if(c.t < t - 10) {
			c.r = sys_FileSystem.exists(path);
			c.t = t;
		}
		return c.r;
	}
	,getImageData: function(key) {
		return Reflect.field(this.imageBank,key);
	}
	,getAbsPath: function(file) {
		if(file.charAt(0) == "/" || file.charAt(1) == ":") {
			return file;
		} else {
			return new haxe_io_Path(this.prefs.curFile).dir.split("\\").join("/") + "/" + file;
		}
	}
	,getSheet: function(name) {
		return this.base.getSheet(name);
	}
	,save: function() {
		var _gthis = this;
		if(this.prefs.curFile == null) {
			return;
		}
		this.removeFileWatcher();
		window.document.querySelector("#now-saving-text").className = "";
		window.setTimeout(function() {
			var success = false;
			try {
				if(_gthis.base.get_isMultifile()) {
					_gthis.base.saveMultifile(_gthis.prefs.curFile);
				} else {
					js_node_Fs.writeFileSync(_gthis.prefs.curFile,_gthis.base.saveMonofileLegacyFormat());
				}
				success = true;
			} catch( err ) {
				var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
				console.log("src/Model.hx:108:",err1);
				window.alert(Std.string("An error occurred while saving:\n\n" + Std.string(err1)));
			}
			window.setTimeout(function() {
				if(success) {
					_gthis.opStack.setSavePointHere();
				}
				window.document.querySelector("#now-saving-text").className = "no-display";
				_gthis.installFileWatcher();
			});
		});
	}
	,saveImages: function() {
		if(this.prefs.curFile == null) {
			return;
		}
		var img = this.prefs.curFile.split(".");
		img.pop();
		var path = img.join(".") + ".img";
		if(this.imageBank == null) {
			js_node_Fs.unlinkSync(path);
		} else {
			js_node_Fs.writeFileSync(path,JSON.stringify(this.imageBank,null,"\t"));
		}
	}
	,compressionEnabled: function() {
		return this.base.data.compress;
	}
	,error: function(msg) {
		window.alert(Std.string(msg + "\n\n" + Main.getCallstackString(2)));
	}
	,load: function(noError) {
		if(noError == null) {
			noError = false;
		}
		var _gthis = this;
		this.removeFileWatcher();
		this.opStack = new OperationStack(js_Boot.__cast(this , Main));
		this.base = new cdb_Database();
		try {
			this.base.loadFrom(this.prefs.curFile);
			if(this.prefs.curSheet > this.base.sheets.length) {
				this.prefs.curSheet = 0;
			} else {
				while(this.base.sheets[this.prefs.curSheet].sheet.props.hide) this.prefs.curSheet--;
			}
		} catch( e ) {
			if(!noError) {
				this.error(Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
			}
			this.prefs.curFile = null;
			this.prefs.curSheet = 0;
			this.base = new cdb_Database();
		}
		try {
			var img = this.prefs.curFile.split(".");
			img.pop();
			this.imageBank = JSON.parse(js_node_Fs.readFileSync(img.join(".") + ".img",{ encoding : "utf8"}));
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			this.imageBank = null;
		}
		this.opStack.setSavePointHere();
		window.setTimeout(function() {
			_gthis.installFileWatcher();
			return;
		});
	}
	,cleanImages: function() {
		if(this.imageBank == null) {
			return;
		}
		var used = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.base.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = s.sheet.columns;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				if(c.type._hx_index == 7) {
					var _g3 = 0;
					var _g12 = s.getLines();
					while(_g3 < _g12.length) {
						var obj = _g12[_g3];
						++_g3;
						var v = Reflect.field(obj,c.name);
						if(v != null) {
							if(__map_reserved[v] != null) {
								used.setReserved(v,true);
							} else {
								used.h[v] = true;
							}
						}
					}
				}
			}
		}
		var _g21 = 0;
		var _g31 = Reflect.fields(this.imageBank);
		while(_g21 < _g31.length) {
			var f = _g31[_g21];
			++_g21;
			if(!(__map_reserved[f] != null ? used.getReserved(f) : used.h[f])) {
				Reflect.deleteField(this.imageBank,f);
			}
		}
	}
	,loadPrefs: function() {
		try {
			this.prefs = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem("prefs"));
			if(this.prefs.recent == null) {
				this.prefs.recent = [];
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
	}
	,savePrefs: function() {
		js_Browser.getLocalStorage().setItem("prefs",haxe_Serializer.run(this.prefs));
	}
	,__class__: Model
};
var Main = function() {
	this.fileWatchers = [];
	var _gthis = this;
	Model.call(this);
	this.window = js_node_webkit_Window.get();
	this.window.on("resize",$bind(this,this.onResize));
	this.window.on("focus",function(_) {
		js_node_webkit_App.clearCache();
	});
	this.window.zoomLevel = this.prefs.zoomLevel;
	this.initMenu();
	this.levels = [];
	this.mousePos = { x : 0, y : 0};
	this.sheetCursors = new haxe_ds_StringMap();
	this.window.window.addEventListener("keydown",$bind(this,this.onKey));
	this.window.window.addEventListener("keypress",$bind(this,this.onKeyPress));
	this.window.window.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.window.window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	this.window.window.addEventListener("dragover",function(e) {
		e.preventDefault();
		return false;
	});
	this.window.window.addEventListener("drop",$bind(this,this.onDragDrop));
	$(".modal").keypress(function(e1) {
		e1.stopPropagation();
	}).keydown(function(e2) {
		e2.stopPropagation();
	});
	$("#search input").keydown(function(e3) {
		if(e3.keyCode == 27) {
			$("#search i").click();
			return;
		}
	}).keyup(function(_1) {
		var tmp = $(this).val();
		_gthis.searchFilter(tmp);
	});
	$("#search i").click(function(_2) {
		_gthis.searchFilter(null);
		$("#search").toggle();
	});
	this.cursor = { s : null, x : 0, y : 0};
	this.pages = new JqPages(this);
	this.load(true);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.getCallstackString = function(skip) {
	if(skip == null) {
		skip = 1;
	}
	var cs = haxe_CallStack.callStack();
	var str = "===CALLSTACK===";
	var _g = 0;
	while(_g < cs.length) {
		var si = cs[_g];
		++_g;
		if(skip > 0) {
			--skip;
			continue;
		}
		if(si._hx_index == 2) {
			var column = si.column;
			var line = si.line;
			var file = si.file;
			var junk = si.s;
			if(file.lastIndexOf("/") >= 0) {
				file = HxOverrides.substr(file,file.lastIndexOf("/") + 1,null);
			}
			str += "\n    " + file + ":" + line;
		} else {
			str += "\nunknown stack trace item";
		}
	}
	return str;
};
Main.main = function() {
	if(js_node_Fs.accessSync == null) {
		js_node_Fs.accessSync = function(path) {
			if(!js_node_Fs.existsSync(path)) {
				throw new js__$Boot_HaxeError(path + " does not exists");
			}
		};
	}
	Main.inst = new Main();
	window["_"] = Main.inst;
};
Main.__super__ = Model;
Main.prototype = $extend(Model.prototype,{
	prepSnapshot: function(operationName) {
		if(operationName == null) {
			operationName = "unknown operation";
		}
		return new ops_FullSnapshot().setPreviousState(this);
	}
	,commitSnapshot: function(op) {
		op.setCurrentState(this);
		this.opStack.pushNoApply(op);
		this.refresh();
	}
	,rollbackSnapshot: function(op) {
		op.rollback(this);
	}
	,doDeleteSelectedRow: function() {
		$(".selected.deletable").change();
		if(this.cursor.s == null) {
			return;
		}
		var op = this.prepSnapshot();
		if(this.cursor.s.sheet.props.isProps) {
			var l = this.getLine(this.cursor.s,this.cursor.y);
			if(l != null) {
				Reflect.deleteField(this.cursor.s.sheet.lines[0],l.attr("colName"));
			}
		} else if(this.cursor.x < 0) {
			var s = this.getSelection();
			var y = s.y2;
			while(y >= s.y1) {
				this.cursor.s.deleteLine(y);
				--y;
			}
			this.cursor.y = s.y1;
			this.cursor.select = null;
		} else {
			var s1 = this.getSelection();
			var _g = s1.y1;
			var _g1 = s1.y2 + 1;
			while(_g < _g1) {
				var y1 = _g++;
				var obj = this.cursor.s.sheet.lines[y1];
				var _g2 = s1.x1;
				var _g11 = s1.x2 + 1;
				while(_g2 < _g11) {
					var x = _g2++;
					var c = this.cursor.s.sheet.columns[x];
					var def = this.base.getDefault(c);
					if(def == null) {
						Reflect.deleteField(obj,c.name);
					} else {
						obj[c.name] = def;
					}
				}
			}
		}
		this.commitSnapshot(op);
	}
	,doCopy: function() {
		if(this.cursor.s == null) {
			return;
		}
		var s = this.getSelection();
		var data = [];
		var _g = s.y1;
		var _g1 = s.y2 + 1;
		while(_g < _g1) {
			var y = _g++;
			var obj = this.cursor.s.sheet.lines[y];
			var out = { };
			var _g2 = s.x1;
			var _g11 = s.x2 + 1;
			while(_g2 < _g11) {
				var x = _g2++;
				var c = this.cursor.s.sheet.columns[x];
				var v = Reflect.field(obj,c.name);
				if(v != null) {
					out[c.name] = v;
				}
			}
			data.push(out);
		}
		var _g21 = [];
		var _g3 = s.x1;
		var _g4 = s.x2 + 1;
		while(_g3 < _g4) {
			var x1 = _g3++;
			_g21.push(this.cursor.s.sheet.columns[x1]);
		}
		this.setClipBoard(_g21,data);
	}
	,doPaste: function() {
		if(this.cursor.s == null || this.clipboard == null || js_node_webkit_Clipboard.get().get("text") != this.clipboard.text) {
			return;
		}
		var snapshot = this.prepSnapshot();
		var sheet = this.cursor.s;
		var posX = this.cursor.x < 0 ? 0 : this.cursor.x;
		var posY = this.cursor.y < 0 ? 0 : this.cursor.y;
		var _g = 0;
		var _g1 = this.clipboard.data;
		while(_g < _g1.length) {
			var obj1 = _g1[_g];
			++_g;
			if(posY == sheet.sheet.lines.length) {
				sheet.newLine();
			}
			var obj2 = sheet.sheet.lines[posY];
			var _g2 = 0;
			var _g11 = this.clipboard.schema.length;
			while(_g2 < _g11) {
				var cid = _g2++;
				var c1 = this.clipboard.schema[cid];
				var c2 = sheet.sheet.columns[cid + posX];
				if(c2 == null) {
					continue;
				}
				var f = this.base.getConvFunction(c1.type,c2.type);
				var v = Reflect.field(obj1,c1.name);
				if(f == null) {
					v = this.base.getDefault(c2);
				} else {
					if(v != null) {
						v = JSON.parse(JSON.stringify(v));
					}
					if(f.f != null) {
						v = f.f(v);
					}
				}
				if(v == null && !c2.opt) {
					v = this.base.getDefault(c2);
				}
				if(v == null) {
					Reflect.deleteField(obj2,c2.name);
				} else {
					obj2[c2.name] = v;
				}
			}
			++posY;
		}
		sheet.sync();
		this.commitSnapshot(snapshot);
	}
	,openTableReferencedBySelectedCell: function() {
		if(this.cursor.s == null || this.cursor.x < 0) {
			return;
		}
		var c = this.cursor.s.sheet.columns[this.cursor.x];
		var id = Reflect.field(this.cursor.s.sheet.lines[this.cursor.y],c.name);
		var _g = c.type;
		if(_g._hx_index == 6) {
			var s = _g.sheet;
			var sd = this.base.getSheet(s);
			if(sd != null) {
				var _this = sd.index;
				var k = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
				if(k != null) {
					var index = Lambda.indexOf(sd.sheet.lines,k.obj);
					if(index >= 0) {
						var _this1 = this.sheetCursors;
						var value = { s : sd, x : 0, y : index};
						if(__map_reserved[s] != null) {
							_this1.setReserved(s,value);
						} else {
							_this1.h[s] = value;
						}
						this.selectSheet(sd);
					}
				}
			}
		} else {
			this.window.window.alert("Can't go to reference because\nthe selected cell isn't a reference type.");
		}
	}
	,searchFilter: function(filter) {
		if(filter == "") {
			filter = null;
		}
		if(filter != null) {
			filter = filter.toLowerCase();
		}
		var lines = $("table.sheet tr").not(".head");
		lines.removeClass("filtered");
		if(filter != null) {
			var _g_i = 0;
			var _g_j = lines;
			while(_g_i < _g_j.length) {
				var t = _g_j[_g_i++];
				if(t.textContent.toLowerCase().indexOf(filter) < 0) {
					t.classList.add("filtered");
				}
			}
			while(lines.length > 0) {
				lines = lines.filter(".list").not(".filtered").prev();
				lines.removeClass("filtered");
			}
		}
	}
	,onResize: function(_) {
		if(this.level != null) {
			this.level.onResize();
		}
		this.pages.onResize();
	}
	,onMouseMove: function(e) {
		this.mousePos.x = e.clientX;
		this.mousePos.y = e.clientY;
	}
	,onDragDrop: function(e) {
		e.preventDefault();
		var _g = 0;
		var _g1 = e.dataTransfer.files.length;
		while(_g < _g1) {
			var i = _g++;
			var file = e.dataTransfer.files[i];
			if(haxe_io_Path.extension(file.name) == "cdb") {
				this.prefs.curFile = file.path;
				this.load();
			}
		}
	}
	,setClipBoard: function(schema,data) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < data.length) {
			var o = data[_g1];
			++_g1;
			_g.push(this.cursor.s.objToString(o,true));
		}
		this.clipboard = { text : Std.string(_g), data : data, schema : schema};
		js_node_webkit_Clipboard.get().set(this.clipboard.text,"text");
	}
	,moveCursor: function(dx,dy,shift,ctrl) {
		if(this.cursor.s == null) {
			return;
		}
		if(this.cursor.x == -1 && ctrl) {
			if(dy != 0) {
				var newIndex = this.cursor.s.moveLine(this.opStack,this.cursor.y,dy);
				this.setCursor(this.cursor.s,-1,newIndex);
			}
			this.updateCursor();
			return;
		}
		if(dx < 0 && this.cursor.x >= 0) {
			this.cursor.x--;
		}
		if(dy < 0 && this.cursor.y > 0) {
			this.cursor.y--;
		}
		if(dx > 0 && this.cursor.x < this.cursor.s.sheet.columns.length - 1) {
			this.cursor.x++;
		}
		if(dy > 0 && this.cursor.y < this.cursor.s.sheet.lines.length - 1) {
			this.cursor.y++;
		}
		this.cursor.select = null;
		this.updateCursor();
	}
	,isInput: function() {
		if(window.document.activeElement != null) {
			return window.document.activeElement.nodeName == "INPUT";
		} else {
			return false;
		}
	}
	,onKeyPress: function(e) {
		if(!e.ctrlKey && !this.isInput()) {
			var c = $(".cursor").not(".edit");
			if(c.length > 0) {
				if(e.keyCode == 13) {
					e.preventDefault();
				}
				c.dblclick();
			}
		}
	}
	,getSelection: function() {
		if(this.cursor.s == null) {
			return null;
		}
		var x1 = this.cursor.x < 0 ? 0 : this.cursor.x;
		var x2 = this.cursor.x < 0 ? this.cursor.s.sheet.columns.length - 1 : this.cursor.select != null ? this.cursor.select.x : x1;
		var y1 = this.cursor.y;
		var y2 = this.cursor.select != null ? this.cursor.select.y : y1;
		if(x2 < x1) {
			var tmp = x2;
			x2 = x1;
			x1 = tmp;
		}
		if(y2 < y1) {
			var tmp1 = y2;
			y2 = y1;
			y1 = tmp1;
		}
		return { x1 : x1, x2 : x2, y1 : y1, y2 : y2};
	}
	,isInCDB: function() {
		if(!this.isInLevel()) {
			return this.pages.curPage < 0;
		} else {
			return false;
		}
	}
	,isInLevel: function() {
		return this.level != null;
	}
	,onKey: function(e) {
		var ctrlDown = e.ctrlKey;
		if(Sys.systemName().indexOf("Mac") != -1) {
			ctrlDown = e.metaKey;
		}
		if(this.isInput()) {
			return;
		}
		var inCDB = this.level == null && this.pages.curPage < 0;
		switch(e.keyCode) {
		case 9:
			this.moveCursor(e.shiftKey ? -1 : 1,0,false,false);
			break;
		case 13:
			if(inCDB) {
				if(this.cursor.s != null && $(".cursor.t_list,.cursor.t_properties").click().length > 0) {
					e.preventDefault();
				}
			}
			break;
		case 27:
			if(this.cursor.s != null && this.cursor.s.parent != null) {
				var p = this.cursor.s.parent;
				this.setCursor(p.sheet,p.column,p.line);
				$(".cursor").click();
			} else if(this.cursor.select != null) {
				this.cursor.select = null;
				this.updateCursor();
			}
			break;
		case 32:
			e.preventDefault();
			break;
		case 37:
			this.moveCursor(-1,0,e.shiftKey,ctrlDown);
			break;
		case 38:
			this.moveCursor(0,-1,e.shiftKey,ctrlDown);
			e.preventDefault();
			break;
		case 39:
			this.moveCursor(1,0,e.shiftKey,ctrlDown);
			break;
		case 40:
			this.moveCursor(0,1,e.shiftKey,ctrlDown);
			e.preventDefault();
			break;
		case 46:
			if(inCDB) {
				this.doDeleteSelectedRow();
			}
			break;
		default:
		}
		if(this.level != null) {
			this.level.onKey(e);
		}
		if(this.pages.curPage >= 0) {
			this.pages.onKey(e);
		}
	}
	,onKeyUp: function(e) {
		if(this.level != null && !this.isInput()) {
			this.level.onKeyUp(e);
		}
	}
	,getLine: function(sheet,index) {
		return $("table[sheet='" + sheet.getPath() + "'] > tbody > tr").not(".head,.separator,.list").eq(index);
	}
	,showReferences: function(sheet,index) {
		var _gthis = this;
		var results = sheet.getReferences(index);
		if(results == null) {
			return;
		}
		if(results.length == 0) {
			this.window.window.alert("Nothing refers to this row.");
			return;
		}
		var line = this.getLine(sheet,index);
		line.next("tr.list").change();
		var res = $("<tr>").addClass("list");
		$("<td>").appendTo(res);
		var cell = $("<td>").attr("colspan","" + (sheet.sheet.columns.length + (sheet.sheet.props.level != null ? 1 : 0))).appendTo(res);
		var div = $("<div>").appendTo(cell);
		var content = $("<table>").appendTo(div);
		var cols = $("<tr>").addClass("head");
		$("<td>").addClass("start").appendTo(cols).click(function(_) {
			res.change();
		});
		var name = "path";
		$("<td>").text(name).appendTo(cols);
		var name1 = "id";
		$("<td>").text(name1).appendTo(cols);
		content.append(cols);
		var index1 = 0;
		var _g = 0;
		while(_g < results.length) {
			var rs = [results[_g]];
			++_g;
			var l = $("<tr>").appendTo(content).addClass("clickable");
			$("<td>").text("" + index1++).appendTo(l);
			var slast = [rs[0].s[rs[0].s.length - 1]];
			$("<td>").text(slast[0].s.sheet.name.split("@").join(".") + "." + slast[0].c).appendTo(l);
			var path = [];
			var _g1 = 0;
			var _g11 = rs[0].s.length;
			while(_g1 < _g11) {
				var i = _g1++;
				var s = rs[0].s[i];
				var oid = Reflect.field(rs[0].o.path[i],s.id);
				if(oid == null || oid == "") {
					path.push(s.s.sheet.name.split("@").pop() + "[" + rs[0].o.indexes[i] + "]");
				} else {
					path.push(oid);
				}
			}
			$("<td>").text(path.join(".")).appendTo(l);
			l.click((function(slast1,rs1) {
				return function(e) {
					var key = null;
					var _g2 = 0;
					var _g3 = rs1[0].s.length - 1;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var p = rs1[0].s[i1];
						key = p.s.getPath() + "@" + p.c + ":" + rs1[0].o.indexes[i1];
						var _this = _gthis.openedList;
						if(__map_reserved[key] != null) {
							_this.setReserved(key,true);
						} else {
							_this.h[key] = true;
						}
					}
					var starget = rs1[0].s[0].s;
					var this1 = _gthis.sheetCursors;
					var key1 = starget.sheet.name;
					var value = { s : new cdb_Sheet(_gthis.base,{ name : slast1[0].s.sheet.name, separators : [], lines : [], columns : [], props : { }},key), x : -1, y : rs1[0].o.indexes[rs1[0].o.indexes.length - 1]};
					var _this1 = this1;
					if(__map_reserved[key1] != null) {
						_this1.setReserved(key1,value);
					} else {
						_this1.h[key1] = value;
					}
					_gthis.selectSheet(starget);
					e.stopPropagation();
				};
			})(slast,rs));
		}
		res.change(function(e1) {
			res.remove();
			e1.stopPropagation();
		});
		res.insertAfter(line);
	}
	,changed: function(sheet,c,index,old) {
		var _gthis = this;
		switch(c.type._hx_index) {
		case 0:
			sheet.sync();
			break;
		case 3:
			if(sheet.sheet.props.level != null && (c.name == "width" || c.name == "height")) {
				var op = this.prepSnapshot();
				var obj = sheet.sheet.lines[index];
				var newW = Reflect.field(obj,"width");
				var newH = Reflect.field(obj,"height");
				var oldW = newW;
				var oldH = newH;
				if(c.name == "width") {
					oldW = old;
				} else {
					oldH = old;
				}
				var remapTileLayer = function(v) {
					if(v == null) {
						return null;
					}
					var odat = cdb__$Types_TileLayerData_$Impl_$.decode(v.data);
					var ndat = [];
					if(odat[0] == 65535) {
						ndat = odat;
					} else {
						var pos = 0;
						var _g = 0;
						var _g1 = newH;
						while(_g < _g1) {
							var y = _g++;
							if(y >= oldH) {
								var _g2 = 0;
								var _g11 = newW;
								while(_g2 < _g11) {
									var x = _g2++;
									ndat.push(0);
								}
							} else if(newW <= oldW) {
								var _g3 = 0;
								var _g12 = newW;
								while(_g3 < _g12) {
									var x1 = _g3++;
									ndat.push(odat[pos++]);
								}
								pos += oldW - newW;
							} else {
								var _g4 = 0;
								var _g13 = oldW;
								while(_g4 < _g13) {
									var x2 = _g4++;
									ndat.push(odat[pos++]);
								}
								var _g21 = oldW;
								var _g31 = newW;
								while(_g21 < _g31) {
									var x3 = _g21++;
									ndat.push(0);
								}
							}
						}
					}
					return { file : v.file, size : v.size, stride : v.stride, data : cdb__$Types_TileLayerData_$Impl_$.encode(ndat,_gthis.base.data.compress)};
				};
				var _g5 = 0;
				var _g14 = sheet.sheet.columns;
				while(_g5 < _g14.length) {
					var c1 = _g14[_g5];
					++_g5;
					var v1 = Reflect.field(obj,c1.name);
					if(v1 == null) {
						continue;
					}
					var _g6 = c1.type;
					switch(_g6._hx_index) {
					case 8:
						var s = sheet.base.getSheet(sheet.sheet.name + "@" + c1.name);
						if(s.hasColumn("x",[cdb_ColumnType.TInt,cdb_ColumnType.TFloat]) && s.hasColumn("y",[cdb_ColumnType.TInt,cdb_ColumnType.TFloat])) {
							var elts = Reflect.field(obj,c1.name);
							var _g7 = 0;
							var _g15 = elts.slice();
							while(_g7 < _g15.length) {
								var e = _g15[_g7];
								++_g7;
								if(e.x >= newW || e.y >= newH) {
									HxOverrides.remove(elts,e);
								}
							}
						} else if(s.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
							var a = v1;
							var _g8 = 0;
							while(_g8 < a.length) {
								var o = a[_g8];
								++_g8;
								o.data = remapTileLayer(o.data);
							}
						}
						break;
					case 12:
						var _g16 = _g6.type;
						var v2 = v1;
						var _g9 = [];
						var _g17 = 0;
						while(_g17 < 256) {
							var i = _g17++;
							_g9.push(i);
						}
						var odat1 = cdb__$Types_Layer_$Impl_$.decode(v2,_g9);
						var ndat1 = [];
						var _g22 = 0;
						var _g32 = newH;
						while(_g22 < _g32) {
							var y1 = _g22++;
							var _g23 = 0;
							var _g33 = newW;
							while(_g23 < _g33) {
								var x4 = _g23++;
								var k = y1 < oldH && x4 < oldW ? odat1[x4 + y1 * oldW] : 0;
								ndat1.push(k);
							}
						}
						v2 = cdb__$Types_Layer_$Impl_$.encode(ndat1,this.base.data.compress);
						obj[c1.name] = v2;
						break;
					case 15:
						obj[c1.name] = remapTileLayer(v1);
						break;
					default:
					}
				}
			} else {
				if(sheet.sheet.props.displayColumn == c.name) {
					var obj1 = sheet.sheet.lines[index];
					var _g10 = 0;
					var _g18 = sheet.sheet.columns;
					while(_g10 < _g18.length) {
						var cid = _g18[_g10];
						++_g10;
						if(cid.type == cdb_ColumnType.TId) {
							var id = Reflect.field(obj1,cid.name);
							if(id != null) {
								var disp = Reflect.field(obj1,c.name);
								if(disp == null) {
									disp = "#" + id;
								}
								var _this = sheet.index;
								(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).disp = disp;
							}
						}
					}
				}
				if(sheet.sheet.props.displayIcon == c.name) {
					var obj2 = sheet.sheet.lines[index];
					var _g19 = 0;
					var _g110 = sheet.sheet.columns;
					while(_g19 < _g110.length) {
						var cid1 = _g110[_g19];
						++_g19;
						if(cid1.type == cdb_ColumnType.TId) {
							var id1 = Reflect.field(obj2,cid1.name);
							if(id1 != null && id1 != "") {
								var _this1 = sheet.index;
								(__map_reserved[id1] != null ? _this1.getReserved(id1) : _this1.h[id1]).ico = Reflect.field(obj2,c.name);
							}
						}
					}
				}
			}
			break;
		case 7:
			var op1 = this.prepSnapshot();
			this.saveImages();
			this.commitSnapshot(op1);
			break;
		default:
			if(sheet.sheet.props.displayColumn == c.name) {
				var obj3 = sheet.sheet.lines[index];
				var _g20 = 0;
				var _g111 = sheet.sheet.columns;
				while(_g20 < _g111.length) {
					var cid2 = _g111[_g20];
					++_g20;
					if(cid2.type == cdb_ColumnType.TId) {
						var id2 = Reflect.field(obj3,cid2.name);
						if(id2 != null) {
							var disp1 = Reflect.field(obj3,c.name);
							if(disp1 == null) {
								disp1 = "#" + id2;
							}
							var _this2 = sheet.index;
							(__map_reserved[id2] != null ? _this2.getReserved(id2) : _this2.h[id2]).disp = disp1;
						}
					}
				}
			}
			if(sheet.sheet.props.displayIcon == c.name) {
				var obj4 = sheet.sheet.lines[index];
				var _g24 = 0;
				var _g112 = sheet.sheet.columns;
				while(_g24 < _g112.length) {
					var cid3 = _g112[_g24];
					++_g24;
					if(cid3.type == cdb_ColumnType.TId) {
						var id3 = Reflect.field(obj4,cid3.name);
						if(id3 != null && id3 != "") {
							var _this3 = sheet.index;
							(__map_reserved[id3] != null ? _this3.getReserved(id3) : _this3.h[id3]).ico = Reflect.field(obj4,c.name);
						}
					}
				}
			}
		}
	}
	,tileHtml: function(v,isInline) {
		var path = this.getAbsPath(v.file);
		if(!this.quickExists(path)) {
			if(isInline) {
				return "";
			}
			return "<span class=\"error\">" + v.file + "</span>";
		}
		var id = Main.UID++;
		var width = v.size * (v.width == null ? 1 : v.width);
		var height = v.size * (v.height == null ? 1 : v.height);
		var max = width > height ? width : height;
		var zoom = 1;
		var inl = isInline ? "display:inline-block;" : "";
		var url = "file://" + path;
		var html = "<div class=\"tile\" id=\"_c" + id + "\" style=\"width : " + (width * zoom | 0) + "px; height : " + (height * zoom | 0) + "px; background : url('" + url + "') -" + (v.size * v.x * zoom | 0) + "px -" + (v.size * v.y * zoom | 0) + "px; opacity:0; " + inl + "\"></div>";
		html += "<img src=\"" + url + "\" style=\"display:none\" onload=\"$('#_c" + id + "').css({opacity:1, backgroundSize : ((this.width*" + zoom + ")|0)+'px ' + ((this.height*" + zoom + ")|0)+'px' " + (zoom > 1 ? ", imageRendering : 'pixelated'" : "") + "}); if( this.parentNode != null ) this.parentNode.removeChild(this)\"/>";
		return html;
	}
	,valueHtml: function(c,v,sheet,obj) {
		if(v == null) {
			if(c.opt) {
				return "&nbsp;";
			}
			return "<span class=\"error\">#NULL</span>";
		}
		var _g = c.type;
		switch(_g._hx_index) {
		case 0:
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var _this = this.base.getSheet(sheet.sheet.name).index;
				var key = v;
				if((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).obj == obj) {
					return v;
				} else {
					return "<span class=\"error\">#DUP(" + Std.string(v) + ")</span>";
				}
			}
			break;
		case 1:
			if(v == "–") {
				return "&nbsp;";
			} else {
				return StringTools.replace(StringTools.htmlEscape(v),"\n","<br/>");
			}
			break;
		case 2:
			if(v) {
				return "Y";
			} else {
				return "N";
			}
			break;
		case 3:case 4:
			var _g1 = c.display;
			if(_g1 == null) {
				return Std.string(v) + "";
			} else if(_g1 == 1) {
				return Math.round(v * 10000) / 100 + "%";
			} else {
				return Std.string(v) + "";
			}
			break;
		case 5:
			var values = _g.values;
			return values[v];
		case 6:
			var sname = _g.sheet;
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var s = this.base.getSheet(sname);
				var _this1 = s.index;
				var key1 = v;
				var i = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				if(i == null) {
					return "<span class=\"error\">#REF(" + Std.string(v) + ")</span>";
				} else {
					var output = "";
					if(!this.prefs.hideInlineIcons && i.ico != null) {
						output += this.tileHtml(i.ico,true);
					}
					output += StringTools.htmlEscape(i.disp);
					return output;
				}
			}
			break;
		case 7:
			if(v == "") {
				return "<span class=\"error\">#MISSING</span>";
			} else {
				var data = Reflect.field(this.imageBank,v);
				if(data == null) {
					return "<span class=\"error\">#NOTFOUND(" + Std.string(v) + ")</span>";
				} else {
					return "<img src=\"" + data + "\"/>";
				}
			}
			break;
		case 8:
			var a = v;
			if(this.prefs.hideListPreviews) {
				return "<span class=\"array-shortened\">List (</span>" + a.length + "<span class=\"array-shortened\">)</span>";
			}
			var ps = sheet.base.getSheet(sheet.sheet.name + "@" + c.name);
			var out = [];
			var size = 0;
			var _g2 = 0;
			while(_g2 < a.length) {
				var v1 = a[_g2];
				++_g2;
				var vals = [];
				var _g3 = 0;
				var _g11 = ps.sheet.columns;
				while(_g3 < _g11.length) {
					var c1 = _g11[_g3];
					++_g3;
					switch(c1.type._hx_index) {
					case 8:case 17:
						continue;
					default:
						vals.push(this.valueHtml(c1,Reflect.field(v1,c1.name),ps,v1));
					}
				}
				var v2 = vals.length == 1 ? vals[0] : "" + Std.string(vals);
				if(size > 500) {
					out.push("...");
					break;
				}
				var vstr = v2;
				if(v2.indexOf("<") >= 0) {
					var _this_r = new RegExp("<img src=\"[^\"]+\" style=\"display:none\"[^>]+>","g".split("u").join(""));
					vstr = vstr.replace(_this_r,"");
					var _this_r1 = new RegExp("<img src=\"[^\"]+\"/>","g".split("u").join(""));
					vstr = vstr.replace(_this_r1,"[I]");
					var _this_r2 = new RegExp("<div id=\"[^>]+></div>","g".split("u").join(""));
					vstr = vstr.replace(_this_r2,"[D]");
				}
				size += vstr.length;
				out.push(v2);
			}
			if(out.length == 0) {
				return "";
			}
			return out.join(", ");
		case 9:
			var name = _g.name;
			var t = this.base.getCustomType(name);
			var a1 = v;
			var cas = t.cases[a1[0]];
			var str = cas.name;
			if(cas.args.length > 0) {
				str += "(";
				var out1 = [];
				var pos = 1;
				var _g4 = 1;
				var _g12 = a1.length;
				while(_g4 < _g12) {
					var i1 = _g4++;
					out1.push(this.valueHtml(cas.args[i1 - 1],a1[i1],sheet,this));
				}
				str += out1.join(",");
				str += ")";
			}
			return str;
		case 10:
			var values1 = _g.values;
			var v3 = v;
			var flags = [];
			var _g5 = 0;
			var _g13 = values1.length;
			while(_g5 < _g13) {
				var i2 = _g5++;
				if((v3 & 1 << i2) != 0) {
					flags.push(StringTools.htmlEscape(values1[i2]));
				}
			}
			if(flags.length == 0) {
				return String.fromCodePoint(8709);
			} else {
				return flags.join("|<wbr>");
			}
			break;
		case 11:
			var id = Main.UID++;
			return "<div class=\"color\" style=\"background-color:#" + StringTools.hex(v,6) + "\"></div>";
		case 12:
			var _g31 = _g.type;
			if(v == "–") {
				return "&nbsp;";
			} else {
				return StringTools.replace(StringTools.htmlEscape(v),"\n","<br/>");
			}
			break;
		case 13:
			var path = this.getAbsPath(v);
			var url = "file://" + path;
			var ext = v.split(".").pop().toLowerCase();
			var val = StringTools.htmlEscape(v);
			var html = v == "" ? "<span class=\"error\">#MISSING</span>" : "<span title=\"" + val + "\">" + val + "</span>";
			if(v != "" && !this.quickExists(path)) {
				html = "<span class=\"error\">" + html + "</span>";
			} else if(ext == "png" || ext == "jpg" || ext == "jpeg" || ext == "gif") {
				html = "<span class=\"preview\">" + html + "<div class=\"previewContent\"><div class=\"label\"></div><img src=\"" + url + "\" onload=\"$(this).parent().find('.label').text(this.width+'x'+this.height)\"/></div></span>";
			}
			if(v != "") {
				html += " <input type=\"submit\" value=\"open\" onclick=\"_.openFile('" + path + "')\"/>";
			}
			return html;
		case 14:
			return this.tileHtml(v);
		case 15:
			var v4 = v;
			var path1 = this.getAbsPath(v4.file);
			if(!this.quickExists(path1)) {
				return "<span class=\"error\">" + v4.file + "</span>";
			} else {
				return "#DATA";
			}
			break;
		case 16:
			var str1 = Std.string(v).split("\n").join(" ").split("\t").join("");
			if(str1.length > 33) {
				str1 = HxOverrides.substr(str1,0,33) + "...";
			}
			return str1;
		case 17:
			var ps1 = sheet.base.getSheet(sheet.sheet.name + "@" + c.name);
			var out2 = [];
			var _g6 = 0;
			var _g14 = ps1.sheet.columns;
			while(_g6 < _g14.length) {
				var c2 = _g14[_g6];
				++_g6;
				var pval = Reflect.field(v,c2.name);
				if(pval == null && c2.opt) {
					continue;
				}
				out2.push("<span class='propName'>" + c2.name + "</span> <span class='propVal'>" + this.valueHtml(c2,pval,ps1,v) + "</span>");
			}
			return out2.join("<br/>");
		}
	}
	,popupLine: function(sheet,index) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var ___ = new js_node_webkit_MenuItem({ type : "separator"});
		var nup = new js_node_webkit_MenuItem({ label : "Move Up"});
		var ndown = new js_node_webkit_MenuItem({ label : "Move Down"});
		var nsetidx = new js_node_webkit_MenuItem({ label : "Move To Index..."});
		var nins = new js_node_webkit_MenuItem({ label : "Insert Row Below"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete Row"});
		var nsep = new js_node_webkit_MenuItem({ label : "New Separator Above", type : "checkbox"});
		var nref = new js_node_webkit_MenuItem({ label : "Show References"});
		var m = nup;
		n.append(m);
		var m1 = ndown;
		n.append(m1);
		var m2 = nsetidx;
		n.append(m2);
		var m3 = ___;
		n.append(m3);
		var m4 = nins;
		n.append(m4);
		var m5 = ndel;
		n.append(m5);
		var m6 = nsep;
		n.append(m6);
		var m7 = ___;
		n.append(m7);
		var m8 = nref;
		n.append(m8);
		var sepIndex = Lambda.indexOf(sheet.sheet.separators,index);
		nsep.checked = sepIndex >= 0;
		nins.click = function() {
			_gthis.newLine(sheet,index);
		};
		nup.click = function() {
			var newIndex = sheet.moveLine(_gthis.opStack,index,-1);
			_gthis.setCursor(sheet,-1,newIndex);
		};
		ndown.click = function() {
			var newIndex1 = sheet.moveLine(_gthis.opStack,index,1);
			_gthis.setCursor(sheet,-1,newIndex1);
		};
		ndel.click = function() {
			var op = _gthis.prepSnapshot();
			sheet.deleteLine(index);
			_gthis.commitSnapshot(op);
		};
		nsetidx.click = function() {
			var captionSuffix = "";
			var newIndex2 = index;
			while(true) {
				var caption = "Enter new index for row #" + index + " (min=0, max=" + (sheet.sheet.lines.length - 1) + ")" + captionSuffix;
				var newIndexStr = _gthis.window.window.prompt(caption,"" + index);
				if(newIndexStr == null) {
					return;
				}
				var parsedIndex = Std.parseInt(newIndexStr);
				if(parsedIndex == null || parsedIndex < 0 || parsedIndex >= sheet.sheet.lines.length) {
					captionSuffix = "\n⚠ You entered an illegal value";
					continue;
				}
				newIndex2 = parsedIndex;
				break;
			}
			_gthis.opStack.push(new ops_RowMove(sheet.getNestedPos(index),newIndex2));
			_gthis.setCursor(sheet,-1,newIndex2);
		};
		nsep.click = function() {
			var op1 = _gthis.prepSnapshot();
			if(sepIndex >= 0) {
				sheet.sheet.separators.splice(sepIndex,1);
				if(sheet.sheet.props.separatorTitles != null) {
					sheet.sheet.props.separatorTitles.splice(sepIndex,1);
				}
			} else {
				sepIndex = sheet.sheet.separators.length;
				var _g = 0;
				var _g1 = sheet.sheet.separators.length;
				while(_g < _g1) {
					var i = _g++;
					if(sheet.sheet.separators[i] > index) {
						sepIndex = i;
						break;
					}
				}
				sheet.sheet.separators.splice(sepIndex,0,index);
				if(sheet.sheet.props.separatorTitles != null && sheet.sheet.props.separatorTitles.length > sepIndex) {
					sheet.sheet.props.separatorTitles.splice(sepIndex,0,null);
				}
			}
			sheet.sheet.props.separatorTitles[sepIndex] = "UNTITLED";
			_gthis.commitSnapshot(op1);
		};
		nref.click = function() {
			_gthis.showReferences(sheet,index);
		};
		if(sheet.sheet.props.hide) {
			nsep.enabled = false;
		}
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,popupColumn: function(sheet,c,isProperties) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var nedit = new js_node_webkit_MenuItem({ label : "Edit"});
		var nins = new js_node_webkit_MenuItem({ label : "New Column..."});
		var nleft = new js_node_webkit_MenuItem({ label : "Move Left"});
		var nright = new js_node_webkit_MenuItem({ label : "Move Right"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete Column"});
		var ndisp = new js_node_webkit_MenuItem({ label : "Display Column", type : "checkbox"});
		var nicon = new js_node_webkit_MenuItem({ label : "Display Icon", type : "checkbox"});
		var m = nedit;
		n.append(m);
		var m1 = nins;
		n.append(m1);
		var m2 = nleft;
		n.append(m2);
		var m3 = nright;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		var m5 = ndisp;
		n.append(m5);
		var m6 = nicon;
		n.append(m6);
		var _g = c.type;
		switch(_g._hx_index) {
		case 0:case 1:
			break;
		case 3:case 4:
			break;
		case 5:
			var _g1 = _g.values;
			break;
		case 10:
			var _g2 = _g.values;
			break;
		default:
		}
		ndisp.checked = sheet.sheet.props.displayColumn == c.name;
		nicon.checked = sheet.sheet.props.displayIcon == c.name;
		ndisp.enabled = false;
		nicon.enabled = false;
		var _g3 = c.type;
		switch(_g3._hx_index) {
		case 1:
			ndisp.enabled = true;
			break;
		case 6:
			var _g4 = _g3.sheet;
			ndisp.enabled = true;
			break;
		case 14:
			nicon.enabled = true;
			break;
		default:
		}
		nedit.click = function() {
			_gthis.newColumn(sheet.sheet.name,c);
		};
		nleft.click = function() {
			var index = Lambda.indexOf(sheet.sheet.columns,c);
			if(index > 0) {
				var op = _gthis.prepSnapshot();
				HxOverrides.remove(sheet.sheet.columns,c);
				sheet.sheet.columns.splice(index - 1,0,c);
				_gthis.commitSnapshot(op);
			}
		};
		nright.click = function() {
			var index1 = Lambda.indexOf(sheet.sheet.columns,c);
			if(index1 < sheet.sheet.columns.length - 1) {
				var op1 = _gthis.prepSnapshot();
				HxOverrides.remove(sheet.sheet.columns,c);
				sheet.sheet.columns.splice(index1 + 1,0,c);
				_gthis.commitSnapshot(op1);
			}
		};
		ndel.click = function() {
			if(!isProperties || window.confirm("Do you really want to delete this property for all objects?")) {
				_gthis.deleteColumn(sheet,c.name);
			}
		};
		ndisp.click = function() {
			var op2 = _gthis.prepSnapshot();
			if(sheet.sheet.props.displayColumn == c.name) {
				sheet.sheet.props.displayColumn = null;
			} else {
				sheet.sheet.props.displayColumn = c.name;
			}
			sheet.sync();
			_gthis.commitSnapshot(op2);
		};
		nicon.click = function() {
			var op3 = _gthis.prepSnapshot();
			if(sheet.sheet.props.displayIcon == c.name) {
				sheet.sheet.props.displayIcon = null;
			} else {
				sheet.sheet.props.displayIcon = c.name;
			}
			sheet.sync();
			_gthis.commitSnapshot(op3);
		};
		nins.click = function() {
			var sheet1 = sheet.sheet.name;
			var tmp = Lambda.indexOf(sheet.sheet.columns,c) + 1;
			_gthis.newColumn(sheet1,null,tmp);
		};
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,popupSheet: function(s,li) {
		var _gthis = this;
		var n = new js_node_webkit_Menu();
		var nins = new js_node_webkit_MenuItem({ label : "Add Sheet"});
		var nleft = new js_node_webkit_MenuItem({ label : "Move Left"});
		var nright = new js_node_webkit_MenuItem({ label : "Move Right"});
		var nren = new js_node_webkit_MenuItem({ label : "Rename"});
		var ndel = new js_node_webkit_MenuItem({ label : "Delete"});
		var nindex = new js_node_webkit_MenuItem({ label : "Add Index", type : "checkbox"});
		var ngroup = new js_node_webkit_MenuItem({ label : "Add Group", type : "checkbox"});
		var m = nins;
		n.append(m);
		var m1 = nleft;
		n.append(m1);
		var m2 = nright;
		n.append(m2);
		var m3 = nren;
		n.append(m3);
		var m4 = ndel;
		n.append(m4);
		var m5 = nindex;
		n.append(m5);
		var m6 = ngroup;
		n.append(m6);
		nleft.click = function() {
			var op = _gthis.prepSnapshot("move sheet left");
			var prev = -1;
			var _g = 0;
			var _g1 = _gthis.base.sheets.length;
			while(_g < _g1) {
				var i = _g++;
				var s2 = _gthis.base.sheets[i];
				if(s == s2) {
					break;
				}
				if(!s2.sheet.props.hide) {
					prev = i;
				}
			}
			if(prev < 0) {
				return;
			}
			HxOverrides.remove(_gthis.base.sheets,s);
			_gthis.base.sheets.splice(prev,0,s);
			_gthis.base.updateSheets();
			_gthis.prefs.curSheet = prev;
			_gthis.initContent();
			_gthis.commitSnapshot(op);
		};
		nright.click = function() {
			var op1 = _gthis.prepSnapshot("move sheet right");
			var _g2 = [];
			var _g11 = 0;
			var _g21 = _gthis.base.sheets;
			while(_g11 < _g21.length) {
				var s1 = _g21[_g11];
				++_g11;
				if(!s1.sheet.props.hide) {
					_g2.push(s1);
				}
			}
			var sheets = _g2;
			var index = sheets.indexOf(s);
			var next = sheets[index + 1];
			if(index < 0 || next == null) {
				return;
			}
			HxOverrides.remove(_gthis.base.sheets,s);
			index = _gthis.base.sheets.indexOf(next) + 1;
			_gthis.base.sheets.splice(index,0,s);
			var moved = [s];
			var delta = 0;
			var _g3 = 0;
			var _g4 = _gthis.base.sheets.slice();
			while(_g3 < _g4.length) {
				var ssub = _g4[_g3];
				++_g3;
				var parent = ssub.getParent();
				if(parent != null && moved.indexOf(parent.s) >= 0) {
					HxOverrides.remove(_gthis.base.sheets,ssub);
					var idx = _gthis.base.sheets.indexOf(s) + ++delta;
					_gthis.base.sheets.splice(idx,0,ssub);
					moved.push(ssub);
				}
			}
			_gthis.base.updateSheets();
			_gthis.prefs.curSheet = _gthis.base.sheets.indexOf(s);
			_gthis.initContent();
			_gthis.commitSnapshot(op1);
		};
		ndel.click = function() {
			var op2 = _gthis.prepSnapshot("delete sheet");
			_gthis.base.deleteSheet(s);
			_gthis.initContent();
			_gthis.commitSnapshot(op2);
		};
		nins.click = function() {
			_gthis.newSheet();
		};
		nindex.checked = s.sheet.props.hasIndex;
		nindex.click = function() {
			var op3 = _gthis.prepSnapshot();
			if(s.sheet.props.hasIndex) {
				var _g5 = 0;
				var _g12 = s.getLines();
				while(_g5 < _g12.length) {
					var o = _g12[_g5];
					++_g5;
					Reflect.deleteField(o,"index");
				}
				s.sheet.props.hasIndex = false;
			} else {
				var _g6 = 0;
				var _g13 = s.sheet.columns;
				while(_g6 < _g13.length) {
					var c = _g13[_g6];
					++_g6;
					if(c.name == "index") {
						_gthis.error("Column 'index' already exists");
						return;
					}
				}
				s.sheet.props.hasIndex = true;
			}
			_gthis.commitSnapshot(op3);
		};
		ngroup.checked = s.sheet.props.hasGroup;
		ngroup.click = function() {
			var op4 = _gthis.prepSnapshot();
			if(s.sheet.props.hasGroup) {
				var _g7 = 0;
				var _g14 = s.getLines();
				while(_g7 < _g14.length) {
					var o1 = _g14[_g7];
					++_g7;
					Reflect.deleteField(o1,"group");
				}
				s.sheet.props.hasGroup = false;
			} else {
				var _g8 = 0;
				var _g15 = s.sheet.columns;
				while(_g8 < _g15.length) {
					var c1 = _g15[_g8];
					++_g8;
					if(c1.name == "group") {
						_gthis.error("Column 'group' already exists");
						return;
					}
				}
				s.sheet.props.hasGroup = true;
			}
			_gthis.commitSnapshot(op4);
		};
		nren.click = function() {
			li.dblclick();
		};
		if(s.sheet.props.level != null || s.hasColumn("width",[cdb_ColumnType.TInt]) && s.hasColumn("height",[cdb_ColumnType.TInt]) && s.hasColumn("props",[cdb_ColumnType.TDynamic])) {
			var nlevel = new js_node_webkit_MenuItem({ label : "Level", type : "checkbox"});
			nlevel.checked = s.sheet.props.level != null;
			n.append(nlevel);
			nlevel.click = function() {
				var op5 = _gthis.prepSnapshot();
				if(s.sheet.props.level != null) {
					Reflect.deleteField(s.sheet.props,"level");
				} else {
					s.sheet.props.level = { tileSets : { }};
				}
				_gthis.commitSnapshot(op5);
			};
		}
		n.popup(this.mousePos.x,this.mousePos.y);
	}
	,editCell: function(column,v,sheet,rowIndex) {
		var _gthis = this;
		var rowModifyOp = new ops_RowModify(this,sheet.getNestedPos(rowIndex));
		this.opStack.pushNoApply(rowModifyOp);
		if(this.macEditMenu != null) {
			this.window.menu.append(this.macEditMenu);
		}
		var _g = 0;
		var _g1 = this.editMenu.items;
		while(_g < _g1.length) {
			var mi = _g1[_g];
			++_g;
			mi.enabled = false;
		}
		var obj = sheet.sheet.lines[rowIndex];
		var val = Reflect.field(obj,column.name);
		var old = val;
		var html = _gthis.valueHtml(column,val,sheet,obj);
		if(v.hasClass("edit")) {
			return;
		}
		var editDone = function() {
			if(_gthis.macEditMenu != null) {
				_gthis.window.menu.remove(_gthis.macEditMenu);
			}
			var _g2 = 0;
			var _g3 = _gthis.editMenu.items;
			while(_g2 < _g3.length) {
				var mi1 = _g3[_g2];
				++_g2;
				mi1.enabled = true;
			}
			v.html(html);
			v.removeClass("edit");
			if(rowModifyOp.isUseless()) {
				console.log("src/Main.hx:1241:","last operation was useless");
				_gthis.opStack.removeLastOp(rowModifyOp);
			}
		};
		var _g21 = column.type;
		switch(_g21._hx_index) {
		case 2:
			if(column.opt && val == false) {
				val = null;
				Reflect.deleteField(obj,column.name);
			} else {
				val = !val;
				obj[column.name] = val;
			}
			var tmp = _gthis.valueHtml(column,val,sheet,obj);
			v.html(tmp);
			_gthis.updateClasses(v,column,val);
			rowModifyOp.commitNewState(_gthis);
			_gthis.changed(sheet,column,rowIndex,old);
			break;
		case 5:
			var values = _g21.values;
			v.empty();
			v.addClass("edit");
			var select = $("<select>");
			v.append(select);
			var _g22 = 0;
			var _g31 = values.length;
			while(_g22 < _g31) {
				var i = _g22++;
				var tmp1 = $("<option>");
				var tmp2 = val == i ? "selected" : "_sel";
				tmp1.attr("value","" + i).attr(tmp2,"selected").text(values[i]).appendTo(select);
			}
			if(column.opt) {
				$("<option>").attr("value","-1").text("--- None ---").prependTo(select);
			}
			select.change(function(e) {
				val = Std.parseInt(select.val());
				if(val < 0) {
					val = null;
					Reflect.deleteField(obj,column.name);
				} else {
					obj[column.name] = val;
				}
				html = _gthis.valueHtml(column,val,sheet,obj);
				_gthis.updateClasses(v,column,val);
				rowModifyOp.commitNewState(_gthis);
				_gthis.changed(sheet,column,rowIndex,old);
				editDone();
				e.stopPropagation();
			});
			select.keydown(function(e1) {
				switch(e1.keyCode) {
				case 9:
					select.blur();
					_gthis.moveCursor(e1.shiftKey ? -1 : 1,0,false,false);
					haxe_Timer.delay(function() {
						$(".cursor").dblclick();
					},1);
					e1.preventDefault();
					break;
				case 37:case 39:
					select.blur();
					return;
				default:
				}
				e1.stopPropagation();
			});
			select.blur(function(_) {
				editDone();
			});
			select.focus();
			var event = window.document.createEvent("MouseEvents");
			event.initMouseEvent("mousedown",true,true,window);
			select[0].dispatchEvent(event);
			break;
		case 6:
			var sname = _g21.sheet;
			var sdat = this.base.getSheet(sname);
			if(sdat == null) {
				return;
			}
			v.empty();
			v.addClass("edit");
			var select1 = $("<select>");
			var _g23 = [];
			var _g32 = 0;
			var _g4 = sdat.all;
			while(_g32 < _g4.length) {
				var d = _g4[_g32];
				++_g32;
				_g23.push({ id : d.id, ico : d.ico, text : d.disp});
			}
			var elts = _g23;
			if(column.opt || val == null || val == "") {
				elts.unshift({ id : "~", ico : null, text : "--- None ---"});
			}
			v.append(select1);
			select1.change(function(e2) {
				e2.stopPropagation();
			});
			var props = { data : elts};
			if(sdat.sheet.props.displayIcon != null) {
				var buildElement = function(i1) {
					var text = StringTools.htmlEscape(i1.text);
					return $("<div>" + (i1.ico == null ? "<div style='display:inline-block;width:16px'/>" : _gthis.tileHtml(i1.ico,true)) + " " + text + "</div>");
				};
				props.templateResult = props.templateSelection = buildElement;
			}
			select1.select2(props);
			select1.select2("val",val == null ? "" : val);
			select1.select2("open");
			select1.change(function(e3) {
				val = select1.val();
				if(val == "~") {
					val = null;
					Reflect.deleteField(obj,column.name);
				} else {
					obj[column.name] = val;
				}
				html = _gthis.valueHtml(column,val,sheet,obj);
				_gthis.updateClasses(v,column,val);
				rowModifyOp.commitNewState(_gthis);
				_gthis.changed(sheet,column,rowIndex,old);
				editDone();
			});
			select1.on("select2:close",null,function(_1) {
				editDone();
			});
			break;
		case 7:
			if(v.dropFile != null) {
				var file = v.dropFile;
				var ext = file.split(".").pop().toLowerCase();
				if(ext == "jpeg") {
					ext = "jpg";
				}
				if(ext != "png" && ext != "gif" && ext != "jpg") {
					_gthis.error("Unsupported image extension " + ext);
				} else {
					var bytes = js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(file));
					var md5 = haxe_crypto_Md5.make(bytes).toHex();
					if(_gthis.imageBank == null) {
						_gthis.imageBank = { };
					}
					if(!Object.prototype.hasOwnProperty.call(_gthis.imageBank,md5)) {
						var data = "data:image/" + ext + ";base64," + new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")).encodeBytes(bytes).toString();
						_gthis.imageBank[md5] = data;
					}
					val = md5;
					obj[column.name] = val;
					var tmp3 = _gthis.valueHtml(column,val,sheet,obj);
					v.html(tmp3);
					_gthis.updateClasses(v,column,val);
					rowModifyOp.commitNewState(_gthis);
					_gthis.changed(sheet,column,rowIndex,old);
				}
			} else {
				var input = $("<input>").attr("type","file").css("display","none").change(function(e4) {
					var j = $(this);
					var file1 = j.val();
					var ext1 = file1.split(".").pop().toLowerCase();
					if(ext1 == "jpeg") {
						ext1 = "jpg";
					}
					if(ext1 != "png" && ext1 != "gif" && ext1 != "jpg") {
						_gthis.error("Unsupported image extension " + ext1);
					} else {
						var bytes1 = js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(file1));
						var md51 = haxe_crypto_Md5.make(bytes1).toHex();
						if(_gthis.imageBank == null) {
							_gthis.imageBank = { };
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.imageBank,md51)) {
							var data1 = "data:image/" + ext1 + ";base64," + new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")).encodeBytes(bytes1).toString();
							_gthis.imageBank[md51] = data1;
						}
						val = md51;
						obj[column.name] = val;
						var input1 = _gthis.valueHtml(column,val,sheet,obj);
						v.html(input1);
						_gthis.updateClasses(v,column,val);
						rowModifyOp.commitNewState(_gthis);
						_gthis.changed(sheet,column,rowIndex,old);
					}
					j.remove();
				});
				input.appendTo($("body"));
				input.click();
			}
			break;
		case 9:
			var _g33 = _g21.name;
			v.empty();
			var inputBox = $(column.type == cdb_ColumnType.TString ? "<textarea>" : "<input>");
			v.addClass("edit");
			inputBox.appendTo(v);
			if(val != null) {
				var _g24 = column.type;
				switch(_g24._hx_index) {
				case 9:
					var t = _g24.name;
					var tmp4 = this.base.typeValToString(this.base.getCustomType(t),val);
					inputBox.val(tmp4);
					break;
				case 16:
					var tmp5 = JSON.stringify(val);
					inputBox.val(tmp5);
					break;
				default:
					inputBox.val("" + Std.string(val));
				}
			}
			inputBox.change(function(e5) {
				e5.stopPropagation();
			});
			inputBox.keydown(function(e6) {
				switch(e6.keyCode) {
				case 9:
					inputBox.blur();
					_gthis.moveCursor(e6.shiftKey ? -1 : 1,0,false,false);
					haxe_Timer.delay(function() {
						$(".cursor").dblclick();
					},1);
					e6.preventDefault();
					break;
				case 13:
					if(!inputBox.is("textarea") || !e6.shiftKey && !e6.altKey && !e6.ctrlKey) {
						inputBox.blur();
						e6.preventDefault();
					}
					break;
				case 27:
					editDone();
					break;
				case 38:case 40:
					if(!inputBox.is("textarea")) {
						inputBox.blur();
					}
					return;
				default:
				}
				e6.stopPropagation();
			});
			inputBox.blur(function(_2) {
				var newValue = inputBox.val();
				var oldValue = val;
				var prevObj;
				if(column.type == cdb_ColumnType.TId && oldValue != null) {
					var _this = _gthis.base.getSheet(sheet.sheet.name).index;
					var key = val;
					prevObj = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				} else {
					prevObj = null;
				}
				var prevTarget = null;
				if(newValue == "" && column.opt) {
					if(val != null) {
						html = null;
						val = html;
						Reflect.deleteField(obj,column.name);
						_gthis.updateClasses(v,column,val);
						rowModifyOp.commitNewState(_gthis);
						_gthis.changed(sheet,column,rowIndex,old);
					}
				} else {
					var val2;
					var _g25 = column.type;
					switch(_g25._hx_index) {
					case 0:
						val2 = _gthis.base.r_ident.match(newValue) ? newValue : null;
						break;
					case 3:
						val2 = Std.parseInt(newValue);
						break;
					case 4:
						var f = parseFloat(newValue);
						val2 = isNaN(f) ? null : f;
						break;
					case 9:
						var t1 = _g25.name;
						try {
							val2 = _gthis.base.parseTypeVal(_gthis.base.getCustomType(t1),newValue);
						} catch( e7 ) {
							var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
							val2 = null;
						}
						break;
					case 16:
						try {
							val2 = _gthis.base.parseDynamic(newValue);
						} catch( e9 ) {
							var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
							val2 = null;
						}
						break;
					default:
						val2 = newValue;
					}
					if(val2 != val && val2 != null) {
						var _this1 = _gthis.base.getSheet(sheet.sheet.name).index;
						var key1 = val2;
						prevTarget = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						if(column.type == cdb_ColumnType.TId && val != null && (prevObj == null || prevObj.obj == obj)) {
							var m = new haxe_ds_StringMap();
							var key2 = val;
							var value = val2;
							if(__map_reserved[key2] != null) {
								m.setReserved(key2,value);
							} else {
								m.h[key2] = value;
							}
							_gthis.base.updateRefs(sheet,m);
						}
						val = val2;
						obj[column.name] = val;
						_gthis.updateClasses(v,column,val);
						rowModifyOp.commitNewState(_gthis);
						_gthis.changed(sheet,column,rowIndex,old);
						html = _gthis.valueHtml(column,val,sheet,obj);
					}
				}
				editDone();
				var tmp6;
				if(column.type == cdb_ColumnType.TId && prevObj != null && oldValue != val) {
					var tmp7;
					if(prevObj.obj == obj) {
						var _this2 = _gthis.base.getSheet(sheet.sheet.name).index;
						tmp7 = (__map_reserved[oldValue] != null ? _this2.getReserved(oldValue) : _this2.h[oldValue]) != null;
					} else {
						tmp7 = false;
					}
					if(!tmp7) {
						if(prevTarget != null) {
							var _this3 = _gthis.base.getSheet(sheet.sheet.name).index;
							var key3 = val;
							tmp6 = (__map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3]).obj != prevTarget.obj;
						} else {
							tmp6 = false;
						}
					} else {
						tmp6 = true;
					}
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					_gthis.refresh();
					return;
				}
			});
			var _g26 = column.type;
			if(_g26._hx_index == 9) {
				var t2 = _g26.name;
				var t3 = this.base.getCustomType(t2);
				inputBox.keyup(function(_3) {
					var str = inputBox.val();
					try {
						if(str != "") {
							_gthis.base.parseTypeVal(t3,str);
						}
						inputBox.removeClass("error");
					} catch( msg ) {
						var msg1 = ((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg;
						if(typeof(msg1) == "string") {
							_gthis.window.window.alert(msg1);
							inputBox.addClass("error");
						} else {
							throw msg;
						}
					}
				});
			}
			inputBox.focus();
			inputBox.select();
			break;
		case 10:
			var values1 = _g21.values;
			var div = $("<div>").addClass("flagValues");
			div.click(function(e11) {
				e11.stopPropagation();
			});
			div.dblclick(function(e12) {
				e12.stopPropagation();
			});
			var _g27 = 0;
			var _g34 = values1.length;
			while(_g27 < _g34) {
				var i2 = [_g27++];
				var input2 = $("<input>");
				input2.attr("type","checkbox");
				input2.prop("checked",(val & 1 << i2[0]) != 0);
				input2.change((function(i3) {
					return function(e13) {
						val &= ~(1 << i3[0]);
						if($(this).prop("checked")) {
							val |= 1 << i3[0];
						}
						e13.stopPropagation();
					};
				})(i2));
				$("<label>").text(values1[i2[0]]).appendTo(div).append(input2);
			}
			v.empty();
			v.append(div);
			this.cursor.onchange = function() {
				if(column.opt && val == 0) {
					val = null;
					Reflect.deleteField(obj,column.name);
				} else {
					obj[column.name] = val;
				}
				html = _gthis.valueHtml(column,val,sheet,obj);
				rowModifyOp.commitNewState(_gthis);
				editDone();
			};
			break;
		case 11:
			var id = Std.random(1);
			v.html("<div class=\"modal\" onclick=\"$('#_c" + id + "').spectrum('toggle')\"></div><input type=\"text\" id=\"_c" + id + "\"/>");
			var spect = $("#_c" + id);
			spect.spectrum({ color : "#" + StringTools.hex(val,6), showInput : true, showButtons : true, showInitial : true, preferredFormat : "hex3", change : function() {
				spect.spectrum("hide");
			}, hide : function(vcol) {
				var color = Std.parseInt("0x" + Std.string(vcol.toHex()));
				val = color;
				obj[column.name] = color;
				var tmp8 = _gthis.valueHtml(column,val,sheet,obj);
				v.html(tmp8);
				rowModifyOp.commitNewState(_gthis);
			}});
			spect.spectrum("show");
			break;
		case 12:
			var _g5 = _g21.type;
			throw new js__$Boot_HaxeError("assert2");
		case 13:
			v.empty();
			v.off();
			var tmp9 = _gthis.valueHtml(column,val,sheet,obj);
			v.html(tmp9);
			v.find("input").addClass("deletable").change(function(e14) {
				if(Reflect.field(obj,column.name) != null) {
					Reflect.deleteField(obj,column.name);
					var tmp10 = _gthis.valueHtml(column,val,sheet,obj);
					v.html(tmp10);
					rowModifyOp.commitNewState(_gthis);
				}
			});
			v.dblclick(function(_4) {
				_gthis.chooseFile(function(path) {
					val = path;
					obj[column.name] = path;
					var tmp11 = _gthis.valueHtml(column,val,sheet,obj);
					v.html(tmp11);
					rowModifyOp.commitNewState(_gthis);
				});
			});
			break;
		case 8:case 14:case 17:
			throw new js__$Boot_HaxeError("assert2");
		case 15:
			break;
		case 0:case 1:case 3:case 4:case 16:
			v.empty();
			var inputBox1 = $(column.type == cdb_ColumnType.TString ? "<textarea>" : "<input>");
			v.addClass("edit");
			inputBox1.appendTo(v);
			if(val != null) {
				var _g28 = column.type;
				switch(_g28._hx_index) {
				case 9:
					var t4 = _g28.name;
					var tmp12 = this.base.typeValToString(this.base.getCustomType(t4),val);
					inputBox1.val(tmp12);
					break;
				case 16:
					var tmp13 = JSON.stringify(val);
					inputBox1.val(tmp13);
					break;
				default:
					inputBox1.val("" + Std.string(val));
				}
			}
			inputBox1.change(function(e15) {
				e15.stopPropagation();
			});
			inputBox1.keydown(function(e16) {
				switch(e16.keyCode) {
				case 9:
					inputBox1.blur();
					_gthis.moveCursor(e16.shiftKey ? -1 : 1,0,false,false);
					haxe_Timer.delay(function() {
						$(".cursor").dblclick();
					},1);
					e16.preventDefault();
					break;
				case 13:
					if(!inputBox1.is("textarea") || !e16.shiftKey && !e16.altKey && !e16.ctrlKey) {
						inputBox1.blur();
						e16.preventDefault();
					}
					break;
				case 27:
					editDone();
					break;
				case 38:case 40:
					if(!inputBox1.is("textarea")) {
						inputBox1.blur();
					}
					return;
				default:
				}
				e16.stopPropagation();
			});
			inputBox1.blur(function(_5) {
				var newValue1 = inputBox1.val();
				var oldValue1 = val;
				var prevObj1;
				if(column.type == cdb_ColumnType.TId && oldValue1 != null) {
					var _this4 = _gthis.base.getSheet(sheet.sheet.name).index;
					var key4 = val;
					prevObj1 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
				} else {
					prevObj1 = null;
				}
				var prevTarget1 = null;
				if(newValue1 == "" && column.opt) {
					if(val != null) {
						html = null;
						val = html;
						Reflect.deleteField(obj,column.name);
						_gthis.updateClasses(v,column,val);
						rowModifyOp.commitNewState(_gthis);
						_gthis.changed(sheet,column,rowIndex,old);
					}
				} else {
					var val21;
					var _g29 = column.type;
					switch(_g29._hx_index) {
					case 0:
						val21 = _gthis.base.r_ident.match(newValue1) ? newValue1 : null;
						break;
					case 3:
						val21 = Std.parseInt(newValue1);
						break;
					case 4:
						var f1 = parseFloat(newValue1);
						val21 = isNaN(f1) ? null : f1;
						break;
					case 9:
						var t5 = _g29.name;
						try {
							val21 = _gthis.base.parseTypeVal(_gthis.base.getCustomType(t5),newValue1);
						} catch( e17 ) {
							var e18 = ((e17) instanceof js__$Boot_HaxeError) ? e17.val : e17;
							val21 = null;
						}
						break;
					case 16:
						try {
							val21 = _gthis.base.parseDynamic(newValue1);
						} catch( e19 ) {
							var e20 = ((e19) instanceof js__$Boot_HaxeError) ? e19.val : e19;
							val21 = null;
						}
						break;
					default:
						val21 = newValue1;
					}
					if(val21 != val && val21 != null) {
						var _this5 = _gthis.base.getSheet(sheet.sheet.name).index;
						var key5 = val21;
						prevTarget1 = __map_reserved[key5] != null ? _this5.getReserved(key5) : _this5.h[key5];
						if(column.type == cdb_ColumnType.TId && val != null && (prevObj1 == null || prevObj1.obj == obj)) {
							var m1 = new haxe_ds_StringMap();
							var key6 = val;
							var value1 = val21;
							if(__map_reserved[key6] != null) {
								m1.setReserved(key6,value1);
							} else {
								m1.h[key6] = value1;
							}
							_gthis.base.updateRefs(sheet,m1);
						}
						val = val21;
						obj[column.name] = val;
						_gthis.updateClasses(v,column,val);
						rowModifyOp.commitNewState(_gthis);
						_gthis.changed(sheet,column,rowIndex,old);
						html = _gthis.valueHtml(column,val,sheet,obj);
					}
				}
				editDone();
				var tmp14;
				if(column.type == cdb_ColumnType.TId && prevObj1 != null && oldValue1 != val) {
					var tmp15;
					if(prevObj1.obj == obj) {
						var _this6 = _gthis.base.getSheet(sheet.sheet.name).index;
						tmp15 = (__map_reserved[oldValue1] != null ? _this6.getReserved(oldValue1) : _this6.h[oldValue1]) != null;
					} else {
						tmp15 = false;
					}
					if(!tmp15) {
						if(prevTarget1 != null) {
							var _this7 = _gthis.base.getSheet(sheet.sheet.name).index;
							var key7 = val;
							tmp14 = (__map_reserved[key7] != null ? _this7.getReserved(key7) : _this7.h[key7]).obj != prevTarget1.obj;
						} else {
							tmp14 = false;
						}
					} else {
						tmp14 = true;
					}
				} else {
					tmp14 = false;
				}
				if(tmp14) {
					_gthis.refresh();
					return;
				}
			});
			var _g210 = column.type;
			if(_g210._hx_index == 9) {
				var t6 = _g210.name;
				var t7 = this.base.getCustomType(t6);
				inputBox1.keyup(function(_6) {
					var str1 = inputBox1.val();
					try {
						if(str1 != "") {
							_gthis.base.parseTypeVal(t7,str1);
						}
						inputBox1.removeClass("error");
					} catch( msg2 ) {
						var msg3 = ((msg2) instanceof js__$Boot_HaxeError) ? msg2.val : msg2;
						if(typeof(msg3) == "string") {
							_gthis.window.window.alert(msg3);
							inputBox1.addClass("error");
						} else {
							throw msg2;
						}
					}
				});
			}
			inputBox1.focus();
			inputBox1.select();
			break;
		}
	}
	,updateCursor: function() {
		$(".selected").removeClass("selected");
		$(".cursor").removeClass("cursor");
		$(".cursorLine").removeClass("cursorLine");
		if(this.cursor.s == null) {
			return;
		}
		if(this.cursor.y < 0) {
			this.cursor.y = 0;
			this.cursor.select = null;
		}
		if(this.cursor.y >= this.cursor.s.sheet.lines.length) {
			this.cursor.y = this.cursor.s.sheet.lines.length - 1;
			this.cursor.select = null;
		}
		var max = this.cursor.s.sheet.props.isProps ? 1 : this.cursor.s.sheet.columns.length;
		if(this.cursor.x >= max) {
			this.cursor.x = max - 1;
			this.cursor.select = null;
		}
		var l = this.getLine(this.cursor.s,this.cursor.y);
		if(this.cursor.x < 0) {
			l.addClass("selected");
			if(this.cursor.select != null) {
				var y = this.cursor.y;
				while(this.cursor.select.y != y) {
					if(this.cursor.select.y > y) {
						++y;
					} else {
						--y;
					}
					this.getLine(this.cursor.s,y).addClass("selected");
				}
			}
		} else {
			l.find("td.c").eq(this.cursor.x).addClass("cursor").closest("tr").addClass("cursorLine");
			if(this.cursor.select != null) {
				var s = this.getSelection();
				var _g = s.y1;
				var _g1 = s.y2 + 1;
				while(_g < _g1) {
					var y1 = _g++;
					this.getLine(this.cursor.s,y1).find("td.c").slice(s.x1,s.x2 + 1).addClass("selected");
				}
			}
		}
		var e = l[0];
		if(e != null) {
			e.scrollIntoViewIfNeeded();
		}
	}
	,refresh: function(text) {
		if(text == null) {
			text = "Working...";
		}
		var _gthis = this;
		console.log("src/Main.hx:1625:","Refresh");
		var nowLoading = window.document.querySelector("#now-loading-text");
		nowLoading.innerText = text;
		nowLoading.className = "";
		if(this.currentRefreshCallback != null) {
			return;
		}
		this.currentRefreshCallback = window.setTimeout(function() {
			_gthis.currentRefreshCallback = null;
			var content = $("#content");
			content.empty();
			var t = $("<table>");
			_gthis.checkCursor = true;
			_gthis.fillTable(t,_gthis.viewSheet);
			if(_gthis.cursor.s != _gthis.viewSheet && _gthis.checkCursor) {
				_gthis.setCursor(_gthis.viewSheet,null,null,null,false);
			}
			t.appendTo(content);
			$("<div>").appendTo(content).addClass("tableBottom");
			_gthis.updateCursor();
			nowLoading.className = "no-display";
		});
	}
	,makeRelativePath: function(path) {
		if(this.prefs.curFile == null) {
			return path;
		}
		var parts = path.split("\\").join("/").split("/");
		var base = this.prefs.curFile.split("\\").join("/").split("/");
		base.pop();
		while(parts.length > 1 && base.length > 0 && parts[0] == base[0]) {
			parts.shift();
			base.shift();
		}
		if(parts.length == 0 || parts[0] != "" && parts[0].charAt(1) != ":") {
			while(base.length > 0) {
				parts.unshift("..");
				base.pop();
			}
		}
		return parts.join("/");
	}
	,chooseFile: function(callb,cancel) {
		var _gthis = this;
		if(this.prefs.curFile == null) {
			this.error("Please save CDB file first");
			if(cancel != null) {
				cancel();
			}
			return;
		}
		var fs = $("#fileSelect");
		if(fs.attr("nwworkingdir") == null) {
			fs.attr("nwworkingdir",new haxe_io_Path(this.prefs.curFile).dir);
		}
		fs.off("change");
		fs.val("");
		fs.change(function(_) {
			fs.off("change");
			var path = fs.val();
			fs.val("");
			if(path == "") {
				if(cancel != null) {
					cancel();
				}
				return;
			}
			fs.attr("nwworkingdir","");
			var relPath;
			if(_gthis.prefs.curFile == null) {
				relPath = path;
			} else {
				var parts = path.split("\\").join("/").split("/");
				var base = _gthis.prefs.curFile.split("\\").join("/").split("/");
				base.pop();
				while(parts.length > 1 && base.length > 0 && parts[0] == base[0]) {
					parts.shift();
					base.shift();
				}
				if(parts.length == 0 || parts[0] != "" && parts[0].charAt(1) != ":") {
					while(base.length > 0) {
						parts.unshift("..");
						base.pop();
					}
				}
				relPath = parts.join("/");
			}
			callb(relPath);
		}).click();
	}
	,fillProps: function(content,sheet,props) {
		var _gthis = this;
		content.addClass("sheet");
		content.attr("sheet",sheet.getPath());
		var available = [];
		var index = 0;
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = [_g1[_g]];
			++_g;
			if(c[0].opt && !Object.prototype.hasOwnProperty.call(props,c[0].name)) {
				available.push(c[0]);
				continue;
			}
			var v = Reflect.field(props,c[0].name);
			var l = [$("<tr>").attr("colName",c[0].name).appendTo(content)];
			var th = $("<th>").text(c[0].name).appendTo(l[0]);
			var td = $("<td>").addClass("c");
			var e = c[0].type;
			var td1 = [td.addClass("t_" + HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index],1,null).toLowerCase()).html(this.valueHtml(c[0],v,sheet,props)).appendTo(l[0])];
			var index1 = [index++];
			var tmp = (function(index2) {
				return function(e1) {
					_gthis.setCursor(sheet,0,index2[0]);
					e1.stopPropagation();
				};
			})(index1);
			l[0].click(tmp);
			th.mousedown((function(l1,c1) {
				return function(e2) {
					if(e2.which == 3) {
						var f = $bind(_gthis,_gthis.popupColumn);
						var sheet1 = sheet;
						var c2 = c1[0];
						haxe_Timer.delay((function() {
							return function() {
								f(sheet1,c2,true);
							};
						})(),1);
						e2.preventDefault();
						l1[0].click();
						return;
					}
				};
			})(l,c));
			var tmp1 = (function(td2,c3) {
				return function(e3) {
					_gthis.editCell(c3[0],td2[0],sheet,0);
					e3.preventDefault();
					e3.stopPropagation();
				};
			})(td1,c);
			td1[0].dblclick(tmp1);
		}
		available.sort(function(a,b) {
			if(a.name < b.name) {
				return -1;
			} else {
				return 1;
			}
		});
		var end = $("<tr>").appendTo(content);
		end = $("<td>").attr("colspan","2").appendTo(end);
		var sel = $("<select>").appendTo(end);
		$("<option>").attr("value","").text("--- Choose ---").appendTo(sel);
		var _g2 = 0;
		while(_g2 < available.length) {
			var c4 = available[_g2];
			++_g2;
			$("<option>").attr("value",c4.name).text(c4.name).appendTo(sel);
		}
		$("<option>").attr("value","new").text("New property...").appendTo(sel);
		sel.change(function(e4) {
			e4.stopPropagation();
			var v1 = sel.val();
			if(v1 == "") {
				return;
			}
			sel.val("");
			if(v1 == "new") {
				_gthis.newColumn(sheet.sheet.name);
				return;
			}
			var _g3 = 0;
			while(_g3 < available.length) {
				var c5 = available[_g3];
				++_g3;
				if(c5.name == v1) {
					var op = _gthis.prepSnapshot();
					var field = c5.name;
					var value = _gthis.base.getDefault(c5,true);
					props[field] = value;
					_gthis.commitSnapshot(op);
					return;
				}
			}
		});
	}
	,updateClasses: function(v,c,val) {
		switch(c.type._hx_index) {
		case 2:
			v.removeClass("true, false").addClass(val == true ? "true" : "false");
			break;
		case 3:case 4:
			v.removeClass("zero");
			if(val == 0) {
				v.addClass("zero");
			}
			break;
		default:
		}
	}
	,fillTable: function(content,sheet) {
		var _gthis = this;
		if(sheet.sheet.columns.length == 0) {
			content.html("<a href=\"javascript:_.newColumn('" + sheet.sheet.name + "')\">Insert Column</a>");
			return;
		}
		var todo = [];
		var inTodo = false;
		var cols = $("<tr>").addClass("head");
		var colCount = sheet.sheet.columns.length;
		var lines = [];
		var _g = [];
		var _g1 = 0;
		var _g2 = cdb_ColumnType.__constructs__.slice();
		while(_g1 < _g2.length) {
			var t = _g2[_g1];
			++_g1;
			_g.push(HxOverrides.substr(t,1,null).toLowerCase());
		}
		var types = _g;
		if(sheet.sheet.props.level != null) {
			$("<th>").text("Edit").addClass("level-editor-extra-column").appendTo(cols);
			colCount += 1;
		}
		$("<th>").text("#").addClass("start").appendTo(cols).click(function(_) {
			if(sheet.sheet.props.hide) {
				content.change();
			} else {
				$("tr.list table").change();
			}
		});
		content.addClass("sheet");
		var tmp = sheet.getPath();
		content.attr("sheet",tmp);
		content.click(function(e) {
			e.stopPropagation();
		});
		var _g3 = 0;
		var _g4 = sheet.sheet.columns.length;
		while(_g3 < _g4) {
			var cindex = _g3++;
			var c = [sheet.sheet.columns[cindex]];
			var col = $("<th>");
			$("<span>").text(c[0].name).attr("title",c[0].name).appendTo(col);
			var e1 = c[0].type;
			col.addClass("t_" + HxOverrides.substr($hxEnums[e1.__enum__].__constructs__[e1._hx_index],1,null).toLowerCase());
			if(sheet.sheet.props.displayColumn == c[0].name) {
				col.addClass("display");
			}
			col.mousedown((function(c1) {
				return function(e2) {
					if(e2.which == 3) {
						var f = $bind(_gthis,_gthis.popupColumn);
						var sheet1 = sheet;
						var c2 = c1[0];
						haxe_Timer.delay((function() {
							return function() {
								f(sheet1,c2);
							};
						})(),1);
						e2.preventDefault();
						return;
					}
				};
			})(c));
			col.dblclick((function(c3) {
				return function(_1) {
					_gthis.newColumn(sheet.sheet.name,c3[0]);
				};
			})(c));
			cols.append(col);
		}
		var snext = 0;
		var _g5 = 0;
		var _g6 = sheet.sheet.lines.length;
		while(_g5 < _g6) {
			var index = [_g5++];
			var l = [$("<tr>")];
			lines.push(l[0]);
			l[0].data("index",index[0]);
			while(sheet.sheet.separators[snext] == index[0]) ++snext;
			l[0].attr("separatorID",snext - 1);
			var hiddenValue = js_Browser.getLocalStorage().getItem(sheet.getPath() + "#" + index[0] + ":hidden");
			if(hiddenValue == "true") {
				l[0].hide();
			}
			if(sheet.sheet.props.level != null) {
				var c4 = $("<a href='#'>Edit</a>");
				$("<td>").addClass("level-editor-extra-column").append(c4).appendTo(l[0]);
				c4.click((function(l1,index1) {
					return function(_2) {
						l1[0].click();
						var found = null;
						var _g51 = 0;
						var _g61 = _gthis.levels;
						while(_g51 < _g61.length) {
							var l2 = _g61[_g51];
							++_g51;
							if(l2.sheet == sheet && l2.index == index1[0]) {
								found = l2;
							}
						}
						if(found == null) {
							found = new Level(_gthis,sheet,index1[0]);
							_gthis.levels.push(found);
							_gthis.selectLevel(found,true);
						} else {
							_gthis.selectLevel(found);
						}
					};
				})(l,index));
			}
			var head = [$("<td>").addClass("start").text("" + index[0])];
			var tmp1 = (function(head1,index2) {
				return function(e3) {
					if(e3.which == 3) {
						head1[0].click();
						var f1 = $bind(_gthis,_gthis.popupLine);
						var sheet2 = sheet;
						var index3 = index2[0];
						haxe_Timer.delay((function() {
							return function() {
								f1(sheet2,index3);
							};
						})(),1);
						e3.preventDefault();
						return;
					}
				};
			})(head,index);
			l[0].mousedown(tmp1).click((function(index4) {
				return function(e4) {
					if(e4.shiftKey && _gthis.cursor.s == sheet && _gthis.cursor.x < 0) {
						_gthis.cursor.select = { x : -1, y : index4[0]};
						_gthis.updateCursor();
					} else {
						_gthis.setCursor(sheet,-1,index4[0]);
					}
				};
			})(index));
			head[0].appendTo(l[0]);
			var _g52 = 0;
			var _g62 = sheet.sheet.columns.length;
			while(_g52 < _g62) {
				var cindex1 = [_g52++];
				var c5 = [sheet.sheet.columns[cindex1[0]]];
				var ctype = "t_" + types[c5[0].type._hx_index];
				var obj = [sheet.sheet.lines[index[0]]];
				var val = [Reflect.field(obj[0],c5[0].name)];
				var v = [$("<td>").addClass(ctype).addClass("c")];
				v[0].appendTo(l[0]);
				this.updateClasses(v[0],c5[0],val[0]);
				var html = [this.valueHtml(c5[0],val[0],sheet,obj[0])];
				if(html[0] == "&nbsp;") {
					v[0].text(" ");
				} else if(html[0].indexOf("<") < 0 && html[0].indexOf("&") < 0) {
					v[0].text(html[0]);
				} else {
					v[0].html(html[0]);
				}
				v[0].data("index",cindex1[0]);
				var tmp2 = (function(cindex2,index5) {
					return function(e5) {
						if(!inTodo) {
							if(e5.shiftKey && _gthis.cursor.s == sheet) {
								_gthis.cursor.select = { x : cindex2[0], y : index5[0]};
								_gthis.updateCursor();
								e5.stopImmediatePropagation();
							} else {
								_gthis.setCursor(sheet,cindex2[0],index5[0]);
							}
						}
						e5.stopPropagation();
					};
				})(cindex1,index);
				v[0].click(tmp2);
				var set = [(function(html1,v1,val1,obj1,c6,index6) {
					return function(val2) {
						var old = val1[0];
						val1[0] = val2;
						if(val1[0] == null) {
							Reflect.deleteField(obj1[0],c6[0].name);
						} else {
							obj1[0][c6[0].name] = val1[0];
						}
						var set1 = _gthis.valueHtml(c6[0],val1[0],sheet,obj1[0]);
						html1[0] = set1;
						v1[0].html(html1[0]);
						_gthis.changed(sheet,c6[0],index6[0],old);
					};
				})(html,v,val,obj,c5,index)];
				var _g53 = c5[0].type;
				switch(_g53._hx_index) {
				case 7:
					v[0].find("img").addClass("deletable").change((function(obj2,c7) {
						return function(e6) {
							if(Reflect.field(obj2[0],c7[0].name) != null) {
								var op = _gthis.prepSnapshot();
								Reflect.deleteField(obj2[0],c7[0].name);
								_gthis.commitSnapshot(op);
							}
						};
					})(obj,c5)).click((function() {
						return function(e7) {
							$(this).addClass("selected");
							e7.stopPropagation();
						};
					})());
					var tmp3 = (function(v2,c8,index7) {
						return function(_3) {
							_gthis.editCell(c8[0],v2[0],sheet,index7[0]);
						};
					})(v,c5,index);
					v[0].dblclick(tmp3);
					var v3 = v[0];
					var tmp4 = (function(v4,c9,index8) {
						return function(e8) {
							e8.preventDefault();
							e8.stopPropagation();
							if(e8.dataTransfer.files.length > 0) {
								v4[0].dropFile = e8.dataTransfer.files[0].path;
								_gthis.editCell(c9[0],v4[0],sheet,index8[0]);
								v4[0].dropFile = null;
							}
						};
					})(v,c5,index);
					v3[0].addEventListener("drop",tmp4);
					break;
				case 8:
					var key = [sheet.getPath() + "@" + c5[0].name + ":" + index[0]];
					var tmp5 = (function(key1,html2,v5,val3,obj3,c10,cindex3,l3,index9) {
						return function(e9) {
							var next = l3[0].next("tr.list");
							if(next.length > 0) {
								if(next.data("name") == c10[0].name) {
									next.change();
									return;
								}
								next.change();
							}
							next = $("<tr>").addClass("list").data("name",c10[0].name);
							$("<td>").appendTo(next);
							var cell = $("<td>").attr("colspan","" + colCount).appendTo(next);
							var div = $("<div>").appendTo(cell);
							var content1 = $("<table>").appendTo(div);
							var psheet = sheet.base.getSheet(sheet.sheet.name + "@" + c10[0].name);
							if(val3[0] == null) {
								val3[0] = [];
								obj3[0][c10[0].name] = val3[0];
							}
							psheet = new cdb_Sheet(_gthis.base,{ columns : psheet.sheet.columns, props : psheet.sheet.props, name : psheet.sheet.name, lines : val3[0], separators : []},key1[0],{ sheet : sheet, column : cindex3[0], line : index9[0]});
							_gthis.fillTable(content1,psheet);
							next.insertAfter(l3[0]);
							v5[0].text("...");
							v5[0].addClass("opened");
							var _this = _gthis.openedList;
							if(__map_reserved[key1[0]] != null) {
								_this.setReserved(key1[0],true);
							} else {
								_this.h[key1[0]] = true;
							}
							var tmp6 = (function(key2,html3,v6,val4,obj4,c11) {
								return function(e10) {
									if(c11[0].opt && val4[0].length == 0) {
										var op1 = _gthis.prepSnapshot();
										val4[0] = null;
										Reflect.deleteField(obj4[0],c11[0].name);
										_gthis.commitSnapshot(op1);
									}
									var tmp7 = _gthis.valueHtml(c11[0],val4[0],sheet,obj4[0]);
									html3[0] = tmp7;
									v6[0].html(html3[0]);
									v6[0].removeClass("opened");
									next.remove();
									_gthis.openedList.remove(key2[0]);
									e10.stopPropagation();
								};
							})(key1,html2,v5,val3,obj3,c10);
							next.change(tmp6);
							if(inTodo) {
								if(_gthis.cursor.s != null && _gthis.cursor.s.getPath() == psheet.getPath()) {
									_gthis.cursor.s = psheet;
									_gthis.checkCursor = false;
								}
							} else {
								_gthis.setCursor(psheet);
							}
							e9.stopPropagation();
						};
					})(key,html,v,val,obj,c5,cindex1,l,index);
					v[0].click(tmp5);
					var _this1 = this.openedList;
					if(__map_reserved[key[0]] != null ? _this1.getReserved(key[0]) : _this1.h[key[0]]) {
						todo.push((function(v7) {
							return function() {
								v7[0].click();
							};
						})(v));
					}
					break;
				case 12:
					var _g63 = _g53.type;
					break;
				case 13:
					v[0].find("input").addClass("deletable").change((function(obj5,c12) {
						return function(e11) {
							if(Reflect.field(obj5[0],c12[0].name) != null) {
								var op2 = _gthis.prepSnapshot("remove file");
								Reflect.deleteField(obj5[0],c12[0].name);
								_gthis.commitSnapshot(op2);
							}
						};
					})(obj,c5));
					var tmp8 = (function(set2) {
						return function(_4) {
							var tmp9 = (function(set3) {
								return function(path) {
									var op3 = _gthis.prepSnapshot("set file");
									set3[0](path);
									_gthis.commitSnapshot(op3);
								};
							})(set2);
							_gthis.chooseFile(tmp9);
						};
					})(set);
					v[0].dblclick(tmp8);
					var v8 = v[0];
					var tmp10 = (function(set4) {
						return function(e12) {
							if(e12.dataTransfer.files.length > 0) {
								e12.preventDefault();
								e12.stopPropagation();
								var op4 = _gthis.prepSnapshot("set file");
								var path1 = e12.dataTransfer.files[0].path;
								var relPath;
								if(_gthis.prefs.curFile == null) {
									relPath = path1;
								} else {
									var parts = path1.split("\\").join("/").split("/");
									var base = _gthis.prefs.curFile.split("\\").join("/").split("/");
									base.pop();
									while(parts.length > 1 && base.length > 0 && parts[0] == base[0]) {
										parts.shift();
										base.shift();
									}
									if(parts.length == 0 || parts[0] != "" && parts[0].charAt(1) != ":") {
										while(base.length > 0) {
											parts.unshift("..");
											base.pop();
										}
									}
									relPath = parts.join("/");
								}
								set4[0](relPath);
								_gthis.commitSnapshot(op4);
							}
						};
					})(set);
					v8[0].addEventListener("drop",tmp10);
					break;
				case 14:
					v[0].find("div").addClass("deletable").change((function(obj6,c13) {
						return function(e13) {
							if(Reflect.field(obj6[0],c13[0].name) != null) {
								var op5 = _gthis.prepSnapshot("remove tile");
								Reflect.deleteField(obj6[0],c13[0].name);
								_gthis.commitSnapshot(op5);
							}
						};
					})(obj,c5));
					var tmp11 = (function(set5,v9,val5,c14,index10) {
						return function(_5) {
							var rv = val5[0];
							var file = rv == null ? null : rv.file;
							var size = rv == null ? 16 : rv.size;
							var posX = rv == null ? 0 : rv.x;
							var posY = rv == null ? 0 : rv.y;
							var width = rv == null ? null : rv.width;
							var height = rv == null ? null : rv.height;
							if(width == null) {
								width = 1;
							}
							if(height == null) {
								height = 1;
							}
							if(file == null) {
								var i = index10[0] - 1;
								while(i >= 0) {
									var o = sheet.sheet.lines[i--];
									var v21 = Reflect.field(o,c14[0].name);
									if(v21 != null) {
										file = v21.file;
										size = v21.size;
										break;
									}
								}
							}
							var setVal = (function(set6) {
								return function() {
									var v10 = { file : file, size : size, x : posX, y : posY};
									if(width != 1) {
										v10.width = width;
									}
									if(height != 1) {
										v10.height = height;
									}
									set6[0](v10);
								};
							})(set5);
							if(file == null) {
								var tmp12 = (function(v11) {
									return function(path2) {
										file = path2;
										setVal();
										v11[0].dblclick();
									};
								})(v9);
								_gthis.chooseFile(tmp12);
								return;
							}
							var dialog = $($(".tileSelect").parent().html()).prependTo($("body"));
							var maxWidth = 1000000;
							var maxHeight = 1000000;
							dialog.find(".tileView").css({ backgroundImage : "url(\"file://" + _gthis.getAbsPath(file) + "\")"}).mousemove((function() {
								return function(e14) {
									var off = $(this).offset();
									posX = size == 1 ? ((e14.pageX - off.left) / width | 0) * width : (e14.pageX - off.left) / size | 0;
									posY = size == 1 ? ((e14.pageY - off.top) / height | 0) * height : (e14.pageY - off.top) / size | 0;
									if((posX + width) * size > maxWidth) {
										posX = (maxWidth / size | 0) - width;
									}
									if((posY + height) * size > maxHeight) {
										posY = (maxHeight / size | 0) - height;
									}
									if(posX < 0) {
										posX = 0;
									}
									if(posY < 0) {
										posY = 0;
									}
									var tmp13 = size * posX - 1 + "px";
									var tmp14 = size * posY - 1 + "px";
									$(".tileCursor").not(".current").css({ marginLeft : tmp13, marginTop : tmp14});
								};
							})()).click((function() {
								return function(_6) {
									var op6 = _gthis.prepSnapshot();
									setVal();
									dialog.remove();
									_gthis.commitSnapshot(op6);
								};
							})());
							dialog.find("[name=size]").val("" + size).change((function() {
								return function(_7) {
									size = Std.parseInt($(this).val());
									var tmp15 = size * width + "px";
									var tmp16 = size * height + "px";
									$(".tileCursor").css({ width : tmp15, height : tmp16});
									var tmp17 = size * posX - 2 + "px";
									var tmp18 = size * posY - 2 + "px";
									$(".tileCursor.current").css({ marginLeft : tmp17, marginTop : tmp18});
								};
							})()).change();
							dialog.find("[name=width]").val("" + width).change((function() {
								return function(_8) {
									width = Std.parseInt($(this).val());
									var tmp19 = size * width + "px";
									var tmp20 = size * height + "px";
									$(".tileCursor").css({ width : tmp19, height : tmp20});
								};
							})()).change();
							dialog.find("[name=height]").val("" + height).change((function() {
								return function(_9) {
									height = Std.parseInt($(this).val());
									var tmp21 = size * width + "px";
									var tmp22 = size * height + "px";
									$(".tileCursor").css({ width : tmp21, height : tmp22});
								};
							})()).change();
							dialog.find("[name=cancel]").click((function() {
								return function(_10) {
									dialog.remove();
								};
							})());
							dialog.find("[name=file]").click((function(v12) {
								return function(_11) {
									var tmp23 = (function(v13) {
										return function(f2) {
											var op7 = _gthis.prepSnapshot();
											file = f2;
											dialog.remove();
											setVal();
											_gthis.commitSnapshot(op7);
											v13[0].dblclick();
										};
									})(v12);
									_gthis.chooseFile(tmp23);
								};
							})(v9));
							var tmp24 = (function() {
								return function(e15) {
									e15.stopPropagation();
								};
							})();
							dialog.keydown(tmp24).keypress((function() {
								return function(e16) {
									e16.stopPropagation();
								};
							})());
							dialog.show();
							var i1 = window.document.createElement("img");
							i1.onload = (function() {
								return function(_12) {
									maxWidth = i1.width;
									maxHeight = i1.height;
									dialog.find(".tileView").height(i1.height).width(i1.width);
									dialog.find(".tilePath").text(file + " (" + i1.width + "x" + i1.height + ")");
								};
							})();
							var tmp25 = _gthis.getAbsPath(file);
							i1.src = "file://" + tmp25;
						};
					})(set,v,val,c5,index);
					v[0].dblclick(tmp11);
					break;
				case 17:
					var key3 = [sheet.getPath() + "@" + c5[0].name + ":" + index[0]];
					var tmp26 = (function(key4,html4,v14,val6,obj7,c15,cindex4,l4,index11) {
						return function(e17) {
							var next1 = l4[0].next("tr.list");
							if(next1.length > 0) {
								if(next1.data("name") == c15[0].name) {
									next1.change();
									return;
								}
								next1.change();
							}
							next1 = $("<tr>").addClass("list").data("name",c15[0].name);
							$("<td>").appendTo(next1);
							var cell1 = $("<td>").attr("colspan","" + colCount).appendTo(next1);
							var div1 = $("<div>").appendTo(cell1);
							var content2 = $("<table>").addClass("props").appendTo(div1);
							var psheet1 = sheet.base.getSheet(sheet.sheet.name + "@" + c15[0].name);
							if(val6[0] == null) {
								val6[0] = { };
								obj7[0][c15[0].name] = val6[0];
							}
							var _gthis1 = _gthis.base;
							var psheet2 = psheet1.sheet.columns;
							var psheet3 = psheet1.sheet.props;
							var psheet4 = psheet1.sheet.name;
							var _g54 = [];
							var _g64 = 0;
							var _g7 = Reflect.fields(val6[0]);
							while(_g64 < _g7.length) {
								var f3 = _g7[_g64];
								++_g64;
								_g54.push(null);
							}
							psheet1 = new cdb_Sheet(_gthis1,{ columns : psheet2, props : psheet3, name : psheet4, lines : _g54, separators : []},key4[0],{ sheet : sheet, column : cindex4[0], line : index11[0]});
							psheet1.sheet.lines[0] = val6[0];
							_gthis.fillProps(content2,psheet1,val6[0]);
							next1.insertAfter(l4[0]);
							v14[0].text("...");
							v14[0].addClass("opened");
							var _this2 = _gthis.openedList;
							if(__map_reserved[key4[0]] != null) {
								_this2.setReserved(key4[0],true);
							} else {
								_this2.h[key4[0]] = true;
							}
							var tmp27 = (function(key5,html5,v15,val7,obj8,c16) {
								return function(e18) {
									if(c16[0].opt && Reflect.fields(val7[0]).length == 0) {
										var op8 = _gthis.prepSnapshot();
										val7[0] = null;
										Reflect.deleteField(obj8[0],c16[0].name);
										_gthis.commitSnapshot(op8);
									}
									var tmp28 = _gthis.valueHtml(c16[0],val7[0],sheet,obj8[0]);
									html5[0] = tmp28;
									v15[0].html(html5[0]);
									v15[0].removeClass("opened");
									next1.remove();
									_gthis.openedList.remove(key5[0]);
									e18.stopPropagation();
								};
							})(key4,html4,v14,val6,obj7,c15);
							next1.change(tmp27);
							if(inTodo) {
								if(_gthis.cursor.s != null && _gthis.cursor.s.getPath() == psheet1.getPath()) {
									_gthis.cursor.s = psheet1;
									_gthis.checkCursor = false;
								}
							} else {
								_gthis.setCursor(psheet1);
							}
							e17.stopPropagation();
						};
					})(key3,html,v,val,obj,c5,cindex1,l,index);
					v[0].click(tmp26);
					var _this3 = this.openedList;
					if(__map_reserved[key3[0]] != null ? _this3.getReserved(key3[0]) : _this3.h[key3[0]]) {
						todo.push((function(v16) {
							return function() {
								v16[0].click();
							};
						})(v));
					}
					break;
				default:
					var tmp29 = (function(v17,c17,index12) {
						return function(e19) {
							_gthis.editCell(c17[0],v17[0],sheet,index12[0]);
						};
					})(v,c5,index);
					v[0].dblclick(tmp29);
				}
			}
		}
		if(sheet.sheet.lines.length == 0) {
			var l5 = $("<tr><td colspan=\"" + (sheet.sheet.columns.length + 1) + "\"><a href=\"javascript:_.insertLine()\">Insert Row</a></td></tr>");
			l5.find("a").click(function(_13) {
				_gthis.setCursor(sheet);
			});
			lines.push(l5);
		}
		content.empty();
		content.append(cols);
		snext = 0;
		var _g71 = 0;
		var _g8 = lines.length;
		while(_g71 < _g8) {
			var i2 = _g71++;
			while(sheet.sheet.separators[snext] == i2) {
				var sep = $("<tr>").addClass("separator").attr("separatorID",snext);
				sep.append("<td colspan=\"" + (colCount + 1) + "\">").appendTo(content);
				var content3 = [sep.find("td")];
				var title = [sheet.sheet.props.separatorTitles != null ? sheet.sheet.props.separatorTitles[snext] : null];
				if(title[0] != null) {
					content3[0].text(title[0]);
				}
				var pos = [snext];
				sep.dblclick((function(pos1,title1,content4) {
					return function(e20) {
						content4[0].empty();
						var tmp30 = $("<input>");
						var tmp31 = title1[0] == null ? "" : title1[0];
						tmp30.appendTo(content4[0]).focus().val(tmp31).blur((function(pos2,title2,content5) {
							return function(_14) {
								var op9 = _gthis.prepSnapshot();
								var tmp32 = $(this).val();
								title2[0] = tmp32;
								$(this).remove();
								content5[0].text(title2[0]);
								var titles = sheet.sheet.props.separatorTitles;
								if(titles == null) {
									titles = [];
								}
								while(titles.length < pos2[0]) titles.push(null);
								titles[pos2[0]] = title2[0] == "" ? null : title2[0];
								while(titles[titles.length - 1] == null && titles.length > 0) titles.pop();
								if(titles.length == 0) {
									titles = null;
								}
								sheet.sheet.props.separatorTitles = titles;
								_gthis.commitSnapshot(op9);
							};
						})(pos1,title1,content4)).keypress((function() {
							return function(e21) {
								e21.stopPropagation();
							};
						})()).keydown((function(title3,content6) {
							return function(e22) {
								if(e22.keyCode == 13) {
									$(this).blur();
									e22.preventDefault();
								} else if(e22.keyCode == 27) {
									content6[0].text(title3[0]);
								}
								e22.stopPropagation();
							};
						})(title1,content4));
					};
				})(pos,title,content3));
				sep.click((function() {
					return function(e23) {
						var j = $(this);
						var elements = j.parent().find("tr[class!='separator'][separatorID='" + j.attr("separatorID") + "']");
						elements.each((function() {
							return function(i3,e24) {
								if($(e24).css("display") == "none") {
									$(e24).show();
									js_Browser.getLocalStorage().removeItem(sheet.getPath() + "#" + Std.string($(e24).data("index")) + ":hidden");
								} else {
									$(e24).hide();
									js_Browser.getLocalStorage().setItem(sheet.getPath() + "#" + Std.string($(e24).data("index")) + ":hidden","true");
								}
							};
						})());
					};
				})());
				++snext;
			}
			content.append(lines[i2]);
		}
		inTodo = true;
		var _g9 = 0;
		while(_g9 < todo.length) {
			var t1 = todo[_g9];
			++_g9;
			t1();
		}
		inTodo = false;
	}
	,openFile: function(file) {
		js_node_webkit_Shell.openItem(file);
	}
	,setCursor: function(s,x,y,sel,update) {
		if(update == null) {
			update = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.cursor.s = s;
		this.cursor.x = x;
		this.cursor.y = y;
		this.cursor.select = sel;
		var ch = this.cursor.onchange;
		if(ch != null) {
			this.cursor.onchange = null;
			ch();
		}
		console.log("src/Main.hx:2297:","setCursor " + s.sheet.name + " " + x + " " + y + " " + Std.string(sel));
		if(update) {
			this.updateCursor();
		}
	}
	,selectSheet: function(s,manual) {
		if(manual == null) {
			manual = true;
		}
		this.viewSheet = s;
		this.pages.curPage = -1;
		var key = s.sheet.name;
		var _this = this.sheetCursors;
		this.cursor = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(this.cursor == null) {
			this.cursor = { x : 0, y : 0, s : s};
			var key1 = s.sheet.name;
			var value = this.cursor;
			var _this1 = this.sheetCursors;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
		if(manual) {
			if(this.level != null) {
				this.level.dispose();
			}
			this.level = null;
		}
		this.prefs.curSheet = Lambda.indexOf(this.base.sheets,s);
		$("#sheets li").removeClass("active").filter("#sheet_" + this.prefs.curSheet).addClass("active");
		if(manual) {
			this.refresh("Loading " + s.sheet.name + "...");
		}
	}
	,selectLevel: function(l,initContentAfterwards) {
		if(initContentAfterwards == null) {
			initContentAfterwards = false;
		}
		var _gthis = this;
		var nowLoading = window.document.querySelector("#now-loading-text");
		nowLoading.innerText = "Working...";
		nowLoading.className = "";
		window.setTimeout(function() {
			nowLoading.className = "no-display";
			if(_gthis.level != null) {
				_gthis.level.dispose();
			}
			_gthis.pages.curPage = -1;
			_gthis.level = l;
			_gthis.level.init();
			$("#sheets li").removeClass("active").filter("#level_" + l.sheetPath.split(".").join("_") + "_" + l.index).addClass("active");
			if(initContentAfterwards) {
				_gthis.initContent();
			}
		});
	}
	,closeLevel: function(l) {
		l.dispose();
		var i = Lambda.indexOf(this.levels,l);
		HxOverrides.remove(this.levels,l);
		if(this.level == l) {
			this.level = null;
		}
		this.initContent();
	}
	,newSheet: function() {
		var s = $("#newsheet").show();
		s.find("#sheet_name").val("");
		s.find("#sheet_level").removeAttr("checked");
	}
	,deleteColumn: function(sheet,cname) {
		var op = this.prepSnapshot();
		if(cname == null) {
			sheet = this.base.getSheet(this.colProps.sheet);
			cname = this.colProps.ref.name;
		}
		if(!sheet.deleteColumn(cname)) {
			return;
		}
		$("#newcol").hide();
		this.commitSnapshot(op);
	}
	,editTypes: function() {
		var _gthis = this;
		var op = this.prepSnapshot();
		if(this.typesStr == null) {
			var tl = [];
			var _g = 0;
			var _g1 = this.base.getCustomTypes();
			while(_g < _g1.length) {
				var t = _g1[_g];
				++_g;
				tl.push("enum " + t.name + " {\n" + this.base.typeCasesToString(t,"\t") + "\n}");
			}
			this.typesStr = tl.join("\n\n");
		}
		var content = $("#content");
		content.html($("#editTypes").html());
		var text = content.find("textarea");
		var apply = content.find("input.button").first();
		var cancel = content.find("input.button").eq(1);
		var types;
		text.change(function(_) {
			var nstr = text.val();
			if(nstr == _gthis.typesStr) {
				return;
			}
			_gthis.typesStr = nstr;
			var errors = [];
			var t1 = StringTools.trim(_gthis.typesStr);
			var r = new EReg("^enum[ \r\n\t]+([A-Za-z0-9_]+)[ \r\n\t]*\\{([^}]*)\\}","");
			var oldTMap = _gthis.base.tmap;
			var descs = [];
			var tmap = new haxe_ds_StringMap();
			_gthis.base.tmap = tmap;
			types = [];
			while(r.match(t1)) {
				var name = r.matched(1);
				var desc = r.matched(2);
				if((__map_reserved[name] != null ? tmap.getReserved(name) : tmap.h[name]) != null) {
					errors.push("Duplicate type " + name);
				}
				var td = { name : name, cases : []};
				if(__map_reserved[name] != null) {
					tmap.setReserved(name,td);
				} else {
					tmap.h[name] = td;
				}
				descs.push(desc);
				types.push(td);
				t1 = StringTools.trim(r.matchedRight());
			}
			var _g2 = 0;
			while(_g2 < types.length) {
				var t2 = types[_g2];
				++_g2;
				try {
					t2.cases = _gthis.base.parseTypeCases(descs.shift());
				} catch( msg ) {
					errors.push(((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg);
				}
			}
			_gthis.base.tmap = oldTMap;
			if(t1 != "") {
				errors.push("Invalid " + StringTools.htmlEscape(t1));
			}
			_gthis.window.window.alert(errors.length == 0 ? null : errors.join("\n\n"));
			if(errors.length == 0) {
				apply.removeAttr("disabled");
			} else {
				apply.attr("disabled","");
			}
		});
		text.keydown(function(e) {
			if(e.keyCode == 9) {
				e.preventDefault();
				new js_Selection(text[0]).insert("\t","","");
			}
			e.stopPropagation();
		});
		text.keyup(function(e1) {
			text.change();
			e1.stopPropagation();
		});
		text.val(this.typesStr);
		cancel.click(function(_1) {
			_gthis.typesStr = null;
			_gthis.rollbackSnapshot(op);
			_gthis.initContent();
		});
		apply.click(function(_2) {
			var tpairs = _gthis.base.makePairs(_gthis.base.getCustomTypes(),types);
			var _g3 = 0;
			while(_g3 < tpairs.length) {
				var p = tpairs[_g3];
				++_g3;
				if(p.b == null) {
					var t3 = p.a;
					var _g4 = 0;
					var _g11 = _gthis.base.sheets;
					while(_g4 < _g11.length) {
						var s = _g11[_g4];
						++_g4;
						var _g5 = 0;
						var _g12 = s.sheet.columns;
						while(_g5 < _g12.length) {
							var c = _g12[_g5];
							++_g5;
							var _g6 = c.type;
							if(_g6._hx_index == 9) {
								var name1 = _g6.name;
								if(name1 == t3.name) {
									_gthis.error("Type " + name1 + " used by " + s.sheet.name + "@" + c.name + " cannot be removed");
									return;
								}
							}
						}
					}
				}
			}
			var _g13 = 0;
			while(_g13 < types.length) {
				var t4 = [types[_g13]];
				++_g13;
				if(!Lambda.exists(tpairs,(function(t5) {
					return function(p1) {
						return p1.b == t5[0];
					};
				})(t4))) {
					_gthis.base.getCustomTypes().push(t4[0]);
				}
			}
			var _g21 = 0;
			while(_g21 < tpairs.length) {
				var p2 = tpairs[_g21];
				++_g21;
				if(p2.b == null) {
					HxOverrides.remove(_gthis.base.getCustomTypes(),p2.a);
				} else {
					try {
						_gthis.base.updateType(p2.a,p2.b);
					} catch( msg1 ) {
						var msg2 = ((msg1) instanceof js__$Boot_HaxeError) ? msg1.val : msg1;
						if(typeof(msg2) == "string") {
							_gthis.error("Error while updating " + p2.b.name + " : " + msg2);
							return;
						} else {
							throw msg1;
						}
					}
				}
			}
			_gthis.initContent();
			_gthis.commitSnapshot(op);
			_gthis.typesStr = null;
		});
		this.typesStr = null;
		text.change();
	}
	,newColumn: function(sheetName,ref,index) {
		var form = $("#newcol form");
		this.colProps = { sheet : sheetName, ref : ref, index : index};
		var sheets = $("[name=sheet]");
		sheets.empty();
		var _g = 0;
		var _g1 = this.base.sheets.length;
		while(_g < _g1) {
			var i = _g++;
			var s = this.base.sheets[i];
			if(s.sheet.props.hide) {
				continue;
			}
			$("<option>").attr("value","" + i).text(s.sheet.name).appendTo(sheets);
		}
		var types = $("[name=ctype]");
		types.empty();
		types.off("change");
		types.change(function(_) {
			$("#col_options").toggleClass("t_edit",types.val() != "");
		});
		$("<option>").attr("value","").text("--- Select ---").appendTo(types);
		var _g2 = 0;
		var _g3 = this.base.getCustomTypes();
		while(_g2 < _g3.length) {
			var t = _g3[_g2];
			++_g2;
			$("<option>").attr("value","" + t.name).text(t.name).appendTo(types);
		}
		form.removeClass("edit").removeClass("create");
		if(ref != null) {
			form.addClass("edit");
			form.find("[name=name]").val(ref.name);
			var tmp = form.find("[name=type]");
			var e = ref.type;
			tmp.val(HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index],1,null).toLowerCase()).change();
			form.find("[name=req]").prop("checked",!ref.opt);
			var tmp1 = ref.display == null ? "0" : Std.string(ref.display);
			form.find("[name=display]").val(tmp1);
			form.find("[name=localizable]").prop("checked",ref.kind == "localizable");
			var _g4 = ref.type;
			switch(_g4._hx_index) {
			case 5:
				var values = _g4.values;
				form.find("[name=values]").val(values.join(","));
				break;
			case 6:
				var sname = _g4.sheet;
				form.find("[name=sheet]").val("" + this.base.sheets.indexOf(this.base.getSheet(sname)));
				break;
			case 9:
				var name = _g4.name;
				form.find("[name=ctype]").val(name);
				break;
			case 10:
				var values1 = _g4.values;
				form.find("[name=values]").val(values1.join(","));
				break;
			case 12:
				var sname1 = _g4.type;
				form.find("[name=sheet]").val("" + this.base.sheets.indexOf(this.base.getSheet(sname1)));
				break;
			default:
			}
		} else {
			form.addClass("create");
			form.find("input").not("[type=submit]").val("");
			form.find("[name=req]").prop("checked",true);
			form.find("[name=localizable]").prop("checked",false);
		}
		types.change();
		$("#newcol").show();
	}
	,newLine: function(sheet,index) {
		var op = this.prepSnapshot();
		sheet.newLine(index);
		this.commitSnapshot(op);
	}
	,insertLine: function() {
		if(this.cursor.s != null) {
			this.newLine(this.cursor.s);
		}
	}
	,createSheet: function(name,level) {
		var op = this.prepSnapshot();
		name = StringTools.trim(name);
		if(!this.base.r_ident.match(name)) {
			this.error("Invalid sheet name");
			return;
		}
		var s = this.base.createSheet(name);
		if(s == null) {
			this.error("Sheet name already in use");
			return;
		}
		$("#newsheet").hide();
		this.prefs.curSheet = this.base.sheets.length - 1;
		s.sync();
		if(level) {
			this.initLevel(s);
		}
		this.initContent();
		this.commitSnapshot(op);
	}
	,initLevel: function(s) {
		var cols = [{ n : "id", t : cdb_ColumnType.TId},{ n : "width", t : cdb_ColumnType.TInt},{ n : "height", t : cdb_ColumnType.TInt},{ n : "props", t : cdb_ColumnType.TDynamic},{ n : "tileProps", t : cdb_ColumnType.TList},{ n : "layers", t : cdb_ColumnType.TList}];
		var _g = 0;
		while(_g < cols.length) {
			var c = cols[_g];
			++_g;
			if(s.hasColumn(c.n)) {
				if(!s.hasColumn(c.n,[c.t])) {
					this.error("Column " + c.n + " already exists but does not have type " + Std.string(c.t));
					return;
				}
			} else {
				var col = { name : c.n, type : c.t, typeStr : null};
				s.addColumn(col);
				if(c.n == "layers") {
					var s1 = s.base.getSheet(s.sheet.name + "@" + col.name);
					s1.addColumn({ name : "name", type : cdb_ColumnType.TString, typeStr : null});
					s1.addColumn({ name : "data", type : cdb_ColumnType.TTileLayer, typeStr : null});
				}
			}
		}
		if(s.sheet.props.level == null) {
			s.sheet.props.level = { tileSets : { }};
		}
		if(s.sheet.lines.length == 0 && s.parent == null) {
			var o = s.newLine();
			o.width = 128;
			o.height = 128;
		}
	}
	,createColumn: function() {
		var op = this.prepSnapshot();
		var v = { };
		var cols = $("#col_form input, #col_form select").not("[type=submit]");
		var _g_i = 0;
		var _g_j = cols;
		while(_g_i < _g_j.length) {
			var i = $(_g_j[_g_i++]);
			v[i.attr("name")] = i.attr("type") == "checkbox" ? i.is(":checked") ? "on" : null : i.val();
		}
		var sheet = this.colProps.sheet == null ? this.viewSheet : this.base.getSheet(this.colProps.sheet);
		var refColumn = this.colProps.ref;
		var t;
		switch(v.type) {
		case "bool":
			t = cdb_ColumnType.TBool;
			break;
		case "color":
			t = cdb_ColumnType.TColor;
			break;
		case "custom":
			var t1 = this.base.getCustomType(v.ctype);
			if(t1 == null) {
				this.error("Type not found");
				return;
			}
			t = cdb_ColumnType.TCustom(t1.name);
			break;
		case "dynamic":
			t = cdb_ColumnType.TDynamic;
			break;
		case "enum":
			var vals = StringTools.trim(v.values).split(",");
			if(vals.length == 0) {
				this.error("Missing value list");
				return;
			}
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vals.length) {
				var f = vals[_g2];
				++_g2;
				_g1.push(StringTools.trim(f));
			}
			t = cdb_ColumnType.TEnum(_g1);
			break;
		case "file":
			t = cdb_ColumnType.TFile;
			break;
		case "flags":
			var vals1 = StringTools.trim(v.values).split(",");
			if(vals1.length == 0) {
				this.error("Missing value list");
				return;
			}
			var _g11 = [];
			var _g21 = 0;
			while(_g21 < vals1.length) {
				var f1 = vals1[_g21];
				++_g21;
				_g11.push(StringTools.trim(f1));
			}
			t = cdb_ColumnType.TFlags(_g11);
			break;
		case "float":
			t = cdb_ColumnType.TFloat;
			break;
		case "id":
			t = cdb_ColumnType.TId;
			break;
		case "image":
			t = cdb_ColumnType.TImage;
			break;
		case "int":
			t = cdb_ColumnType.TInt;
			break;
		case "layer":
			var s = this.base.sheets[Std.parseInt(v.sheet)];
			if(s == null) {
				this.error("Sheet not found");
				return;
			}
			t = cdb_ColumnType.TLayer(s.sheet.name);
			break;
		case "list":
			t = cdb_ColumnType.TList;
			break;
		case "properties":
			t = cdb_ColumnType.TProperties;
			break;
		case "ref":
			var s1 = this.base.sheets[Std.parseInt(v.sheet)];
			if(s1 == null) {
				this.error("Sheet not found");
				return;
			}
			t = cdb_ColumnType.TRef(s1.sheet.name);
			break;
		case "string":
			t = cdb_ColumnType.TString;
			break;
		case "tilelayer":
			t = cdb_ColumnType.TTileLayer;
			break;
		case "tilepos":
			t = cdb_ColumnType.TTilePos;
			break;
		default:
			return;
		}
		var c = { type : t, typeStr : null, name : v.name};
		if(v.req != "on") {
			c.opt = true;
		}
		if(v.display != "0") {
			c.display = Std.parseInt(v.display);
		}
		if(v.localizable == "on") {
			c.kind = "localizable";
		}
		if(refColumn != null) {
			var err = this.base.updateColumn(sheet,refColumn,c);
			if(err != null) {
				this.commitSnapshot(op);
				this.error(err);
				return;
			}
		} else {
			var err1 = sheet.addColumn(c,this.colProps.index);
			if(err1 != null) {
				this.error(err1);
				return;
			}
			if(sheet.sheet.props.isProps && this.cursor.s.sheet.columns == sheet.sheet.columns) {
				var obj = this.cursor.s.sheet.lines[0];
				if(obj != null) {
					obj[c.name] = this.base.getDefault(c,true);
				}
			}
		}
		$("#newcol").hide();
		var _g2_i = 0;
		var _g2_j = cols;
		while(_g2_i < _g2_j.length) {
			var c1 = $(_g2_j[_g2_i++]);
			c1.val("");
		}
		this.commitSnapshot(op);
	}
	,initContent: function() {
		var _gthis = this;
		$("body").spectrum.clearAll();
		var sheets = $("ul#sheets");
		sheets.children().remove();
		var _g = 0;
		var _g1 = this.base.sheets.length;
		while(_g < _g1) {
			var i = _g++;
			var s = [this.base.sheets[i]];
			if(s[0].sheet.props.hide) {
				continue;
			}
			var li = [$("<li>")];
			li[0].attr("title",s[0].sheet.name);
			li[0].text(s[0].sheet.name).attr("id","sheet_" + i).appendTo(sheets).click((function(s1) {
				return function(_) {
					_gthis.selectSheet(s1[0]);
				};
			})(s)).dblclick((function(li1,s2) {
				return function(_1) {
					li1[0].empty();
					$("<input>").val(s2[0].sheet.name).appendTo(li1[0]).focus().blur((function(li2,s3) {
						return function(_2) {
							li2[0].text(s3[0].sheet.name);
							var name = $(this).val();
							if(!_gthis.base.r_ident.match(name)) {
								_gthis.error("Invalid sheet name");
								return;
							}
							var f = _gthis.base.getSheet(name);
							if(f != null) {
								if(f != s3[0]) {
									_gthis.error("Sheet name already in use");
								}
								return;
							}
							var op = _gthis.prepSnapshot("rename sheet");
							var old = s3[0].sheet.name;
							s3[0].rename(name);
							_gthis.base.mapType((function() {
								return function(t) {
									switch(t._hx_index) {
									case 6:
										var o = t.sheet;
										if(o == old) {
											return cdb_ColumnType.TRef(name);
										} else {
											return t;
										}
										break;
									case 12:
										var o1 = t.type;
										if(o1 == old) {
											return cdb_ColumnType.TLayer(name);
										} else {
											return t;
										}
										break;
									default:
										return t;
									}
								};
							})());
							var _g2 = 0;
							var _g11 = _gthis.base.sheets;
							while(_g2 < _g11.length) {
								var s4 = _g11[_g2];
								++_g2;
								if(StringTools.startsWith(s4.sheet.name,old + "@")) {
									s4.rename(name + "@" + HxOverrides.substr(s4.sheet.name,old.length + 1,null));
								}
							}
							_gthis.initContent();
							_gthis.commitSnapshot(op);
						};
					})(li1,s2)).keydown((function() {
						return function(e) {
							if(e.keyCode == 13) {
								$(this).blur();
							} else if(e.keyCode == 27) {
								_gthis.initContent();
							}
							e.stopPropagation();
						};
					})()).keypress((function() {
						return function(e1) {
							e1.stopPropagation();
						};
					})());
				};
			})(li,s)).mousedown((function(li3,s5) {
				return function(e2) {
					if(e2.which == 3) {
						var f1 = $bind(_gthis,_gthis.popupSheet);
						var s6 = s5[0];
						var li4 = li3[0];
						haxe_Timer.delay((function() {
							return function() {
								f1(s6,li4);
							};
						})(),1);
						e2.stopPropagation();
					}
				};
			})(li,s));
		}
		this.pages.updateTabs();
		var s7 = this.base.sheets[this.prefs.curSheet];
		if(s7 == null) {
			s7 = this.base.sheets[0];
		}
		if(s7 != null) {
			this.selectSheet(s7,false);
		}
		var old1 = this.levels;
		var lcur = null;
		this.levels = [];
		var _g21 = 0;
		while(_g21 < old1.length) {
			var level = old1[_g21];
			++_g21;
			if(this.base.getSheet(level.sheetPath) == null) {
				continue;
			}
			var s8 = this.base.getSheet(level.sheetPath);
			if(s8.sheet.lines.length < level.index) {
				continue;
			}
			var l = [new Level(this,s8,level.index)];
			if(level == this.level) {
				lcur = l[0];
			}
			this.levels.push(l[0]);
			var li5 = $("<li>");
			var name1 = level.getName();
			if(name1 == "") {
				name1 = "???";
			}
			li5.text(name1).attr("id","level_" + l[0].sheetPath.split(".").join("_") + "_" + l[0].index).appendTo(sheets).click((function(l1) {
				return function(_3) {
					_gthis.selectLevel(l1[0]);
				};
			})(l));
		}
		if(this.pages.curPage >= 0) {
			this.pages.select();
		} else if(lcur != null) {
			this.selectLevel(lcur);
		} else if(this.base.sheets.length == 0) {
			$("#content").html("<a href='javascript:_.newSheet()'>Create a sheet</a>");
		} else {
			this.refresh();
		}
	}
	,doUndo: function() {
		this.opStack.undo();
		this.initContent();
	}
	,doRedo: function() {
		this.opStack.redo();
		this.initContent();
	}
	,initMenu: function() {
		var _gthis = this;
		var modifier = "ctrl";
		var menu = new js_node_webkit_Menu({ type : "menubar"});
		if(Sys.systemName().indexOf("Mac") != -1) {
			modifier = "cmd";
		}
		var mfile = new js_node_webkit_MenuItem({ label : "File"});
		var mfiles = new js_node_webkit_Menu();
		var mnew = new js_node_webkit_MenuItem({ label : "New", key : "N", modifiers : modifier});
		var mopen = new js_node_webkit_MenuItem({ label : "Open...", key : "O", modifiers : modifier});
		var mrecent = new js_node_webkit_MenuItem({ label : "Recent Files"});
		var msave = new js_node_webkit_MenuItem({ label : "Save", key : "S", modifiers : modifier});
		var msaveas = new js_node_webkit_MenuItem({ label : "Save As...", key : "S", modifiers : "shift+" + modifier});
		var msaveasmonofile = new js_node_webkit_MenuItem({ label : "Export Legacy Monofile..."});
		var mreload = new js_node_webkit_MenuItem({ label : "Reload From Disk", key : "F5"});
		var mclean = new js_node_webkit_MenuItem({ label : "Clean Images"});
		var mexport = new js_node_webkit_MenuItem({ label : "Export Localized texts"});
		this.mcompress = new js_node_webkit_MenuItem({ label : "Enable Compression", type : "checkbox"});
		this.mcompress.click = function() {
			_gthis.base.set_compress(_gthis.mcompress.checked);
		};
		var mexit = new js_node_webkit_MenuItem({ label : "Exit", key : "Q", modifiers : modifier});
		mnew.click = function() {
			_gthis.prefs.curFile = null;
			_gthis.load(true);
		};
		mopen.click = function() {
			var i = $("<input>").attr("type","file").css("display","none").change(function(e) {
				var j = $(this);
				_gthis.prefs.curFile = j.val();
				_gthis.load();
				j.remove();
			});
			i.appendTo($("body"));
			i.click();
		};
		msave.click = function() {
			if(_gthis.prefs.curFile == "" || _gthis.prefs.curFile == null) {
				msaveas.click();
			} else {
				_gthis.save();
			}
		};
		msaveas.click = function() {
			var i1 = $("<input>").attr("type","file").attr("nwsaveas","new.cdb").css("display","none").change(function(e1) {
				var j1 = $(this);
				_gthis.prefs.curFile = j1.val();
				_gthis.save();
				j1.remove();
			});
			i1.appendTo($("body"));
			i1.click();
		};
		msaveasmonofile.click = function() {
			var i2 = $("<input>").attr("type","file").attr("nwsaveas","monofile.cdb").css("display","none").change(function(e2) {
				var j2 = $(this);
				js_node_Fs.writeFileSync(j2.val(),_gthis.base.saveMonofileLegacyFormat());
				j2.remove();
			});
			i2.appendTo($("body"));
			i2.click();
		};
		mreload.click = function() {
			var doReload = true;
			if(_gthis.opStack.hasUnsavedChanges()) {
				doReload = _gthis.window.window.confirm("There are unsaved changes.\nReload anyway?");
			}
			if(doReload) {
				_gthis.load();
			}
		};
		mclean.click = function() {
			var op = _gthis.prepSnapshot();
			var lcount = _gthis.base.cleanLayers();
			var icount = 0;
			if(_gthis.imageBank != null) {
				var count = Reflect.fields(_gthis.imageBank).length;
				_gthis.cleanImages();
				var count2 = Reflect.fields(_gthis.imageBank).length;
				icount = count - count2;
				if(count2 == 0) {
					_gthis.imageBank = null;
				}
			}
			var tmp = [lcount + " tileset data removed",icount + " unused images removed"].join("\n");
			_gthis.error(tmp);
			_gthis.refresh();
			if(lcount > 0) {
				_gthis.commitSnapshot(op);
			}
			if(icount > 0) {
				_gthis.saveImages();
			}
		};
		mexit.click = function() {
			process.exit(0);
		};
		var mrecents = new js_node_webkit_Menu();
		var _g = 0;
		var _g1 = this.prefs.recent;
		while(_g < _g1.length) {
			var file = [_g1[_g]];
			++_g;
			if(file[0] == null) {
				continue;
			}
			var m = new js_node_webkit_MenuItem({ label : file[0]});
			m.click = (function(file1) {
				return function() {
					_gthis.prefs.curFile = file1[0];
					_gthis.load();
				};
			})(file);
			mrecents.append(m);
		}
		mrecent.submenu = mrecents;
		var msep = new js_node_webkit_MenuItem({ type : "separator"});
		var m1 = mnew;
		mfiles.append(m1);
		var m2 = msep;
		mfiles.append(m2);
		var m3 = mopen;
		mfiles.append(m3);
		var m4 = mrecent;
		mfiles.append(m4);
		var m5 = msep;
		mfiles.append(m5);
		var m6 = msave;
		mfiles.append(m6);
		var m7 = msaveas;
		mfiles.append(m7);
		var m8 = msaveasmonofile;
		mfiles.append(m8);
		var m9 = msep;
		mfiles.append(m9);
		var m10 = mreload;
		mfiles.append(m10);
		var m11 = msep;
		mfiles.append(m11);
		var m12 = mclean;
		mfiles.append(m12);
		var m13 = this.mcompress;
		mfiles.append(m13);
		var m14 = mexport;
		mfiles.append(m14);
		var m15 = msep;
		mfiles.append(m15);
		var m16 = mexit;
		mfiles.append(m16);
		mfile.submenu = mfiles;
		mexport.click = function() {
			var lang = new cdb_Lang(_gthis.base.data);
			var xml = lang.buildXML();
			var i3 = $("<input>").attr("type","file").attr("nwsaveas","export.xml").css("display","none").change(function(e3) {
				var j3 = $(this);
				var file2 = j3.val();
				js_node_Fs.writeFileSync(file2,String.fromCodePoint(65279) + xml);
				j3.remove();
			});
			i3.appendTo($("body"));
			i3.click();
		};
		var mi_edit = new js_node_webkit_MenuItem({ label : "Edit"});
		var m_edit = new js_node_webkit_Menu();
		mi_edit.submenu = m_edit;
		var mi_undo = new js_node_webkit_MenuItem({ label : "Undo", key : "Z", modifiers : modifier});
		mi_undo.click = function() {
			if(_gthis.pages.curPage < 0) {
				_gthis.doUndo();
			}
		};
		var mi_redo = new js_node_webkit_MenuItem({ label : "Redo", key : "Y", modifiers : modifier});
		mi_redo.click = function() {
			if(_gthis.pages.curPage < 0) {
				_gthis.doRedo();
			}
		};
		var mi_cut = new js_node_webkit_MenuItem({ label : "Cut", key : "X", modifiers : modifier});
		mi_cut.click = function() {
			if(_gthis.isInCDB()) {
				_gthis.doCopy();
				_gthis.doDeleteSelectedRow();
			}
		};
		var mi_copy = new js_node_webkit_MenuItem({ label : "Copy", key : "C", modifiers : modifier});
		mi_copy.click = function() {
			if(_gthis.isInCDB()) {
				_gthis.doCopy();
			}
		};
		var mi_paste = new js_node_webkit_MenuItem({ label : "Paste", key : "V", modifiers : modifier});
		mi_paste.click = function() {
			if(_gthis.isInCDB()) {
				_gthis.doPaste();
			}
		};
		var mi_find = new js_node_webkit_MenuItem({ label : "Find", key : "F", modifiers : modifier});
		mi_find.click = function() {
			if(!_gthis.isInCDB()) {
				return;
			}
			var s = $("#search");
			s.show();
			s.find("input").focus().select();
		};
		var mi = mi_undo;
		m_edit.append(mi);
		var mi1 = mi_redo;
		m_edit.append(mi1);
		var mi2 = msep;
		m_edit.append(mi2);
		var mi3 = mi_cut;
		m_edit.append(mi3);
		var mi4 = mi_copy;
		m_edit.append(mi4);
		var mi5 = mi_paste;
		m_edit.append(mi5);
		var mi6 = msep;
		m_edit.append(mi6);
		var mi7 = mi_find;
		m_edit.append(mi7);
		this.editMenu = m_edit;
		var mi_sheet = new js_node_webkit_MenuItem({ label : "Sheet"});
		var m_sheet = new js_node_webkit_Menu();
		mi_sheet.submenu = m_sheet;
		var mi_newSheet = new js_node_webkit_MenuItem({ label : "New Sheet..."});
		mi_newSheet.click = $bind(this,this.newSheet);
		var mi_newColumn = new js_node_webkit_MenuItem({ label : "New Column..."});
		mi_newColumn.click = function() {
			_gthis.newColumn();
		};
		var mi_newRow = new js_node_webkit_MenuItem({ label : "New Row", key : "Insert"});
		mi_newRow.click = function() {
			if(!_gthis.isInCDB()) {
				return;
			}
			if(_gthis.cursor.s == null) {
				return;
			}
			_gthis.newLine(_gthis.cursor.s,_gthis.cursor.y);
			_gthis.moveCursor(0,1,false,false);
		};
		var mi_ref1 = new js_node_webkit_MenuItem({ label : "Show References", key : "F3"});
		mi_ref1.click = function() {
			if(_gthis.isInCDB() && _gthis.cursor.s != null) {
				_gthis.showReferences(_gthis.cursor.s,_gthis.cursor.y);
			}
		};
		var mi_ref2 = new js_node_webkit_MenuItem({ label : "Go To Reference", key : "F4"});
		mi_ref2.click = function() {
			if(_gthis.isInCDB()) {
				_gthis.openTableReferencedBySelectedCell();
			}
		};
		var goToNextSheet = function(delta) {
			var _g2 = [];
			var _g11 = 0;
			var _g21 = _gthis.base.sheets;
			while(_g11 < _g21.length) {
				var v = _g21[_g11];
				++_g11;
				if(!v.sheet.props.hide) {
					_g2.push(v);
				}
			}
			var sheets = _g2;
			var pos = (_gthis.level == null ? Lambda.indexOf(sheets,_gthis.viewSheet) : sheets.length + Lambda.indexOf(_gthis.levels,_gthis.level)) + delta;
			if(pos == -1) {
				pos = sheets.length + _gthis.levels.length;
			}
			var s1 = sheets[pos % (sheets.length + _gthis.levels.length)];
			if(s1 != null) {
				_gthis.selectSheet(s1);
			} else {
				var level = _gthis.levels[pos - sheets.length];
				if(level != null) {
					_gthis.selectLevel(level);
				}
			}
		};
		var mi_nextSheet = new js_node_webkit_MenuItem({ label : "Next Sheet", key : "Tab", modifiers : modifier});
		mi_nextSheet.click = function() {
			goToNextSheet(1);
		};
		var mi_prevSheet = new js_node_webkit_MenuItem({ label : "Previous Sheet", key : "Tab", modifiers : modifier + "+shift"});
		mi_prevSheet.click = function() {
			goToNextSheet(-1);
		};
		var mi8 = mi_newSheet;
		m_sheet.append(mi8);
		var mi9 = mi_newColumn;
		m_sheet.append(mi9);
		var mi10 = mi_newRow;
		m_sheet.append(mi10);
		var mi11 = msep;
		m_sheet.append(mi11);
		var mi12 = mi_ref1;
		m_sheet.append(mi12);
		var mi13 = mi_ref2;
		m_sheet.append(mi13);
		var mi14 = msep;
		m_sheet.append(mi14);
		var mi15 = mi_nextSheet;
		m_sheet.append(mi15);
		var mi16 = mi_prevSheet;
		m_sheet.append(mi16);
		this.window.zoomLevel = this.prefs.zoomLevel;
		var mi_view = new js_node_webkit_MenuItem({ label : "View"});
		var m_view = new js_node_webkit_Menu();
		mi_view.submenu = m_view;
		var mi_collapseAllSeparator = new js_node_webkit_MenuItem({ label : "Collapse All Categories"});
		mi_collapseAllSeparator.click = function() {
			var j4 = $("#content").find("tr[class!='separator'][class!='head']");
			var sheetPath = $("#content").find("table").attr("sheet");
			console.log("src/Main.hx:3032:",j4);
			j4.each(function(i4,e4) {
				if($(e4).css("display") != "none") {
					$(e4).hide();
					js_Browser.getLocalStorage().setItem(sheetPath + "#" + Std.string($(e4).data("index")) + ":hidden","true");
				}
			});
		};
		m_view.append(mi_collapseAllSeparator);
		var mi_uncollapseAllSeparator = new js_node_webkit_MenuItem({ label : "Uncollapse All Categories"});
		mi_uncollapseAllSeparator.click = function() {
			var j5 = $("#content").find("tr[class!='separator'][class!='head']");
			var sheetPath1 = $("#content").find("table").attr("sheet");
			j5.each(function(i5,e5) {
				if($(e5).css("display") == "none") {
					$(e5).show();
					js_Browser.getLocalStorage().removeItem(sheetPath1 + "#" + Std.string($(e5).data("index")) + ":hidden");
				}
			});
		};
		m_view.append(mi_uncollapseAllSeparator);
		var mi_hideListPreviews = new js_node_webkit_MenuItem({ label : "Hide List Previews", type : "checkbox"});
		mi_hideListPreviews.checked = this.prefs.hideListPreviews;
		mi_hideListPreviews.click = function() {
			_gthis.prefs.hideListPreviews = !_gthis.prefs.hideListPreviews;
			mi_hideListPreviews.checked = _gthis.prefs.hideListPreviews;
			_gthis.refresh();
		};
		m_view.append(mi_hideListPreviews);
		var mi_hideInlineIcons = new js_node_webkit_MenuItem({ label : "Hide Inline Icons", type : "checkbox"});
		mi_hideInlineIcons.checked = this.prefs.hideInlineIcons;
		mi_hideInlineIcons.click = function() {
			_gthis.prefs.hideInlineIcons = !_gthis.prefs.hideInlineIcons;
			mi_hideInlineIcons.checked = _gthis.prefs.hideInlineIcons;
			_gthis.refresh();
		};
		m_view.append(mi_hideInlineIcons);
		m_view.append(new js_node_webkit_MenuItem({ type : "separator"}));
		var mi_zoomLevels_h = { };
		var _g22 = -4;
		while(_g22 < 7) {
			var i6 = [_g22++];
			var mi_zoom_n = [new js_node_webkit_MenuItem({ label : "Zoom " + Math.round(Math.pow(1.2,i6[0]) * 100) + "%", type : "checkbox"})];
			mi_zoom_n[0].click = (function(mi_zoom_n1,i7) {
				return function() {
					if(mi_zoomLevels_h.hasOwnProperty(_gthis.window.zoomLevel)) {
						mi_zoomLevels_h[_gthis.window.zoomLevel].checked = false;
					}
					_gthis.window.zoomLevel = i7[0];
					mi_zoom_n1[0].checked = true;
					_gthis.prefs.zoomLevel = _gthis.window.zoomLevel;
					_gthis.savePrefs();
				};
			})(mi_zoom_n,i6);
			m_view.append(mi_zoom_n[0]);
			mi_zoomLevels_h[i6[0]] = mi_zoom_n[0];
		}
		if(mi_zoomLevels_h.hasOwnProperty(this.window.zoomLevel)) {
			mi_zoomLevels_h[this.window.zoomLevel].checked = true;
		}
		if(Sys.systemName().indexOf("Mac") != -1) {
			menu.createMacBuiltin("CastleDB",{ hideEdit : false, hideWindow : true});
			menu.removeAt(0);
			this.macEditMenu = menu.items[0];
			menu.removeAt(0);
			menu.insert(mfile,0);
		} else {
			menu.append(mfile);
			menu.append(mi_edit);
			menu.append(mi_view);
			menu.append(mi_sheet);
		}
		this.window.menu = menu;
		if(this.prefs.windowPos.x > 0 && this.prefs.windowPos.y > 0) {
			this.window.moveTo(this.prefs.windowPos.x,this.prefs.windowPos.y);
		}
		if(this.prefs.windowPos.w > 50 && this.prefs.windowPos.h > 50) {
			this.window.resizeTo(this.prefs.windowPos.w,this.prefs.windowPos.h);
		}
		this.window.show();
		if(this.prefs.windowPos.max) {
			this.window.maximize();
		}
		this.window.on("close",function() {
			if(_gthis.opStack.hasUnsavedChanges()) {
				if(!window.confirm("Quit without saving changes?")) {
					return;
				}
			}
			if(!_gthis.prefs.windowPos.max) {
				_gthis.prefs.windowPos = { x : _gthis.window.x, y : _gthis.window.y, w : _gthis.window.width, h : _gthis.window.height, max : false};
			}
			_gthis.savePrefs();
			_gthis.window.close(true);
		});
		this.window.on("maximize",function() {
			_gthis.prefs.windowPos.max = true;
		});
		this.window.on("unmaximize",function() {
			_gthis.prefs.windowPos.max = false;
		});
	}
	,load: function(noError) {
		if(noError == null) {
			noError = false;
		}
		if(sys_FileSystem.exists(this.prefs.curFile + ".mine") && !Resolver.resolveConflict(this.prefs.curFile)) {
			this.error("CDB file has unresolved conflict, merge by hand before reloading.");
			return;
		}
		Model.prototype.load.call(this,noError);
		this.initContent();
		HxOverrides.remove(this.prefs.recent,this.prefs.curFile);
		if(this.prefs.curFile != null) {
			this.prefs.recent.unshift(this.prefs.curFile);
		}
		if(this.prefs.recent.length > 8) {
			this.prefs.recent.pop();
		}
		this.mcompress.checked = this.base.data.compress;
	}
	,removeFileWatcher: function() {
		var _g = 0;
		var _g1 = this.fileWatchers;
		while(_g < _g1.length) {
			var watcher = _g1[_g];
			++_g;
			watcher.close();
		}
		this.fileWatchers = [];
		if(this.currentSyncCallback != null) {
			window.clearTimeout(this.currentSyncCallback);
			this.currentSyncCallback = null;
		}
	}
	,installFileWatcher: function() {
		var _gthis = this;
		this.removeFileWatcher();
		if(this.base.get_isMultifile()) {
			this.fileWatchers.push(js_node_Fs.watch(cdb_MultifileLoadSave.getBaseDir(this.prefs.curFile),{ persistent : true, recursive : true},function(change,path) {
				_gthis.onFileWatcherChange(change,path);
				return;
			}));
		}
		this.fileWatchers.push(js_node_Fs.watch(this.prefs.curFile,{ persistent : true, recursive : false},function(change1,path1) {
			_gthis.onFileWatcherChange(change1,path1);
			return;
		}));
	}
	,onFileWatcherChange: function(change,path) {
		var _gthis = this;
		if(change == null || change == "") {
			return;
		}
		if(this.currentSyncCallback != null) {
			window.clearTimeout(this.currentSyncCallback);
		}
		var nowLoading = window.document.querySelector("#now-loading-text");
		nowLoading.className = "";
		nowLoading.innerText = "Need resync: " + path;
		this.currentSyncCallback = window.setTimeout(function() {
			nowLoading.className = "no-display";
			var doReload = true;
			if(_gthis.opStack.hasUnsavedChanges()) {
				doReload = _gthis.window.window.confirm("The DB was modified by an external program, but you had unsaved changes.\nReload anyway?");
			}
			if(doReload) {
				_gthis.load();
				_gthis.refresh("Synchronizing...");
			}
			window.setTimeout(function() {
				return _gthis.currentSyncCallback = null;
			});
		},2500);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Operation = function() { };
$hxClasses["Operation"] = Operation;
Operation.__name__ = "Operation";
Operation.__isInterface__ = true;
Operation.prototype = {
	__class__: Operation
};
var OperationStack = function(context) {
	this.stack = [];
	this.context = context;
	this.cursor = 0;
	this.savePoint = 0;
};
$hxClasses["OperationStack"] = OperationStack;
OperationStack.__name__ = "OperationStack";
OperationStack.prototype = {
	push: function(op) {
		this.pushNoApply(op);
		op.apply(this.context);
		this.context.refresh();
		return op;
	}
	,pushNoApply: function(op) {
		if(this.cursor <= this.stack.length - 1) {
			this.stack.length = this.cursor;
			console.log("src/OperationStack.hx:37:","nuking redo");
		}
		var c = js_Boot.getClass(op);
		console.log("src/OperationStack.hx:40:","Push operation: " + c.__name__);
		console.log("src/OperationStack.hx:41:","opened list: " + this.context.openedList.toString());
		this.stack.push(op);
		this.cursor++;
		this.checkSavePoint();
		return op;
	}
	,undo: function() {
		if(this.cursor <= 0) {
			console.log("src/OperationStack.hx:53:","can't undo");
			return;
		}
		this.cursor--;
		this.checkSavePoint();
		this.stack[this.cursor].rollback(this.context);
	}
	,redo: function() {
		if(this.cursor >= this.stack.length) {
			console.log("src/OperationStack.hx:66:","can't redo");
			return;
		}
		this.stack[this.cursor].apply(this.context);
		this.cursor++;
		this.checkSavePoint();
	}
	,removeLastOp: function(op) {
		if(this.stack.length > 0 && this.stack[this.stack.length - 1] == op) {
			this.stack.pop();
			this.cursor--;
			this.checkSavePoint();
		} else {
			console.log("src/OperationStack.hx:82:","can't remove last op");
		}
	}
	,checkSavePoint: function(forceQueryTag) {
		if(forceQueryTag == null) {
			forceQueryTag = false;
		}
		if(this.savePoint != this.cursor) {
			this.context.window.title = "[*] CastleDB: " + this.context.prefs.curFile;
			if(this.unsavedCSSLinkTag == null) {
				this.unsavedCSSLinkTag = window.document.createElement("link");
				this.unsavedCSSLinkTag.id = "unsavedstylesheet";
				this.unsavedCSSLinkTag.rel = "stylesheet";
				this.unsavedCSSLinkTag.type = "text/css";
				this.unsavedCSSLinkTag.href = "unsaved.css";
				window.document.body.appendChild(this.unsavedCSSLinkTag);
			}
		} else {
			this.context.window.title = "CastleDB: " + this.context.prefs.curFile;
			var tagToNuke = this.unsavedCSSLinkTag;
			if(tagToNuke == null && forceQueryTag) {
				tagToNuke = window.document.getElementById("unsavedstylesheet");
			}
			if(tagToNuke != null) {
				window.document.body.removeChild(tagToNuke);
			}
			this.unsavedCSSLinkTag = null;
		}
	}
	,setSavePointHere: function() {
		this.savePoint = this.cursor;
		this.checkSavePoint(true);
	}
	,hasUnsavedChanges: function() {
		return this.savePoint != this.cursor;
	}
	,__class__: OperationStack
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Resolver = function() {
	this.hasError = false;
};
$hxClasses["Resolver"] = Resolver;
Resolver.__name__ = "Resolver";
Resolver.resolveConflict = function(file) {
	return new Resolver().check(file);
};
Resolver.prototype = {
	check: function(file) {
		var minRev = 0;
		var maxRev = 0;
		var basePath = file.split("\\").join("/").split("/").pop();
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync(HxOverrides.substr(file,0,-basePath.length));
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(StringTools.startsWith(f,basePath + ".r")) {
				var rev = Std.parseInt(HxOverrides.substr(f,basePath.length + 2,null));
				if(minRev == 0 || minRev > rev) {
					minRev = rev;
				}
				if(maxRev == 0 || maxRev < rev) {
					maxRev = rev;
				}
			}
		}
		var merged = js_node_Fs.readFileSync(file,{ encoding : "utf8"}).split("<<<<<<< .mine");
		if(merged.length == 1) {
			return true;
		}
		var endConflict = new EReg(">>>>>>> \\.r[0-9]+[\r\n]+","");
		var _g2 = 1;
		var _g3 = merged.length;
		while(_g2 < _g3) {
			var i = _g2++;
			endConflict.match(merged[i]);
			merged[i] = endConflict.matchedLeft().split("=======").shift() + endConflict.matchedRight();
		}
		var mine = JSON.parse(merged.join(""));
		var origin = JSON.parse(js_node_Fs.readFileSync(file + ".r" + minRev,{ encoding : "utf8"}));
		var other = JSON.parse(js_node_Fs.readFileSync(file + ".r" + maxRev,{ encoding : "utf8"}));
		this.hasError = false;
		try {
			this.resolveRec(mine,origin,other,[]);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				this.error(e1);
				this.hasError = true;
			} else {
				throw e;
			}
		}
		if(this.hasError) {
			return false;
		}
		try {
			js_node_Fs.writeFileSync(process.env["TEMP"] + "/" + basePath + ".merged" + minRev + "_" + maxRev,js_node_Fs.readFileSync(file,{ encoding : "utf8"}));
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
		}
		js_node_Fs.writeFileSync(file,JSON.stringify(other,null,"\t"));
		js_node_Fs.unlinkSync(file + ".mine");
		js_node_Fs.unlinkSync(file + ".r" + minRev);
		js_node_Fs.unlinkSync(file + ".r" + maxRev);
		return true;
	}
	,resolveError: function(message,path) {
		this.error(message + "\n  in\n" + path.join("."));
		this.hasError = true;
	}
	,resolveRec: function(mine,origin,other,path) {
		if(mine == origin || mine == other) {
			return other;
		}
		if(other == origin) {
			return mine;
		}
		if(((mine) instanceof Array)) {
			var target = other;
			if(origin == null) {
				origin = [];
				if(target == null) {
					other = [];
					target = other;
				}
			} else if(target == null) {
				target = [];
			} else if(other.length != mine.length) {
				this.resolveError("Array resize conflict",path);
			}
			var _g = 0;
			var _g1 = mine.length;
			while(_g < _g1) {
				var i = _g++;
				var mv = mine[i];
				var name = Reflect.field(mv,"id");
				if(name == null) {
					name = Reflect.field(mv,"name");
				}
				path.push(typeof(name) == "string" ? name + "#" + i : "[" + i + "]");
				target[i] = this.resolveRec(mv,origin[i],target[i],path);
				path.pop();
			}
		} else if(Reflect.isObject(mine) && typeof(mine) != "string") {
			var target1 = other;
			if(origin == null) {
				origin = { };
				if(other == null) {
					other = { };
					target1 = other;
				}
			} else if(target1 == null) {
				target1 = { };
			}
			var _g2 = 0;
			var _g11 = Reflect.fields(target1);
			while(_g2 < _g11.length) {
				var f = _g11[_g2];
				++_g2;
				if(!Object.prototype.hasOwnProperty.call(mine,f)) {
					mine[f] = null;
				}
			}
			var _g21 = 0;
			var _g3 = Reflect.fields(mine);
			while(_g21 < _g3.length) {
				var f1 = _g3[_g21];
				++_g21;
				path.push(f1);
				target1[f1] = this.resolveRec(Reflect.field(mine,f1),Reflect.field(origin,f1),Reflect.field(target1,f1),path);
				path.pop();
			}
		} else {
			if(typeof(mine) == "string" && typeof(other) == "string") {
				try {
					var dorigin = cdb_Lz4Reader.decodeString(origin);
					var dmine = cdb_Lz4Reader.decodeString(mine);
					var dother = cdb_Lz4Reader.decodeString(other);
					if(dorigin.length != dmine.length || dorigin.length != dother.length) {
						throw new js__$Boot_HaxeError("resized");
					}
					var _g4 = 0;
					var _g12 = dorigin.length;
					while(_g4 < _g12) {
						var i1 = _g4++;
						var mine1 = dmine.b[i1];
						var origin1 = dorigin.b[i1];
						var other1 = dother.b[i1];
						if(mine1 == origin1 || mine1 == other1) {
							continue;
						}
						if(other1 == origin1) {
							dother.b[i1] = mine1;
						} else {
							throw new js__$Boot_HaxeError("conflict");
						}
					}
					return cdb_Lz4Reader.encodeBytes(dother,other.substr(0,5) == "BCJNG");
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				}
			}
			var display = function(v) {
				var str = Std.string(v);
				if(str.length > 50) {
					str = HxOverrides.substr(str,0,50) + "...";
				}
				return str;
			};
			var r = window.confirm("A conflict has been found in " + path.join(".") + "\nOrigin = " + display(origin) + "    Mine = " + display(mine) + "    Other = " + display(other) + "\nDo you want to keep your changes (OK) or discard them (CANCEL) ?\n\n");
			if(!window.confirm("Are you sure ?")) {
				throw new js__$Boot_HaxeError("Resolve aborted");
			}
			if(r) {
				other = mine;
			}
		}
		return other;
	}
	,error: function(msg) {
		window.alert(Std.string(msg));
	}
	,__class__: Resolver
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[i + 1]=="x" || x[i + 1]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Sys = function() { };
$hxClasses["Sys"] = Sys;
Sys.__name__ = "Sys";
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		var other = _g;
		return other;
	}
};
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileOutput"] = _$Sys_FileOutput;
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
$hxClasses["_Sys.FileInput"] = _$Sys_FileInput;
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var cdb_ColumnType = $hxEnums["cdb.ColumnType"] = { __ename__ : "cdb.ColumnType", __constructs__ : ["TId","TString","TBool","TInt","TFloat","TEnum","TRef","TImage","TList","TCustom","TFlags","TColor","TLayer","TFile","TTilePos","TTileLayer","TDynamic","TProperties"]
	,TId: {_hx_index:0,__enum__:"cdb.ColumnType",toString:$estr}
	,TString: {_hx_index:1,__enum__:"cdb.ColumnType",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"cdb.ColumnType",toString:$estr}
	,TInt: {_hx_index:3,__enum__:"cdb.ColumnType",toString:$estr}
	,TFloat: {_hx_index:4,__enum__:"cdb.ColumnType",toString:$estr}
	,TEnum: ($_=function(values) { return {_hx_index:5,values:values,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["values"],$_)
	,TRef: ($_=function(sheet) { return {_hx_index:6,sheet:sheet,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["sheet"],$_)
	,TImage: {_hx_index:7,__enum__:"cdb.ColumnType",toString:$estr}
	,TList: {_hx_index:8,__enum__:"cdb.ColumnType",toString:$estr}
	,TCustom: ($_=function(name) { return {_hx_index:9,name:name,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["name"],$_)
	,TFlags: ($_=function(values) { return {_hx_index:10,values:values,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["values"],$_)
	,TColor: {_hx_index:11,__enum__:"cdb.ColumnType",toString:$estr}
	,TLayer: ($_=function(type) { return {_hx_index:12,type:type,__enum__:"cdb.ColumnType",toString:$estr}; },$_.__params__ = ["type"],$_)
	,TFile: {_hx_index:13,__enum__:"cdb.ColumnType",toString:$estr}
	,TTilePos: {_hx_index:14,__enum__:"cdb.ColumnType",toString:$estr}
	,TTileLayer: {_hx_index:15,__enum__:"cdb.ColumnType",toString:$estr}
	,TDynamic: {_hx_index:16,__enum__:"cdb.ColumnType",toString:$estr}
	,TProperties: {_hx_index:17,__enum__:"cdb.ColumnType",toString:$estr}
};
var cdb__$Data_TileMode_$Impl_$ = {};
$hxClasses["cdb._Data.TileMode_Impl_"] = cdb__$Data_TileMode_$Impl_$;
cdb__$Data_TileMode_$Impl_$.__name__ = "cdb._Data.TileMode_Impl_";
cdb__$Data_TileMode_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
cdb__$Data_TileMode_$Impl_$.ofString = function(s) {
	return cdb__$Data_TileMode_$Impl_$._new(s);
};
cdb__$Data_TileMode_$Impl_$.toString = function(this1) {
	return this1;
};
var cdb_Database = function() {
	this.r_ident = new EReg("^[A-Za-z_][A-Za-z0-9_]*$","");
	this.data = { sheets : [], customTypes : [], compress : false};
	this.sheets = [];
	this.sync();
};
$hxClasses["cdb.Database"] = cdb_Database;
cdb_Database.__name__ = "cdb.Database";
cdb_Database.nestedSheetToHTMLPath = function(pos) {
	var path = pos[0].col;
	var _g = 1;
	var _g1 = pos.length;
	while(_g < _g1) {
		var i = _g++;
		path += "@" + pos[i].col + ":" + pos[i - 1].col;
	}
	return path;
};
cdb_Database.prototype = {
	get_isMultifile: function() {
		return this.data.format == cdb_MultifileLoadSave.MULTIFILE_FORMAT;
	}
	,get_compress: function() {
		return this.data.compress;
	}
	,set_compress: function(b) {
		if(this.data.compress == b) {
			return b;
		}
		this.data.compress = b;
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = s.sheet.columns;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				var _g3 = c.type;
				switch(_g3._hx_index) {
				case 12:
					var _g12 = _g3.type;
					var _g4 = 0;
					var _g13 = s.getLines();
					while(_g4 < _g13.length) {
						var obj = _g13[_g4];
						++_g4;
						var ldat = Reflect.field(obj,c.name);
						if(ldat == null || ldat == "") {
							continue;
						}
						var _g5 = [];
						var _g14 = 0;
						while(_g14 < 256) {
							var i = _g14++;
							_g5.push(i);
						}
						var d = cdb__$Types_Layer_$Impl_$.decode(ldat,_g5);
						ldat = cdb__$Types_Layer_$Impl_$.encode(d,this.data.compress);
						obj[c.name] = ldat;
					}
					break;
				case 15:
					var _g6 = 0;
					var _g15 = s.getLines();
					while(_g6 < _g15.length) {
						var obj1 = _g15[_g6];
						++_g6;
						var ldat1 = Reflect.field(obj1,c.name);
						if(ldat1 == null || ldat1 == "") {
							continue;
						}
						var d1 = cdb__$Types_TileLayerData_$Impl_$.decode(ldat1.data);
						ldat1["data"] = cdb__$Types_TileLayerData_$Impl_$.encode(d1,this.data.compress);
					}
					break;
				default:
				}
			}
		}
		return b;
	}
	,getCustomType: function(name) {
		var _this = this.tmap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getSheet: function(name) {
		var _this = this.smap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getNestedRow: function(pos) {
		return this._getNestedSheetAndRow(pos)[1];
	}
	,getNestedSheetRowArray: function(pos) {
		return this._getNestedSheetAndRow(pos)[0];
	}
	,_getNestedSheetAndRow: function(pos) {
		var subtable = this.getSheet(pos[0].col).sheet.lines;
		var row = subtable[pos[0].row];
		var _g = 1;
		var _g1 = pos.length;
		while(_g < _g1) {
			var i = _g++;
			subtable = Reflect.field(row,pos[i].col);
			row = subtable[pos[i].row];
		}
		return [subtable,row];
	}
	,createSheet: function(name,index) {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.sheet.name == name) {
				return null;
			}
		}
		var s1 = { name : name, columns : [], lines : [], separators : [], props : { }};
		return this.addSheet(s1,index);
	}
	,moveSheet: function(s,delta) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sheets;
		while(_g1 < _g2.length) {
			var s1 = _g2[_g1];
			++_g1;
			if(!s1.sheet.props.hide) {
				_g.push(s1);
			}
		}
		var fsheets = _g;
		var index = fsheets.indexOf(s);
		var other = fsheets[index + delta];
		if(index < 0 || other == null) {
			return false;
		}
		HxOverrides.remove(this.sheets,s);
		index = this.sheets.indexOf(other);
		if(delta > 0) {
			++index;
		}
		this.sheets.splice(index,0,s);
		var moved = [s];
		var delta1 = 0;
		var _g3 = 0;
		var _g4 = this.sheets.slice();
		while(_g3 < _g4.length) {
			var ssub = _g4[_g3];
			++_g3;
			var parent = ssub.getParent();
			if(parent != null && moved.indexOf(parent.s) >= 0) {
				HxOverrides.remove(this.sheets,ssub);
				var idx = this.sheets.indexOf(s) + ++delta1;
				this.sheets.splice(idx,0,ssub);
				moved.push(ssub);
			}
		}
		this.updateSheets();
		return true;
	}
	,addSheet: function(s,index) {
		var sobj = new cdb_Sheet(this,s);
		if(index != null) {
			this.data.sheets.splice(index,0,s);
		} else {
			this.data.sheets.push(s);
		}
		sobj.sync();
		if(index != null) {
			this.sheets.splice(index,0,sobj);
		} else {
			this.sheets.push(sobj);
		}
		return sobj;
	}
	,createSubSheet: function(parent,c) {
		var s = { name : parent.sheet.name + "@" + c.name, props : { hide : true}, separators : [], lines : [], columns : []};
		if(c.type == cdb_ColumnType.TProperties) {
			s.props.isProps = true;
		}
		var index = this.data.sheets.indexOf(Lambda.find(this.data.sheets,function(s1) {
			return s1.name == parent.sheet.name;
		}));
		var _g = 0;
		var _g1 = parent.sheet.columns;
		while(_g < _g1.length) {
			var c2 = _g1[_g];
			++_g;
			if(c == c2) {
				break;
			}
			var tmp;
			switch(c2.type._hx_index) {
			case 8:case 17:
				tmp = true;
				break;
			default:
				tmp = false;
			}
			if(tmp) {
				var sub = parent.base.getSheet(parent.sheet.name + "@" + c2.name);
				index = this.data.sheets.indexOf(sub.sheet);
			}
		}
		return this.addSheet(s,index < 0 ? null : index + 1);
	}
	,sync: function() {
		this.smap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.sync();
		}
		this.tmap = new haxe_ds_StringMap();
		var _g2 = 0;
		var _g3 = this.data.customTypes;
		while(_g2 < _g3.length) {
			var t = _g3[_g2];
			++_g2;
			var key = t.name;
			var _this = this.tmap;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,t);
			} else {
				_this.h[key] = t;
			}
		}
	}
	,getCustomTypes: function() {
		return this.data.customTypes;
	}
	,loadFrom: function(rootCDBPath) {
		var data = cdb_Parser.parseFrom(rootCDBPath,true);
		this.loadData(data);
	}
	,loadJson: function(content) {
		var data = cdb_Parser.parseJson(content,true);
		this.loadData(data);
	}
	,loadData: function(data) {
		this.data = data;
		if(this.sheets != null) {
			var _g = 0;
			var _g1 = this.sheets;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				s.base = null;
				s.index = null;
				s.sheet = null;
			}
		}
		var _g2 = [];
		var _g11 = 0;
		var _g21 = data.sheets;
		while(_g11 < _g21.length) {
			var s1 = _g21[_g11];
			++_g11;
			_g2.push(new cdb_Sheet(this,s1));
		}
		this.sheets = _g2;
		var _g3 = 0;
		var _g4 = this.sheets;
		while(_g3 < _g4.length) {
			var s2 = _g4[_g3];
			++_g3;
			if(s2.sheet.props.hasIndex) {
				var lines = s2.getLines();
				var _g31 = 0;
				var _g41 = lines.length;
				while(_g31 < _g41) {
					var i = _g31++;
					Reflect.deleteField(lines[i],"index");
				}
			}
		}
		this.sync();
	}
	,cleanup: function() {
		this.cleanLayers();
	}
	,cleanLayers: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.sheet.props.level == null) {
				continue;
			}
			var ts = s.sheet.props.level.tileSets;
			var usedLayers = new haxe_ds_StringMap();
			var _g2 = 0;
			var _g11 = s.sheet.columns;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				if(c.type._hx_index == 8) {
					var sub = s.base.getSheet(s.sheet.name + "@" + c.name);
					if(!sub.hasColumn("data",[cdb_ColumnType.TTileLayer])) {
						continue;
					}
					var _g3 = 0;
					var _g12 = sub.getLines();
					while(_g3 < _g12.length) {
						var obj = _g12[_g3];
						++_g3;
						var v = obj.data;
						if(v == null || v.file == null) {
							continue;
						}
						var key = v.file;
						if(__map_reserved[key] != null) {
							usedLayers.setReserved(key,true);
						} else {
							usedLayers.h[key] = true;
						}
					}
				}
			}
			var _g21 = 0;
			var _g31 = Reflect.fields(ts);
			while(_g21 < _g31.length) {
				var f = _g31[_g21];
				++_g21;
				if(!(__map_reserved[f] != null ? usedLayers.getReserved(f) : usedLayers.h[f])) {
					Reflect.deleteField(ts,f);
					++count;
				}
			}
		}
		return count;
	}
	,prepForSaving: function() {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = Reflect.fields(s.sheet.props);
			while(_g2 < _g11.length) {
				var p = _g11[_g2];
				++_g2;
				var v = Reflect.field(s.sheet.props,p);
				if(v == null || v == false) {
					Reflect.deleteField(s.sheet.props,p);
				}
			}
			if(s.sheet.props.hasGroup) {
				var lines = s.getLines();
				var gid = 0;
				var sindex = 0;
				var titles = s.sheet.props.separatorTitles;
				if(titles != null) {
					while(s.sheet.separators[sindex] == 0 && titles[sindex] != null) ++sindex;
					var _g21 = 0;
					var _g3 = lines.length;
					while(_g21 < _g3) {
						var i = _g21++;
						while(s.sheet.separators[sindex] == i) {
							if(titles[sindex] != null) {
								++gid;
							}
							++sindex;
						}
						lines[i].group = gid;
					}
				}
			}
		}
	}
	,saveMonofileLegacyFormat: function() {
		this.prepForSaving();
		return cdb_Parser.saveMonofile(this.data,false,true);
	}
	,saveMultifile: function(outPath) {
		this.prepForSaving();
		cdb_Parser.saveMultifile(this.data,outPath);
	}
	,getDefault: function(c,ignoreOpt,sheet) {
		if(ignoreOpt == null) {
			ignoreOpt = false;
		}
		if(c.opt && !ignoreOpt) {
			return null;
		}
		var _g = c.type;
		switch(_g._hx_index) {
		case 2:
			if(c.opt) {
				return true;
			} else {
				return false;
			}
			break;
		case 3:case 4:case 11:
			return 0;
		case 5:
			var _g1 = _g.values;
			return 0;
		case 6:
			var s = _g.sheet;
			var s1 = this.getSheet(s);
			var l = s1.sheet.lines[0];
			var id = "";
			if(l != null) {
				var _g2 = 0;
				var _g11 = s1.sheet.columns;
				while(_g2 < _g11.length) {
					var c1 = _g11[_g2];
					++_g2;
					if(c1.type == cdb_ColumnType.TId) {
						id = Reflect.field(l,c1.name);
						break;
					}
				}
			}
			return id;
		case 8:
			return [];
		case 9:
			var _g21 = _g.name;
			return null;
		case 10:
			var _g4 = _g.values;
			return 0;
		case 12:
			var _g3 = _g.type;
			return "";
		case 0:case 1:case 7:case 13:
			return "";
		case 14:case 15:case 16:
			return null;
		case 17:
			var obj = { };
			if(sheet != null) {
				var s2 = sheet.base.getSheet(sheet.sheet.name + "@" + c.name);
				var _g5 = 0;
				var _g12 = s2.sheet.columns;
				while(_g5 < _g12.length) {
					var c2 = _g12[_g5];
					++_g5;
					if(!c2.opt) {
						var def = this.getDefault(c2,null,s2);
						if(def != null) {
							obj[c2.name] = def;
						}
					}
				}
			}
			return obj;
		}
	}
	,typeStr: function(t) {
		switch(t._hx_index) {
		case 6:
			var n = t.sheet;
			return n;
		case 9:
			var n1 = t.name;
			return n1;
		default:
			return HxOverrides.substr(Std.string(t),1,null);
		}
	}
	,updateColumn: function(sheet,old,c) {
		if(old.name != c.name) {
			var _g = 0;
			var _g1 = sheet.sheet.columns;
			while(_g < _g1.length) {
				var c2 = _g1[_g];
				++_g;
				if(c2.name == c.name) {
					return "Column name already used";
				}
			}
			if(c.name == "index" && sheet.sheet.props.hasIndex) {
				return "Sheet already has an index";
			}
			if(c.name == "group" && sheet.sheet.props.hasGroup) {
				return "Sheet already has a group";
			}
			var _g2 = 0;
			var _g3 = sheet.getLines();
			while(_g2 < _g3.length) {
				var o = _g3[_g2];
				++_g2;
				var v = Reflect.field(o,old.name);
				Reflect.deleteField(o,old.name);
				if(v != null) {
					o[c.name] = v;
				}
			}
			var renameRec = null;
			renameRec = function(sheet1,col) {
				var s = sheet1.base.getSheet(sheet1.sheet.name + "@" + col.name);
				s.rename(sheet1.sheet.name + "@" + c.name);
				var _g4 = 0;
				var _g5 = s.sheet.columns;
				while(_g4 < _g5.length) {
					var c1 = _g5[_g4];
					++_g4;
					if(c1.type == cdb_ColumnType.TList || c1.type == cdb_ColumnType.TProperties) {
						renameRec(s,c1);
					}
				}
				s.sync();
			};
			if(old.type == cdb_ColumnType.TList || old.type == cdb_ColumnType.TProperties) {
				renameRec(sheet,old);
			}
			old.name = c.name;
		}
		if(!Type.enumEq(old.type,c.type)) {
			var conv = this.getConvFunction(old.type,c.type);
			if(conv == null) {
				return "Cannot convert " + this.typeStr(old.type) + " to " + this.typeStr(c.type);
			}
			var conv1 = conv.f;
			if(conv1 != null) {
				var _g6 = 0;
				var _g11 = sheet.getLines();
				while(_g6 < _g11.length) {
					var o1 = _g11[_g6];
					++_g6;
					var v1 = Reflect.field(o1,c.name);
					if(v1 != null) {
						v1 = conv1(v1);
						if(v1 != null) {
							o1[c.name] = v1;
						} else {
							Reflect.deleteField(o1,c.name);
						}
					}
				}
			}
			old.type = c.type;
			old.typeStr = null;
		}
		if(old.opt != c.opt) {
			if(old.opt) {
				var _g7 = 0;
				var _g12 = sheet.getLines();
				while(_g7 < _g12.length) {
					var o2 = _g12[_g7];
					++_g7;
					var v2 = Reflect.field(o2,c.name);
					if(v2 == null) {
						v2 = this.getDefault(c,null,sheet);
						if(v2 != null) {
							o2[c.name] = v2;
						}
					}
				}
			} else {
				var _g8 = old.type;
				if(_g8._hx_index == 5) {
					var _g13 = _g8.values;
				} else {
					var def = this.getDefault(old,null,sheet);
					var _g9 = 0;
					var _g14 = sheet.getLines();
					while(_g9 < _g14.length) {
						var o3 = _g14[_g9];
						++_g9;
						var v3 = Reflect.field(o3,c.name);
						switch(c.type._hx_index) {
						case 8:
							var v4 = v3;
							if(v4.length == 0) {
								Reflect.deleteField(o3,c.name);
							}
							break;
						case 17:
							if(Reflect.fields(v3).length == 0 || JSON.stringify(v3) == JSON.stringify(def)) {
								Reflect.deleteField(o3,c.name);
							}
							break;
						default:
							if(v3 == def) {
								Reflect.deleteField(o3,c.name);
							}
						}
					}
				}
			}
			old.opt = c.opt;
		}
		if(c.display == null) {
			Reflect.deleteField(old,"display");
		} else {
			old.display = c.display;
		}
		if(c.kind == null) {
			Reflect.deleteField(old,"kind");
		} else {
			old.kind = c.kind;
		}
		sheet.sync();
		return null;
	}
	,makePairs: function(oldA,newA) {
		var pairs = [];
		var oldL = Lambda.list(oldA);
		var newL = Lambda.list(newA);
		var _g = 0;
		while(_g < oldA.length) {
			var a = oldA[_g];
			++_g;
			var _g_head = newL.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var b = val;
				if(a.name == b.name) {
					pairs.push({ a : a, b : b});
					oldL.remove(a);
					newL.remove(b);
					break;
				}
			}
		}
		var _g1_head = oldL.h;
		while(_g1_head != null) {
			var val1 = _g1_head.item;
			_g1_head = _g1_head.next;
			var a1 = val1;
			var _g1_head1 = newL.h;
			while(_g1_head1 != null) {
				var val2 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var b1 = val2;
				if(Lambda.indexOf(oldA,a1) == Lambda.indexOf(newA,b1)) {
					pairs.push({ a : a1, b : b1});
					oldL.remove(a1);
					newL.remove(b1);
					break;
				}
			}
		}
		var _g2_head = oldL.h;
		while(_g2_head != null) {
			var val3 = _g2_head.item;
			_g2_head = _g2_head.next;
			var a2 = val3;
			pairs.push({ a : a2, b : null});
		}
		return pairs;
	}
	,getConvFunction: function(old,t) {
		var conv = null;
		if(Type.enumEq(old,t)) {
			return { f : null};
		}
		switch(old._hx_index) {
		case 0:
			if(t._hx_index != 1) {
				return null;
			}
			break;
		case 1:
			switch(t._hx_index) {
			case 0:
				var r_invalid_r = new RegExp("[^A-Za-z0-9_]","g".split("u").join(""));
				conv = function(r) {
					return r.replace(r_invalid_r,"_");
				};
				break;
			case 2:
				conv = function(s) {
					return s != "";
				};
				break;
			case 3:
				conv = Std.parseInt;
				break;
			case 4:
				conv = function(str) {
					var f = parseFloat(str);
					if(isNaN(f)) {
						return null;
					} else {
						return f;
					}
				};
				break;
			case 5:
				var values = t.values;
				var map = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = values.length;
				while(_g < _g1) {
					var i = _g++;
					var key = values[i].toLowerCase();
					if(__map_reserved[key] != null) {
						map.setReserved(key,i);
					} else {
						map.h[key] = i;
					}
				}
				conv = function(s1) {
					var key1 = s1.toLowerCase();
					return __map_reserved[key1] != null ? map.getReserved(key1) : map.h[key1];
				};
				break;
			case 6:
				var _g6 = t.sheet;
				var r_invalid_r1 = new RegExp("[^A-Za-z0-9_]","g".split("u").join(""));
				conv = function(r1) {
					return r1.replace(r_invalid_r1,"_");
				};
				break;
			case 12:
				var _g5 = t.type;
				var r_invalid_r2 = new RegExp("[^A-Za-z0-9_]","g".split("u").join(""));
				conv = function(r2) {
					return r2.replace(r_invalid_r2,"_");
				};
				break;
			default:
				return null;
			}
			break;
		case 2:
			switch(t._hx_index) {
			case 1:
				conv = Std.string;
				break;
			case 3:case 4:
				conv = function(b) {
					if(b) {
						return 1;
					} else {
						return 0;
					}
				};
				break;
			default:
				return null;
			}
			break;
		case 3:
			switch(t._hx_index) {
			case 1:
				conv = Std.string;
				break;
			case 2:
				conv = function(v) {
					return v != 0;
				};
				break;
			case 4:
				break;
			case 5:
				var values1 = t.values;
				conv = function(i1) {
					if(i1 < 0 || i1 >= values1.length) {
						return null;
					} else {
						return i1;
					}
				};
				break;
			case 11:
				conv = function(i2) {
					return i2;
				};
				break;
			default:
				return null;
			}
			break;
		case 4:
			switch(t._hx_index) {
			case 1:
				conv = Std.string;
				break;
			case 2:
				conv = function(v1) {
					return v1 != 0;
				};
				break;
			case 3:
				conv = function(v2) {
					return v2 | 0;
				};
				break;
			default:
				return null;
			}
			break;
		case 5:
			var _g2 = old.values;
			switch(t._hx_index) {
			case 1:
				var values2 = _g2;
				conv = function(i3) {
					return values2[i3];
				};
				break;
			case 3:
				var values3 = _g2;
				break;
			case 5:
				var values11 = _g2;
				var values21 = t.values;
				var map1 = [];
				var _g61 = 0;
				var _g3 = [];
				var _g11 = 0;
				var _g21 = values11.length;
				while(_g11 < _g21) {
					var i4 = _g11++;
					_g3.push({ name : values11[i4], i : i4});
				}
				var _g7 = _g3;
				var _g31 = [];
				var _g4 = 0;
				var _g51 = values21.length;
				while(_g4 < _g51) {
					var i5 = _g4++;
					_g31.push({ name : values21[i5], i : i5});
				}
				var _g71 = this.makePairs(_g7,_g31);
				while(_g61 < _g71.length) {
					var p = _g71[_g61];
					++_g61;
					if(p.b == null) {
						continue;
					}
					map1[p.a.i] = p.b.i;
				}
				conv = function(i6) {
					return map1[i6];
				};
				break;
			case 10:
				var val1 = _g2;
				var val2 = t.values;
				if(Std.string(val1) == Std.string(val2)) {
					conv = function(i7) {
						return 1 << i7;
					};
				} else {
					return null;
				}
				break;
			default:
				return null;
			}
			break;
		case 6:
			var _g10 = old.sheet;
			if(t._hx_index != 1) {
				return null;
			}
			break;
		case 8:
			if(t._hx_index == 17) {
				conv = function(l) {
					return l[0];
				};
			} else {
				return null;
			}
			break;
		case 10:
			var _g72 = old.values;
			switch(t._hx_index) {
			case 3:
				var values4 = _g72;
				break;
			case 10:
				var values12 = _g72;
				var values22 = t.values;
				var map2 = [];
				var _g62 = 0;
				var _g8 = [];
				var _g12 = 0;
				var _g22 = values12.length;
				while(_g12 < _g22) {
					var i8 = _g12++;
					_g8.push({ name : values12[i8], i : i8});
				}
				var _g73 = _g8;
				var _g32 = [];
				var _g41 = 0;
				var _g52 = values22.length;
				while(_g41 < _g52) {
					var i9 = _g41++;
					_g32.push({ name : values22[i9], i : i9});
				}
				var _g74 = this.makePairs(_g73,_g32);
				while(_g62 < _g74.length) {
					var p1 = _g74[_g62];
					++_g62;
					if(p1.b == null) {
						continue;
					}
					map2[p1.a.i] = p1.b.i;
				}
				conv = function(i10) {
					var out = 0;
					var k = 0;
					while(i10 >= 1 << k) {
						if(map2[k] != null && (i10 & 1 << k) != 0) {
							out |= 1 << map2[k];
						}
						++k;
					}
					return out;
				};
				break;
			default:
				return null;
			}
			break;
		case 11:
			if(t._hx_index == 3) {
				conv = function(i11) {
					return i11;
				};
			} else {
				return null;
			}
			break;
		case 12:
			var _g33 = old.type;
			if(t._hx_index != 1) {
				return null;
			}
			break;
		case 17:
			if(t._hx_index == 8) {
				conv = function(p2) {
					if(Reflect.fields(p2).length == 0) {
						return [];
					} else {
						return [p2];
					}
				};
			} else {
				return null;
			}
			break;
		default:
			return null;
		}
		return { f : conv};
	}
	,updateType: function(old,t) {
		var _gthis = this;
		var casesPairs = this.makePairs(old.cases,t.cases);
		var convMap = [];
		var convertTypeRec = null;
		convertTypeRec = function(t1,v) {
			if(t1 == null || v == null) {
				return null;
			}
			var c = t1.cases[v[0]];
			var _g = 0;
			var _g1 = c.args.length;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = c.args[i].type;
				if(_g2._hx_index == 9) {
					var tname = _g2.name;
					var av = v[i + 1];
					if(av != null) {
						var convertTypeRec1 = _gthis.getCustomType(tname);
						v[i + 1] = convertTypeRec(convertTypeRec1,av);
					}
				}
			}
			if(t1 == old) {
				var conv = convMap[v[0]];
				if(conv == null) {
					return null;
				}
				var out = conv.def.slice();
				var _g21 = 0;
				var _g3 = conv.args.length;
				while(_g21 < _g3) {
					var i1 = _g21++;
					var v1 = conv.args[i1](v[i1 + 1]);
					if(v1 == null) {
						continue;
					}
					out[v1.index + 1] = v1.v;
				}
				return out;
			}
			return v;
		};
		var _g4 = 0;
		while(_g4 < casesPairs.length) {
			var p = casesPairs[_g4];
			++_g4;
			if(p.b == null) {
				continue;
			}
			var id = Lambda.indexOf(t.cases,p.b);
			var conv1 = { def : [id], args : []};
			var args = this.makePairs(p.a.args,p.b.args);
			var _g5 = 0;
			while(_g5 < args.length) {
				var a = args[_g5];
				++_g5;
				if(a.b == null) {
					conv1.args[Lambda.indexOf(p.a.args,a.a)] = (function() {
						return function(_) {
							return null;
						};
					})();
					continue;
				}
				var b = [a.b];
				var a1 = a.a;
				var c1 = this.getConvFunction(a1.type,b[0].type);
				if(c1 == null) {
					throw new js__$Boot_HaxeError("Cannot convert " + p.a.name + "." + a1.name + ":" + this.typeStr(a1.type) + " to " + p.b.name + "." + b[0].name + ":" + this.typeStr(b[0].type));
				}
				var f = [c1.f];
				if(f[0] == null) {
					var tmp = (function() {
						return function(x) {
							return x;
						};
					})();
					f[0] = tmp;
				}
				if(a1.opt != b[0].opt) {
					var oldf = [f[0]];
					if(a1.opt) {
						var tmp1 = (function(oldf1,b1) {
							return function(v2) {
								v2 = oldf1[0](v2);
								if(v2 == null) {
									return _gthis.getDefault(b1[0]);
								} else {
									return v2;
								}
							};
						})(oldf,b);
						f[0] = tmp1;
					} else {
						var def = [this.getDefault(a1)];
						var tmp2 = (function(def1,oldf2) {
							return function(v3) {
								if(v3 == def1[0]) {
									return null;
								} else {
									return oldf2[0](v3);
								}
							};
						})(def,oldf);
						f[0] = tmp2;
					}
				}
				var index = [Lambda.indexOf(p.b.args,b[0])];
				conv1.args[Lambda.indexOf(p.a.args,a1)] = (function(index1,f1,b2) {
					return function(v4) {
						v4 = f1[0](v4);
						if(v4 == null && b2[0].opt) {
							return null;
						} else {
							return { index : index1[0], v : v4};
						}
					};
				})(index,f,b);
			}
			var _g11 = 0;
			var _g22 = p.b.args;
			while(_g11 < _g22.length) {
				var b3 = _g22[_g11];
				++_g11;
				conv1.def.push(this.getDefault(b3));
			}
			while(conv1.def[conv1.def.length - 1] == null) conv1.def.pop();
			var tmp3 = Lambda.indexOf(old.cases,p.a);
			convMap[tmp3] = conv1;
		}
		var _g12 = 0;
		var _g23 = this.sheets;
		while(_g12 < _g23.length) {
			var s = _g23[_g12];
			++_g12;
			var _g13 = 0;
			var _g24 = s.sheet.columns;
			while(_g13 < _g24.length) {
				var c2 = _g24[_g13];
				++_g13;
				var _g14 = c2.type;
				if(_g14._hx_index == 9) {
					var tname1 = _g14.name;
					var t2 = this.getCustomType(tname1);
					var _g15 = 0;
					var _g25 = s.getLines();
					while(_g15 < _g25.length) {
						var obj = _g25[_g15];
						++_g15;
						var v5 = Reflect.field(obj,c2.name);
						if(v5 != null) {
							v5 = convertTypeRec(t2,v5);
							if(v5 == null) {
								Reflect.deleteField(obj,c2.name);
							} else {
								obj[c2.name] = v5;
							}
						}
					}
					if(tname1 == old.name && t.name != old.name) {
						c2.type = cdb_ColumnType.TCustom(t.name);
						c2.typeStr = null;
					}
				}
			}
		}
		if(t.name != old.name) {
			var _g31 = 0;
			var _g41 = this.getCustomTypes();
			while(_g31 < _g41.length) {
				var t21 = _g41[_g31];
				++_g31;
				var _g32 = 0;
				var _g42 = t21.cases;
				while(_g32 < _g42.length) {
					var c3 = _g42[_g32];
					++_g32;
					var _g33 = 0;
					var _g43 = c3.args;
					while(_g33 < _g43.length) {
						var a2 = _g43[_g33];
						++_g33;
						var _g34 = a2.type;
						if(_g34._hx_index == 9) {
							var n = _g34.name;
							if(n == old.name) {
								a2.type = cdb_ColumnType.TCustom(t.name);
								a2.typeStr = null;
							}
						}
					}
				}
			}
			this.tmap.remove(old.name);
			old.name = t.name;
			var key = old.name;
			var _this = this.tmap;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,old);
			} else {
				_this.h[key] = old;
			}
		}
		old.cases = t.cases;
	}
	,valToString: function(t,val,esc) {
		if(esc == null) {
			esc = false;
		}
		if(val == null) {
			return "null";
		}
		switch(t._hx_index) {
		case 1:
			var val1 = val;
			if(!esc) {
				return val1;
			} else {
				return "\"" + val1.split("\\").join("\\\\").split("\"").join("\\\"") + "\"";
			}
			break;
		case 2:case 3:case 4:case 7:
			return Std.string(val);
		case 5:
			var values = t.values;
			return this.valToString(cdb_ColumnType.TString,values[val],esc);
		case 6:
			var _g4 = t.sheet;
			if(esc) {
				return "\"" + Std.string(val) + "\"";
			} else {
				return val;
			}
			break;
		case 8:case 17:
			return "???";
		case 9:
			var t1 = t.name;
			return this.typeValToString(this.getCustomType(t1),val,esc);
		case 10:
			var values1 = t.values;
			var v = val;
			var flags = [];
			var _g = 0;
			var _g1 = values1.length;
			while(_g < _g1) {
				var i = _g++;
				if((v & 1 << i) != 0) {
					flags.push(this.valToString(cdb_ColumnType.TString,values1[i],esc));
				}
			}
			return Std.string(flags);
		case 11:
			var s = "#" + StringTools.hex(val,6);
			if(esc) {
				return "\"" + s + "\"";
			} else {
				return s;
			}
			break;
		case 12:
			var _g2 = t.type;
			if(esc) {
				return "\"" + Std.string(val) + "\"";
			} else {
				return val;
			}
			break;
		case 0:case 13:
			if(esc) {
				return "\"" + Std.string(val) + "\"";
			} else {
				return val;
			}
			break;
		case 14:case 15:case 16:
			if(esc) {
				return JSON.stringify(val);
			}
			return this.valueToString(val);
		}
	}
	,valueToString: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			return "null";
		case 4:
			var _g1 = [];
			var _g11 = 0;
			var _g2 = Reflect.fields(v);
			while(_g11 < _g2.length) {
				var f = _g2[_g11];
				++_g11;
				_g1.push(f + " : " + this.valueToString(Reflect.field(v,f)));
			}
			var fl = _g1;
			if(fl.length == 0) {
				return "{}";
			} else {
				return "{ " + fl.join(", ") + " }";
			}
			break;
		case 6:
			var c = _g.c;
			switch(c.__name__) {
			case "Array":
				var arr = v;
				var _g3 = [];
				var _g12 = 0;
				while(_g12 < arr.length) {
					var v1 = arr[_g12];
					++_g12;
					_g3.push(this.valueToString(v1));
				}
				var vl = _g3;
				if(vl.length == 0) {
					return "[]";
				} else {
					return "[" + vl.join(", ") + "]";
				}
				break;
			case "String":
				return this.valToString(cdb_ColumnType.TString,v,true);
			default:
			}
			break;
		default:
		}
		return Std.string(v);
	}
	,typeValToString: function(t,val,esc) {
		if(esc == null) {
			esc = false;
		}
		var c = t.cases[val[0]];
		var str = c.name;
		if(c.args.length > 0) {
			str += "(";
			var out = [];
			var _g = 1;
			var _g1 = val.length;
			while(_g < _g1) {
				var i = _g++;
				out.push(this.valToString(c.args[i - 1].type,val[i],esc));
			}
			str += out.join(",");
			str += ")";
		}
		return str;
	}
	,parseDynamic: function(s) {
		var _this_r = new RegExp("([{,])[ \t\n]*([a-zA-Z_][a-zA-Z0-9_]*)[ \t\n]*:","g".split("u").join(""));
		s = s.replace(_this_r,"$1\"$2\":");
		return JSON.parse(s);
	}
	,parseValue: function(t,val,strictCheck) {
		if(strictCheck == null) {
			strictCheck = false;
		}
		switch(t._hx_index) {
		case 0:
			if(this.r_ident.match(val)) {
				return val;
			}
			break;
		case 1:
			if(!strictCheck) {
				return val;
			}
			if(HxOverrides.cca(val,0) == 34) {
				var esc = false;
				var p = 1;
				var out_b = "";
				_hx_loop1: while(true) {
					if(p == val.length) {
						throw new js__$Boot_HaxeError("Unclosed \"");
					}
					var c = HxOverrides.cca(val,p++);
					if(esc) {
						out_b += String.fromCodePoint(c);
						esc = false;
					} else if(c == null) {
						out_b += String.fromCodePoint(c);
					} else {
						switch(c) {
						case 34:
							if(p < val.length) {
								throw new js__$Boot_HaxeError("Invalid content after string '" + val);
							}
							break _hx_loop1;
						case 92:
							esc = true;
							break;
						default:
							out_b += String.fromCodePoint(c);
						}
					}
				}
				return out_b;
			}
			if(!new EReg("^[A-Za-z0-9_]+$","").match(val)) {
				throw new js__$Boot_HaxeError("String requires quotes '" + val + "'");
			}
			return val;
		case 2:
			if(val == "true") {
				return true;
			}
			if(val == "false") {
				return false;
			}
			break;
		case 3:
			if(new EReg("^-?[0-9]+$","").match(val)) {
				return Std.parseInt(val);
			}
			break;
		case 4:
			var f = parseFloat(val);
			if(!isNaN(f)) {
				return f;
			}
			break;
		case 6:
			var t1 = t.sheet;
			if(this.r_ident.match(val)) {
				if(!strictCheck) {
					return val;
				}
				var _this = this.getSheet(t1).index;
				var r = __map_reserved[val] != null ? _this.getReserved(val) : _this.h[val];
				if(r == null) {
					throw new js__$Boot_HaxeError(val + " is not a known " + t1 + " id");
				}
				return r.id;
			}
			break;
		case 9:
			var t2 = t.name;
			return this.parseTypeVal(this.getCustomType(t2),val);
		case 11:
			if(val.charAt(0) == "#") {
				val = "0x" + HxOverrides.substr(val,1,null);
			}
			if(new EReg("^-?[0-9]+$","").match(val) || new EReg("^0x[0-9A-Fa-f]+$","").match(val)) {
				return Std.parseInt(val);
			}
			break;
		case 16:
			return this.parseDynamic(val);
		default:
		}
		throw new js__$Boot_HaxeError("'" + val + "' should be " + this.typeStr(t));
	}
	,parseTypeVal: function(t,val) {
		if(t == null || val == null) {
			throw new js__$Boot_HaxeError("Missing val/type");
		}
		val = StringTools.trim(val);
		var missingCloseParent = false;
		var pos = val.indexOf("(");
		var id;
		var args = null;
		if(pos < 0) {
			id = val;
			args = [];
		} else {
			id = HxOverrides.substr(val,0,pos);
			val = HxOverrides.substr(val,pos + 1,null);
			if(StringTools.endsWith(val,")")) {
				val = HxOverrides.substr(val,0,val.length - 1);
			} else {
				missingCloseParent = true;
			}
			args = [];
			var p = 0;
			var start = 0;
			var pc = 0;
			while(p < val.length) {
				var _g = HxOverrides.cca(val,p++);
				if(_g != null) {
					switch(_g) {
					case 34:
						var esc = false;
						_hx_loop2: while(true) {
							if(p == val.length) {
								throw new js__$Boot_HaxeError("Unclosed \"");
							}
							var c = HxOverrides.cca(val,p++);
							if(esc) {
								esc = false;
							} else {
								switch(c) {
								case 34:
									break _hx_loop2;
								case 92:
									esc = true;
									break;
								}
							}
						}
						break;
					case 40:
						++pc;
						break;
					case 41:
						if(pc == 0) {
							throw new js__$Boot_HaxeError("Extra )");
						}
						--pc;
						break;
					case 44:
						if(pc == 0) {
							args.push(HxOverrides.substr(val,start,p - start - 1));
							start = p;
						}
						break;
					default:
					}
				}
			}
			if(pc > 0) {
				missingCloseParent = true;
			}
			if(p > start || start > 0 && p == start) {
				args.push(HxOverrides.substr(val,start,p - start));
			}
		}
		var _g1 = 0;
		var _g11 = t.cases.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var c1 = t.cases[i];
			if(c1.name == id) {
				var vals = [i];
				var _g2 = 0;
				var _g12 = c1.args;
				while(_g2 < _g12.length) {
					var a = _g12[_g2];
					++_g2;
					var v = args.shift();
					if(v == null) {
						if(a.opt) {
							vals.push(null);
						} else {
							throw new js__$Boot_HaxeError("Missing argument " + a.name + " : " + this.typeStr(a.type));
						}
					} else {
						v = StringTools.trim(v);
						if(a.opt && v == "null") {
							vals.push(null);
							continue;
						}
						var val1;
						try {
							val1 = this.parseValue(a.type,v,true);
						} catch( e ) {
							var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
							if(typeof(e1) == "string") {
								throw new js__$Boot_HaxeError(e1 + " for " + a.name);
							} else {
								throw e;
							}
						}
						vals.push(val1);
					}
				}
				if(args.length > 0) {
					throw new js__$Boot_HaxeError("Extra argument '" + args.shift() + "'");
				}
				if(missingCloseParent) {
					throw new js__$Boot_HaxeError("Missing )");
				}
				while(vals[vals.length - 1] == null) vals.pop();
				return vals;
			}
		}
		throw new js__$Boot_HaxeError("Unkown value '" + id + "'");
	}
	,parseType: function(tstr) {
		switch(tstr) {
		case "Bool":
			return cdb_ColumnType.TBool;
		case "Float":
			return cdb_ColumnType.TFloat;
		case "Int":
			return cdb_ColumnType.TInt;
		case "String":
			return cdb_ColumnType.TString;
		default:
			if(this.getCustomType(tstr) != null) {
				return cdb_ColumnType.TCustom(tstr);
			} else if(this.getSheet(tstr) != null) {
				return cdb_ColumnType.TRef(tstr);
			} else {
				if(StringTools.endsWith(tstr,">")) {
					var tname = tstr.split("<").shift();
					var tparam = HxOverrides.substr(HxOverrides.substr(tstr,tname.length + 1,null),0,-1);
				}
				throw new js__$Boot_HaxeError("Unknown type " + tstr);
			}
		}
	}
	,typeCasesToString: function(t,prefix) {
		if(prefix == null) {
			prefix = "";
		}
		var arr = [];
		var _g = 0;
		var _g1 = t.cases;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var str = c.name;
			if(c.args.length > 0) {
				str += "( ";
				var out = [];
				var _g2 = 0;
				var _g11 = c.args;
				while(_g2 < _g11.length) {
					var a = _g11[_g2];
					++_g2;
					var k = "";
					if(a.opt) {
						k += "?";
					}
					k += a.name + " : " + this.typeStr(a.type);
					out.push(k);
				}
				str += out.join(", ");
				str += " )";
			}
			str += ";";
			arr.push(prefix + str);
		}
		return arr.join("\n");
	}
	,parseTypeCases: function(def) {
		var cases = [];
		var cmap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = new EReg("[\n;]","g").split(def);
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			var line1 = StringTools.trim(line);
			if(line1 == "") {
				continue;
			}
			if(HxOverrides.cca(line1,line1.length - 1) == 59) {
				line1 = HxOverrides.substr(line1,1,null);
			}
			var pos = line1.indexOf("(");
			var name = null;
			var args = [];
			if(pos < 0) {
				name = line1;
			} else {
				name = HxOverrides.substr(line1,0,pos);
				line1 = HxOverrides.substr(line1,pos + 1,null);
				if(HxOverrides.cca(line1,line1.length - 1) != 41) {
					throw new js__$Boot_HaxeError("Missing closing parent in " + line1);
				}
				line1 = HxOverrides.substr(line1,0,line1.length - 1);
				var _g2 = 0;
				var _g11 = line1.split(",");
				while(_g2 < _g11.length) {
					var arg = _g11[_g2];
					++_g2;
					var tname = arg.split(":");
					if(tname.length != 2) {
						throw new js__$Boot_HaxeError("Required name:type in '" + arg + "'");
					}
					var opt = false;
					var id = StringTools.trim(tname[0]);
					if(id.charAt(0) == "?") {
						opt = true;
						id = StringTools.trim(HxOverrides.substr(id,1,null));
					}
					var t = StringTools.trim(tname[1]);
					if(!this.r_ident.match(id)) {
						throw new js__$Boot_HaxeError("Invalid identifier " + id);
					}
					var c = { name : id, type : this.parseType(t), typeStr : null};
					if(opt) {
						c.opt = true;
					}
					args.push(c);
				}
			}
			if(!this.r_ident.match(name)) {
				throw new js__$Boot_HaxeError("Invalid identifier " + line1);
			}
			if(__map_reserved[name] != null ? cmap.existsReserved(name) : cmap.h.hasOwnProperty(name)) {
				throw new js__$Boot_HaxeError("Duplicate identifier " + name);
			}
			if(__map_reserved[name] != null) {
				cmap.setReserved(name,true);
			} else {
				cmap.h[name] = true;
			}
			cases.push({ name : name, args : args});
		}
		return cases;
	}
	,mapType: function(callb) {
		var _g = 0;
		var _g1 = this.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = s.sheet.columns;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				var t = callb(c.type);
				if(t != c.type) {
					c.type = t;
					c.typeStr = null;
				}
			}
		}
		var _g21 = 0;
		var _g3 = this.getCustomTypes();
		while(_g21 < _g3.length) {
			var t1 = _g3[_g21];
			++_g21;
			var _g22 = 0;
			var _g31 = t1.cases;
			while(_g22 < _g31.length) {
				var c1 = _g31[_g22];
				++_g22;
				var _g23 = 0;
				var _g32 = c1.args;
				while(_g23 < _g32.length) {
					var a = _g32[_g23];
					++_g23;
					var t2 = callb(a.type);
					if(t2 != a.type) {
						a.type = t2;
						a.typeStr = null;
					}
				}
			}
		}
	}
	,updateRefs: function(sheet,refMap) {
		var _gthis = this;
		var convertTypeRec = null;
		convertTypeRec = function(t,o) {
			var c = t.cases[o[0]];
			var _g = 0;
			var _g1 = o.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var v = o[i + 1];
				if(v == null) {
					continue;
				}
				var _g2 = c.args[i].type;
				switch(_g2._hx_index) {
				case 6:
					var n = _g2.sheet;
					if(n == sheet.sheet.name) {
						var key = v;
						var v1 = __map_reserved[key] != null ? refMap.getReserved(key) : refMap.h[key];
						if(v1 == null) {
							continue;
						}
						o[i + 1] = v1;
					}
					break;
				case 9:
					var name = _g2.name;
					var convertTypeRec1 = _gthis.getCustomType(name);
					convertTypeRec(convertTypeRec1,v);
					break;
				default:
				}
			}
		};
		var _g3 = 0;
		var _g11 = this.sheets;
		while(_g3 < _g11.length) {
			var s = _g11[_g3];
			++_g3;
			var _g4 = 0;
			var _g12 = s.sheet.columns;
			while(_g4 < _g12.length) {
				var c1 = _g12[_g4];
				++_g4;
				var _g5 = c1.type;
				switch(_g5._hx_index) {
				case 6:
					var n1 = _g5.sheet;
					if(n1 == sheet.sheet.name) {
						var _g6 = 0;
						var _g13 = s.getLines();
						while(_g6 < _g13.length) {
							var obj = _g13[_g6];
							++_g6;
							var id = Reflect.field(obj,c1.name);
							if(id == null) {
								continue;
							}
							id = __map_reserved[id] != null ? refMap.getReserved(id) : refMap.h[id];
							if(id == null) {
								continue;
							}
							obj[c1.name] = id;
						}
					}
					break;
				case 9:
					var t1 = _g5.name;
					var _g7 = 0;
					var _g14 = s.getLines();
					while(_g7 < _g14.length) {
						var obj1 = _g14[_g7];
						++_g7;
						var o1 = Reflect.field(obj1,c1.name);
						if(o1 == null) {
							continue;
						}
						var tmp = this.getCustomType(t1);
						convertTypeRec(tmp,o1);
					}
					break;
				default:
				}
			}
		}
	}
	,updateSheets: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sheets;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(s.sheet);
		}
		this.data.sheets = _g;
	}
	,deleteSheet: function(sheet) {
		HxOverrides.remove(this.sheets,sheet);
		this.updateSheets();
		this.smap.remove(sheet.sheet.name);
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			switch(c.type._hx_index) {
			case 8:case 17:
				this.deleteSheet(sheet.base.getSheet(sheet.sheet.name + "@" + c.name));
				break;
			default:
			}
		}
		this.mapType(function(t) {
			switch(t._hx_index) {
			case 6:
				var r = t.sheet;
				if(r == sheet.sheet.name) {
					return cdb_ColumnType.TString;
				} else {
					return t;
				}
				break;
			case 12:
				var r1 = t.type;
				if(r1 == sheet.sheet.name) {
					return cdb_ColumnType.TString;
				} else {
					return t;
				}
				break;
			default:
				return t;
			}
		});
	}
	,__class__: cdb_Database
};
var cdb_LocField = $hxEnums["cdb.LocField"] = { __ename__ : "cdb.LocField", __constructs__ : ["LName","LSub","LSingle"]
	,LName: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"cdb.LocField",toString:$estr}; },$_.__params__ = ["c"],$_)
	,LSub: ($_=function(c,s,e) { return {_hx_index:1,c:c,s:s,e:e,__enum__:"cdb.LocField",toString:$estr}; },$_.__params__ = ["c","s","e"],$_)
	,LSingle: ($_=function(c,e) { return {_hx_index:2,c:c,e:e,__enum__:"cdb.LocField",toString:$estr}; },$_.__params__ = ["c","e"],$_)
};
var cdb_Ref = function(e) {
	this.e = e;
};
$hxClasses["cdb.Ref"] = cdb_Ref;
cdb_Ref.__name__ = "cdb.Ref";
cdb_Ref.prototype = {
	__class__: cdb_Ref
};
var cdb_Lang = function(root) {
	this.root = root;
};
$hxClasses["cdb.Lang"] = cdb_Lang;
cdb_Lang.__name__ = "cdb.Lang";
cdb_Lang.prototype = {
	onMissing: function(s) {
		console.log("cdb/Lang.hx:29:",s);
	}
	,getSub: function(s,c) {
		return this.getSheet(s.name + "@" + c.name);
	}
	,getSheet: function(name) {
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,makeLocField: function(c,s) {
		switch(c.type._hx_index) {
		case 1:
			if(c.kind == "localizable") {
				return cdb_LocField.LName(c);
			} else {
				return null;
			}
			break;
		case 8:case 17:
			var ssub = this.getSub(s,c);
			var fl = this.makeSheetFields(ssub);
			if(fl.length == 0) {
				return null;
			}
			return cdb_LocField.LSub(c,ssub,fl);
		default:
			return null;
		}
	}
	,makeSheetFields: function(s) {
		var fields = [];
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var f = this.makeLocField(c,s);
			if(f != null) {
				if(f._hx_index == 1) {
					var _g11 = f.s;
					var fl = f.e;
					var c1 = f.c;
					if(c1.type == cdb_ColumnType.TProperties) {
						var _g2 = 0;
						while(_g2 < fl.length) {
							var f1 = fl[_g2];
							++_g2;
							fields.push(cdb_LocField.LSingle(c1,f1));
						}
					} else {
						fields.push(f);
					}
				} else {
					fields.push(f);
				}
			}
		}
		return fields;
	}
	,apply: function(xml,reference) {
		var x = Xml.parse(xml).firstElement();
		var ref = reference == null ? null : Xml.parse(reference).firstElement();
		var xsheets = new haxe_ds_StringMap();
		var e = x.elements();
		while(e.hasNext()) {
			var e1 = e.next();
			var key = e1.get("name");
			var value = new cdb_Ref(e1);
			if(__map_reserved[key] != null) {
				xsheets.setReserved(key,value);
			} else {
				xsheets.h[key] = value;
			}
		}
		if(ref != null) {
			var e2 = ref.elements();
			while(e2.hasNext()) {
				var e3 = e2.next();
				var key1 = e3.get("name");
				var s = __map_reserved[key1] != null ? xsheets.getReserved(key1) : xsheets.h[key1];
				if(s != null) {
					s.ref = e3;
				}
			}
		}
		var out = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s1 = _g1[_g];
			++_g;
			if(s1.props.hide) {
				continue;
			}
			var key2 = s1.name;
			var x1 = __map_reserved[key2] != null ? xsheets.getReserved(key2) : xsheets.h[key2];
			if(x1 == null) {
				if(s1.lines.length > 0 && this.makeSheetFields(s1).length > 0) {
					this.onMissing("Missing sheet " + s1.name);
				}
				continue;
			}
			var path = [s1.name];
			var outLines = [];
			this.applySheet(path,s1,this.makeSheetFields(s1),s1.lines,x1,outLines);
			var key3 = s1.name;
			if(__map_reserved[key3] != null ? out.existsReserved(key3) : out.h.hasOwnProperty(key3)) {
				throw new js__$Boot_HaxeError("assert");
			}
			var key4 = s1.name;
			if(__map_reserved[key4] != null) {
				out.setReserved(key4,outLines);
			} else {
				out.h[key4] = outLines;
			}
		}
		return out;
	}
	,'delete': function(l) {
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var key = s.name;
			var sdel = __map_reserved[key] != null ? l.getReserved(key) : l.h[key];
			if(sdel == null) {
				continue;
			}
			this.deleteSheet(s,this.makeSheetFields(s),sdel,s.lines);
		}
	}
	,deleteSheet: function(s,loc,del,lines) {
		var inf = this.getSheetHelpers(s);
		if(inf.id == null) {
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				if(del[i] != null && lines[i] != null) {
					this.deleteObj(loc,del[i],lines[i]);
				}
			}
		} else {
			var byID = new haxe_ds_StringMap();
			var _g2 = 0;
			while(_g2 < del.length) {
				var d = del[_g2];
				++_g2;
				var key = Reflect.field(d,inf.id);
				if(__map_reserved[key] != null) {
					byID.setReserved(key,d);
				} else {
					byID.h[key] = d;
				}
			}
			var _g11 = 0;
			while(_g11 < lines.length) {
				var o = lines[_g11];
				++_g11;
				var id = Reflect.field(o,inf.id);
				if(id == null || !(__map_reserved[id] != null ? byID.existsReserved(id) : byID.h.hasOwnProperty(id))) {
					continue;
				}
				this.deleteObj(loc,__map_reserved[id] != null ? byID.getReserved(id) : byID.h[id],o);
			}
		}
	}
	,deleteObj: function(loc,del,obj) {
		var _g = 0;
		while(_g < loc.length) {
			var l = loc[_g];
			++_g;
			switch(l._hx_index) {
			case 0:
				var c = l.c;
				if(Object.prototype.hasOwnProperty.call(del,c.name)) {
					obj[c.name] = "";
				}
				break;
			case 1:
				var el = l.e;
				var s = l.s;
				var c1 = l.c;
				var ol = Reflect.field(obj,c1.name);
				var dl = Reflect.field(del,c1.name);
				if(ol == null || dl == null) {
					continue;
				}
				this.deleteSheet(s,el,dl,ol);
				break;
			case 2:
				var e = l.e;
				var c2 = l.c;
				var o = Reflect.field(obj,c2.name);
				var d = Reflect.field(del,c2.name);
				if(o == null || d == null) {
					continue;
				}
				this.deleteObj([e],d,o);
				break;
			}
		}
	}
	,applySheet: function(path,s,fields,objects,x,out) {
		var inf = this.getSheetHelpers(s);
		if(inf.id == null) {
			var byIndex = [];
			if(x != null) {
				var e = x.e.elements();
				while(e.hasNext()) {
					var e1 = e.next();
					var m = new haxe_ds_StringMap();
					var e2 = e1.elements();
					while(e2.hasNext()) {
						var e3 = e2.next();
						if(e3.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e3.nodeType));
						}
						var key = e3.nodeName;
						var value = new cdb_Ref(e3);
						if(__map_reserved[key] != null) {
							m.setReserved(key,value);
						} else {
							m.h[key] = value;
						}
					}
					if(e1.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e1.nodeType));
					}
					byIndex[Std.parseInt(e1.nodeName)] = m;
				}
				if(x.ref != null) {
					var e4 = x.ref.elements();
					while(e4.hasNext()) {
						var e5 = e4.next();
						if(e5.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e5.nodeType));
						}
						var m1 = byIndex[Std.parseInt(e5.nodeName)];
						if(m1 != null) {
							var e6 = e5.elements();
							while(e6.hasNext()) {
								var e7 = e6.next();
								if(e7.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e7.nodeType));
								}
								var key1 = e7.nodeName;
								var r = __map_reserved[key1] != null ? m1.getReserved(key1) : m1.h[key1];
								if(r != null) {
									r.ref = e7;
								}
							}
						}
					}
				}
			}
			var _g = 0;
			var _g1 = objects.length;
			while(_g < _g1) {
				var i = _g++;
				var outSub = { };
				var o = objects[i];
				var _g2 = 0;
				while(_g2 < fields.length) {
					var f = fields[_g2];
					++_g2;
					path.push("[" + i + "]");
					this.applyRec(path,f,o,byIndex[i],outSub);
					path.pop();
				}
				if(Reflect.fields(outSub).length > 0) {
					var _g11 = 0;
					var _g21 = inf.helpers;
					while(_g11 < _g21.length) {
						var c = _g21[_g11];
						++_g11;
						var hid = Reflect.field(o,c.c.name);
						if(hid != null) {
							outSub[c.c.name] = hid;
						}
					}
					out[i] = outSub;
				}
			}
		} else {
			var byID = new haxe_ds_StringMap();
			if(x != null) {
				var e8 = x.e.elements();
				while(e8.hasNext()) {
					var e9 = e8.next();
					var m2 = new haxe_ds_StringMap();
					var e10 = e9.elements();
					while(e10.hasNext()) {
						var e11 = e10.next();
						if(e11.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e11.nodeType));
						}
						var key2 = e11.nodeName;
						var value1 = new cdb_Ref(e11);
						if(__map_reserved[key2] != null) {
							m2.setReserved(key2,value1);
						} else {
							m2.h[key2] = value1;
						}
					}
					if(e9.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e9.nodeType));
					}
					var key3 = e9.nodeName;
					if(__map_reserved[key3] != null) {
						byID.setReserved(key3,m2);
					} else {
						byID.h[key3] = m2;
					}
				}
				if(x.ref != null) {
					var e12 = x.ref.elements();
					while(e12.hasNext()) {
						var e13 = e12.next();
						if(e13.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e13.nodeType));
						}
						var key4 = e13.nodeName;
						var m3 = __map_reserved[key4] != null ? byID.getReserved(key4) : byID.h[key4];
						if(m3 != null) {
							var e14 = e13.elements();
							while(e14.hasNext()) {
								var e15 = e14.next();
								if(e15.nodeType != Xml.Element) {
									throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e15.nodeType));
								}
								var key5 = e15.nodeName;
								var r1 = __map_reserved[key5] != null ? m3.getReserved(key5) : m3.h[key5];
								if(r1 != null) {
									r1.ref = e15;
								}
							}
						}
					}
				}
			}
			var _g3 = 0;
			while(_g3 < objects.length) {
				var o1 = objects[_g3];
				++_g3;
				var outSub1 = { };
				var id = Reflect.field(o1,inf.id);
				path.push(id);
				var _g4 = 0;
				while(_g4 < fields.length) {
					var f1 = fields[_g4];
					++_g4;
					this.applyRec(path,f1,o1,__map_reserved[id] != null ? byID.getReserved(id) : byID.h[id],outSub1);
				}
				path.pop();
				if(Reflect.fields(outSub1).length > 0) {
					outSub1[inf.id] = id;
					out.push(outSub1);
				}
			}
		}
	}
	,applyRec: function(path,f,o,data,out) {
		switch(f._hx_index) {
		case 0:
			var c = f.c;
			var v;
			if(data == null) {
				v = null;
			} else {
				var key = c.name;
				v = __map_reserved[key] != null ? data.getReserved(key) : data.h[key];
			}
			if(v != null) {
				var x = v.e;
				if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
				}
				var this1 = x;
				var str = StringTools.htmlUnescape(haxe_xml__$Access_Access_$Impl_$.get_innerHTML(this1));
				var ref;
				if(v.ref == null) {
					ref = null;
				} else {
					var x1 = v.ref;
					if(x1.nodeType != Xml.Document && x1.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x1.nodeType));
					}
					var this2 = x1;
					ref = StringTools.htmlUnescape(haxe_xml__$Access_Access_$Impl_$.get_innerHTML(this2));
				}
				if(ref != null && ref != Reflect.field(o,c.name)) {
					path.push(c.name);
					this.onMissing("Ignored since has changed " + path.join("."));
					path.pop();
				} else {
					o[c.name] = str;
				}
			} else {
				var v1 = Reflect.field(o,c.name);
				if(v1 != null && v1 != "") {
					path.push(c.name);
					out[c.name] = v1;
					this.onMissing("Missing " + path.join("."));
					path.pop();
				}
			}
			break;
		case 1:
			var fl = f.e;
			var s = f.s;
			var c1 = f.c;
			var v2 = Reflect.field(o,c1.name);
			if(v2 == null) {
				return;
			}
			path.push(c1.name);
			var outSub = [];
			var tmp;
			if(data == null) {
				tmp = null;
			} else {
				var key1 = c1.name;
				tmp = __map_reserved[key1] != null ? data.getReserved(key1) : data.h[key1];
			}
			this.applySheet(path,s,fl,v2,tmp,outSub);
			if(outSub.length > 0) {
				out[c1.name] = outSub;
			}
			path.pop();
			break;
		case 2:
			var f1 = f.e;
			var c2 = f.c;
			var v3 = Reflect.field(o,c2.name);
			if(v3 == null) {
				return;
			}
			path.push(c2.name);
			var outSub1 = { };
			var tmp1;
			if(data == null) {
				tmp1 = null;
			} else {
				var _g = new haxe_ds_StringMap();
				var e = data.keys();
				while(e.hasNext()) {
					var e1 = e.next();
					if(StringTools.startsWith(e1,c2.name + ".")) {
						var key2 = HxOverrides.substr(e1,c2.name.length + 1,null);
						var value = __map_reserved[e1] != null ? data.getReserved(e1) : data.h[e1];
						if(__map_reserved[key2] != null) {
							_g.setReserved(key2,value);
						} else {
							_g.h[key2] = value;
						}
					}
				}
				tmp1 = _g;
			}
			this.applyRec(path,f1,v3,tmp1,outSub1);
			path.pop();
			if(Reflect.fields(outSub1).length > 0) {
				out[c2.name] = outSub1;
			}
			break;
		}
	}
	,buildXML: function(diff) {
		var buf_b = "";
		buf_b += "<cdb>\n";
		var _g = 0;
		var _g1 = this.root.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.props.hide) {
				continue;
			}
			var locFields = this.makeSheetFields(s);
			if(locFields.length == 0) {
				continue;
			}
			var lines = this.getLines(s,diff);
			if(lines.length == 0) {
				continue;
			}
			buf_b += Std.string("\t<sheet name=\"" + s.name + "\">\n");
			buf_b += Std.string(this.buildSheetXml(s,"\t\t",lines,locFields,diff));
			buf_b += "\t</sheet>\n";
		}
		buf_b += "</cdb>\n";
		return buf_b;
	}
	,getLines: function(s,diff) {
		if(diff != null) {
			var key = s.name;
			var m = __map_reserved[key] != null ? diff.getReserved(key) : diff.h[key];
			if(m == null) {
				throw new js__$Boot_HaxeError("Missing diff for " + s.name);
			}
			return m;
		}
		return s.lines;
	}
	,getLocText: function(tabs,o,f,diff) {
		switch(f._hx_index) {
		case 0:
			var c = f.c;
			var v = Reflect.field(o,c.name);
			return { name : c.name, value : v == null ? v : StringTools.htmlEscape(v)};
		case 1:
			var fl = f.e;
			var ssub = f.s;
			var c1 = f.c;
			var v1 = Reflect.field(o,c1.name);
			var content = this.buildSheetXml(ssub,tabs + "\t\t",v1 == null ? [] : v1,fl,diff);
			return { name : c1.name, value : content};
		case 2:
			var f1 = f.e;
			var c2 = f.c;
			var v2 = this.getLocText(tabs,Reflect.field(o,c2.name),f1,diff);
			return { name : c2.name + "." + v2.name, value : v2.value};
		}
	}
	,getSheetHelpers: function(s) {
		var id = null;
		var helpers = [];
		var _g = 0;
		var _g1 = s.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var _g2 = c.type;
			switch(_g2._hx_index) {
			case 0:
				if(id == null) {
					id = c;
				}
				break;
			case 1:
				if(c.kind != "localizable") {
					helpers.push({ c : c, map : null});
				}
				break;
			case 6:
				var sheet = _g2.sheet;
				var map = null;
				var s1 = this.getSheet(sheet);
				if(s1.props.displayColumn != null) {
					var idCol = null;
					var _g3 = 0;
					var _g11 = s1.columns;
					while(_g3 < _g11.length) {
						var c1 = _g11[_g3];
						++_g3;
						if(c1.type == cdb_ColumnType.TId) {
							idCol = c1;
							break;
						}
					}
					if(idCol != null) {
						map = new haxe_ds_StringMap();
						var _g21 = 0;
						var _g31 = s1.lines;
						while(_g21 < _g31.length) {
							var o = _g31[_g21];
							++_g21;
							var id1 = Reflect.field(o,idCol.name);
							var name = Reflect.field(o,s1.props.displayColumn);
							if(id1 != null && id1 != "" && name != null && name != "") {
								if(__map_reserved[id1] != null) {
									map.setReserved(id1,name);
								} else {
									map.h[id1] = name;
								}
							}
						}
					}
				}
				helpers.push({ c : c, map : map});
				break;
			default:
			}
		}
		if(id != null) {
			helpers = [];
		}
		return { id : id == null ? null : id.name, helpers : helpers};
	}
	,buildSheetXml: function(s,tabs,values,locFields,diff) {
		var inf = this.getSheetHelpers(s);
		var id = inf.id;
		var buf_b = "";
		var index = 0;
		var _g = 0;
		while(_g < values.length) {
			var o = values[_g];
			++_g;
			var id1 = id == null ? "" + index++ : Reflect.field(o,id);
			if(id1 == null || id1 == "") {
				continue;
			}
			var _g1 = [];
			var _g11 = 0;
			while(_g11 < locFields.length) {
				var f = locFields[_g11];
				++_g11;
				_g1.push(this.getLocText(tabs,o,f,diff));
			}
			var locs = _g1;
			var hasLoc = false;
			var _g2 = 0;
			while(_g2 < locs.length) {
				var l = locs[_g2];
				++_g2;
				if(l.value != null && l.value != "") {
					hasLoc = true;
					break;
				}
			}
			if(!hasLoc) {
				continue;
			}
			buf_b += Std.string("" + tabs + "<" + id1);
			var _g3 = 0;
			var _g4 = inf.helpers;
			while(_g3 < _g4.length) {
				var c = _g4[_g3];
				++_g3;
				var hid = Reflect.field(o,c.c.name);
				if(hid != null) {
					if(c.map != null) {
						var _this = c.map;
						var v = __map_reserved[hid] != null ? _this.getReserved(hid) : _this.h[hid];
						if(v != null) {
							hid = v;
						}
					}
					buf_b += Std.string(" " + c.c.name + "=\"" + hid + "\"");
				}
			}
			buf_b += ">\n";
			var _g5 = 0;
			while(_g5 < locs.length) {
				var l1 = locs[_g5];
				++_g5;
				if(l1.value != null && l1.value != "") {
					if(l1.value.indexOf("<") < 0) {
						buf_b += Std.string("" + tabs + "\t<" + l1.name + ">" + l1.value + "</" + l1.name + ">\n");
					} else {
						buf_b += Std.string("" + tabs + "\t<" + l1.name + ">\n");
						buf_b += Std.string("" + tabs + "\t\t" + StringTools.trim(l1.value) + "\n");
						buf_b += Std.string("" + tabs + "\t</" + l1.name + ">\n");
					}
				}
			}
			buf_b += Std.string("" + tabs + "</" + id1 + ">\n");
		}
		return buf_b;
	}
	,__class__: cdb_Lang
};
var cdb_Lz4Reader = function() {
};
$hxClasses["cdb.Lz4Reader"] = cdb_Lz4Reader;
cdb_Lz4Reader.__name__ = "cdb.Lz4Reader";
cdb_Lz4Reader.uncompress = function(src,srcPos,srcLen,out,outPos) {
	var outSave = outPos;
	var srcEnd = srcPos + srcLen;
	if(srcLen == 0) {
		return [srcPos,outPos,0];
	}
	var outLen = out.length;
	while(true) {
		var start = srcPos;
		var tk = src.b[srcPos++];
		var litLen = tk >> 4;
		var matchLen = tk & 15;
		if(litLen == 15) {
			var b;
			while(true) {
				b = src.b[srcPos++];
				litLen += b;
				if(!(b == 255)) {
					break;
				}
			}
		}
		if(outPos + litLen > outLen) {
			return [start,outPos,litLen + matchLen];
		}
		switch(litLen) {
		case 0:
			break;
		case 1:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		case 2:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		case 3:
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			out.b[outPos] = src.b[srcPos++];
			++outPos;
			break;
		default:
			out.blit(outPos,src,srcPos,litLen);
			outPos += litLen;
			srcPos += litLen;
		}
		if(srcPos >= srcEnd) {
			break;
		}
		var offset = src.b[srcPos++];
		offset |= src.b[srcPos++] << 8;
		if(matchLen == 15) {
			var b1;
			while(true) {
				b1 = src.b[srcPos++];
				matchLen += b1;
				if(!(b1 == 255)) {
					break;
				}
			}
		}
		matchLen += 4;
		if(outPos + matchLen > outLen) {
			return [start,outPos - litLen,litLen + matchLen];
		}
		if(matchLen >= 64 && matchLen <= offset) {
			out.blit(outPos,out,outPos - offset,matchLen);
			outPos += matchLen;
		} else {
			var copyEnd = outPos + matchLen;
			while(outPos < copyEnd) {
				out.b[outPos] = out.b[outPos - offset];
				++outPos;
			}
		}
	}
	if(srcPos != srcEnd) {
		throw new js__$Boot_HaxeError("Read too much data " + (srcPos - srcLen));
	}
	return [srcPos,outPos,0];
};
cdb_Lz4Reader.decodeString = function(s) {
	if(s == "") {
		return new haxe_io_Bytes(new ArrayBuffer(0));
	}
	var k = haxe_crypto_Base64.decode(s);
	if(k.b[0] != 4 || k.b[1] != 34 || k.b[2] != 77 || k.b[3] != 24) {
		return k;
	}
	var tmp = new Uint8Array(k.length);
	var _g = 0;
	var _g1 = k.length;
	while(_g < _g1) {
		var i = _g++;
		tmp[i] = k.b[i];
	}
	var k1 = lz4.decompress(tmp);
	var b = new haxe_io_Bytes(new ArrayBuffer(k1.length));
	var _g2 = 0;
	var _g3 = k1.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		b.b[i1] = k1[i1];
	}
	return b;
};
cdb_Lz4Reader.encodeBytes = function(b,compress) {
	if(compress && b.length > 0) {
		var tmp = new Uint8Array(b.length);
		var _g = 0;
		var _g1 = b.length;
		while(_g < _g1) {
			var i = _g++;
			tmp[i] = b.b[i];
		}
		tmp = lz4.compress(tmp,65536);
		b = new haxe_io_Bytes(new ArrayBuffer(tmp.length));
		var _g2 = 0;
		var _g3 = tmp.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			b.b[i1] = tmp[i1];
		}
	}
	return haxe_crypto_Base64.encode(b);
};
cdb_Lz4Reader.prototype = {
	b: function() {
		return this.bytes.b[this.pos++];
	}
	,grow: function(out,pos,len) {
		var size = out.length;
		while(true) {
			size = size * 3 >> 1;
			if(!(size < pos + len)) {
				break;
			}
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(size));
		out2.blit(0,out,0,pos);
		return out2;
	}
	,read: function(bytes) {
		this.bytes = bytes;
		this.pos = 0;
		if(this.bytes.b[this.pos++] != 4 || this.bytes.b[this.pos++] != 34 || this.bytes.b[this.pos++] != 77 || this.bytes.b[this.pos++] != 24) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var flags = this.bytes.b[this.pos++];
		if(flags >> 6 != 1) {
			throw new js__$Boot_HaxeError("Invalid version " + (flags >> 6));
		}
		var blockChecksum = (flags & 16) != 0;
		var streamSize = (flags & 8) != 0;
		var streamChecksum = (flags & 4) != 0;
		if((flags & 2) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var presetDict = (flags & 1) != 0;
		var bd = this.bytes.b[this.pos++];
		if((bd & 128) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		var maxBlockSize = [0,0,0,0,65536,262144,1048576,4194304][bd >> 4 & 7];
		if(maxBlockSize == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if((bd & 15) != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(streamSize) {
			this.pos += 8;
		}
		if(presetDict) {
			throw new js__$Boot_HaxeError("Preset dictionary not supported");
		}
		var headerChk = this.bytes.b[this.pos++];
		var out = new haxe_io_Bytes(new ArrayBuffer(128));
		var outPos = 0;
		while(true) {
			var size = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
			if(size == 0) {
				break;
			}
			if((size & -16) == 407710288) {
				var dataSize = this.bytes.b[this.pos++] | this.bytes.b[this.pos++] << 8 | this.bytes.b[this.pos++] << 16 | this.bytes.b[this.pos++] << 24;
				this.pos += dataSize;
				continue;
			}
			if((size & -2147483648) != 0) {
				size &= 2147483647;
				if(outPos + out.length < size) {
					out = this.grow(out,outPos,size);
				}
				out.blit(outPos,bytes,this.pos,size);
				outPos += size;
				this.pos += size;
			} else {
				var srcEnd = this.pos + size;
				while(this.pos < srcEnd) {
					var r = cdb_Lz4Reader.uncompress(bytes,this.pos,srcEnd - this.pos,out,outPos);
					this.pos = r[0];
					outPos = r[1];
					var req = r[2];
					if(req > 0) {
						out = this.grow(out,outPos,req);
					}
				}
			}
			if(blockChecksum) {
				this.pos += 4;
			}
		}
		return out.sub(0,outPos);
	}
	,__class__: cdb_Lz4Reader
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var cdb_MultifileLoadSave = function() { };
$hxClasses["cdb.MultifileLoadSave"] = cdb_MultifileLoadSave;
cdb_MultifileLoadSave.__name__ = "cdb.MultifileLoadSave";
cdb_MultifileLoadSave.intmax = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
cdb_MultifileLoadSave.getBaseDir = function(schemaPath) {
	var a = schemaPath.lastIndexOf("/");
	var b = schemaPath.lastIndexOf("\\");
	var lastSlash = a > b ? a : b;
	if(lastSlash < 0) {
		return cdb_MultifileLoadSave.MULTIFILE_CDB_DIR;
	} else {
		return haxe_io_Path.join([HxOverrides.substr(schemaPath,0,lastSlash),cdb_MultifileLoadSave.MULTIFILE_CDB_DIR]);
	}
};
cdb_MultifileLoadSave.readFile = function(fullPath) {
	var contents = sys_FileSystem.exists(fullPath) ? js_node_Fs.readFileSync(fullPath,{ encoding : "utf8"}) : null;
	var _this = cdb_MultifileLoadSave.lastStateOnDisk;
	if(__map_reserved[fullPath] != null) {
		_this.setReserved(fullPath,contents);
	} else {
		_this.h[fullPath] = contents;
	}
	return contents;
};
cdb_MultifileLoadSave.getMonoCDB = function(path,compact,legacyFormat) {
	if(legacyFormat == null) {
		legacyFormat = false;
	}
	if(compact == null) {
		compact = true;
	}
	var data = cdb_Parser.parseFrom(path,false);
	return cdb_Parser.saveMonofile(data,compact,legacyFormat);
};
cdb_MultifileLoadSave.parseMultifileContents = function(data,schemaPath) {
	var _this = cdb_MultifileLoadSave.lastStateOnDisk;
	_this.h = { };
	_this.rh = null;
	var basePath = cdb_MultifileLoadSave.getBaseDir(schemaPath);
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var table = _g1[_g];
		++_g;
		table.lines = [];
		table.separators = [];
		table.props.separatorTitles = [];
		var tablePath = basePath + "/" + table.name;
		var indexJson = cdb_MultifileLoadSave.readFile(tablePath + "/_table.index");
		if(indexJson == null) {
			continue;
		}
		var index = JSON.parse(indexJson);
		var csep = null;
		var _g2 = 0;
		var _g11 = index.length;
		while(_g2 < _g11) {
			var i = _g2++;
			var rowSubpath = index[i];
			var pathParts = rowSubpath.split("/");
			if(pathParts.length != 1 && pathParts.length != 2) {
				throw new js__$Boot_HaxeError("illegal row identifier in index: " + rowSubpath);
			}
			if(pathParts.length == 2 && csep != pathParts[0]) {
				csep = pathParts[0];
				table.separators.push(i);
				table.props.separatorTitles.push(csep);
			}
			var row = JSON.parse(cdb_MultifileLoadSave.readFile(tablePath + "/" + rowSubpath + ".row"));
			table.lines.push(row);
		}
	}
};
cdb_MultifileLoadSave.saveMultifileRootSchema = function(data,schemaPath) {
	var schema = { format : cdb_MultifileLoadSave.MULTIFILE_FORMAT, customTypes : [], compress : false, sheets : []};
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var srcTable = _g1[_g];
		++_g;
		var dstTable = { name : srcTable.name, columns : [], lines : [], separators : [], props : Reflect.copy(srcTable.props)};
		schema.sheets.push(dstTable);
		Reflect.deleteField(dstTable,"lines");
		Reflect.deleteField(dstTable,"separators");
		Reflect.deleteField(dstTable.props,"separatorTitles");
		var _g2 = 0;
		var _g11 = srcTable.columns;
		while(_g2 < _g11.length) {
			var srcColumn = _g11[_g2];
			++_g2;
			var dstColumn = Reflect.copy(srcColumn);
			dstTable.columns.push(dstColumn);
			dstColumn.typeStr = cdb_Parser.saveType(srcColumn.type);
			Reflect.deleteField(dstColumn,"type");
		}
	}
	js_node_Fs.writeFileSync(schemaPath,JSON.stringify(schema,null,"\t"));
};
cdb_MultifileLoadSave.getIdField = function(table) {
	var _g = 0;
	var _g1 = table.columns;
	while(_g < _g1.length) {
		var column = _g1[_g];
		++_g;
		if(column.type == cdb_ColumnType.TId) {
			return column.name;
		}
	}
	var col0 = table.columns[0];
	var tmp;
	if(col0.type != cdb_ColumnType.TString) {
		var _g2 = col0.type;
		if(_g2._hx_index == 6) {
			var _g3 = _g2.sheet;
			tmp = true;
		} else {
			tmp = false;
		}
	} else {
		tmp = true;
	}
	if(tmp) {
		return col0.name;
	}
	return null;
};
cdb_MultifileLoadSave.nukeZombieFiles = function(data,schemaPath) {
	var baseDir = cdb_MultifileLoadSave.getBaseDir(schemaPath);
	var oldFile = cdb_MultifileLoadSave.lastStateOnDisk.keys();
	while(oldFile.hasNext()) {
		var oldFile1 = oldFile.next();
		var tmp;
		var _this = cdb_MultifileLoadSave.lastStateOnDisk;
		if((__map_reserved[oldFile1] != null ? _this.getReserved(oldFile1) : _this.h[oldFile1]) != null) {
			var _this1 = cdb_MultifileLoadSave.saveStateOnDisk;
			tmp = __map_reserved[oldFile1] != null ? _this1.existsReserved(oldFile1) : _this1.h.hasOwnProperty(oldFile1);
		} else {
			tmp = true;
		}
		if(tmp) {
			continue;
		}
		js_node_Fs.unlinkSync(oldFile1);
		var parentDir = haxe_io_Path.directory(oldFile1);
		while(parentDir != baseDir && js_node_Fs.readdirSync(parentDir).length == 0) {
			if(sys_FileSystem.exists(parentDir)) {
				var _g = 0;
				var _g1 = js_node_Fs.readdirSync(parentDir);
				while(_g < _g1.length) {
					var file = _g1[_g];
					++_g;
					var curPath = parentDir + "/" + file;
					if(sys_FileSystem.isDirectory(curPath)) {
						if(sys_FileSystem.exists(curPath)) {
							var _g2 = 0;
							var _g11 = js_node_Fs.readdirSync(curPath);
							while(_g2 < _g11.length) {
								var file1 = _g11[_g2];
								++_g2;
								var curPath1 = curPath + "/" + file1;
								if(sys_FileSystem.isDirectory(curPath1)) {
									sys_FileSystem.deleteDirectory(curPath1);
								} else {
									js_node_Fs.unlinkSync(curPath1);
								}
							}
							js_node_Fs.rmdirSync(curPath);
						}
					} else {
						js_node_Fs.unlinkSync(curPath);
					}
				}
				js_node_Fs.rmdirSync(parentDir);
			}
			parentDir = haxe_io_Path.directory(parentDir);
		}
	}
};
cdb_MultifileLoadSave.saveMultifileTableContents = function(data,schemaPath) {
	cdb_MultifileLoadSave.saveStateOnDisk = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var table = _g1[_g];
		++_g;
		cdb_MultifileLoadSave._saveTable(table,schemaPath);
	}
	cdb_MultifileLoadSave.nukeZombieFiles(data,schemaPath);
	cdb_MultifileLoadSave.lastStateOnDisk = cdb_MultifileLoadSave.saveStateOnDisk;
	cdb_MultifileLoadSave.saveStateOnDisk = null;
};
cdb_MultifileLoadSave._saveTable = function(table,schemaPath) {
	if(table.lines.length == 0) {
		return;
	}
	var tableIndex = [];
	var tablePath = cdb_MultifileLoadSave.getBaseDir(schemaPath) + "/" + table.name;
	sys_FileSystem.createDirectory(tablePath);
	var idField = cdb_MultifileLoadSave.getIdField(table);
	var sepIdx = -1;
	var sepTitle = null;
	var _g = 0;
	var _g1 = table.lines.length;
	while(_g < _g1) {
		var rowIdx = _g++;
		var row = table.lines[rowIdx];
		var rowname = "";
		if(idField != null) {
			rowname = Reflect.field(row,idField);
		}
		if(rowname.length == 0) {
			rowname = StringTools.lpad(rowIdx == null ? "null" : "" + rowIdx,"0",4);
		}
		if(table.separators != null) {
			var newSepIdx = sepIdx;
			var _g2 = sepIdx + 1;
			var _g11 = table.separators.length;
			while(_g2 < _g11) {
				var i = _g2++;
				if(table.separators[i] > rowIdx) {
					break;
				}
				newSepIdx = i;
			}
			if(newSepIdx != sepIdx) {
				sepIdx = newSepIdx;
				sepTitle = table.props.separatorTitles[sepIdx];
				if(sepTitle == "") {
					sepTitle = "__UntitledSeparator" + sepIdx;
				}
				var dirPath = tablePath + "/" + sepTitle;
			}
		}
		if(sepTitle != null) {
			rowname = sepTitle + "/" + rowname;
		}
		tableIndex.push(rowname);
		var rowpath = tablePath + "/" + rowname + ".row";
		cdb_MultifileLoadSave.writeIfDiff(rowpath,JSON.stringify(row,null,"\t"));
	}
	cdb_MultifileLoadSave.writeIfDiff(tablePath + "/_table.index",JSON.stringify(tableIndex,null,"\t"));
};
cdb_MultifileLoadSave.writeIfDiff = function(path,contents) {
	var _this = cdb_MultifileLoadSave.saveStateOnDisk;
	if(__map_reserved[path] != null) {
		_this.setReserved(path,contents);
	} else {
		_this.h[path] = contents;
	}
	var _this1 = cdb_MultifileLoadSave.lastStateOnDisk;
	if((__map_reserved[path] != null ? _this1.getReserved(path) : _this1.h[path]) == contents) {
		return;
	}
	if(!sys_FileSystem.exists(haxe_io_Path.directory(path))) {
		sys_FileSystem.createDirectory(haxe_io_Path.directory(path));
	}
	js_node_Fs.writeFileSync(path,contents);
};
var cdb_Parser = function() { };
$hxClasses["cdb.Parser"] = cdb_Parser;
cdb_Parser.__name__ = "cdb.Parser";
cdb_Parser.saveType = function(t,legacyIntNames) {
	if(legacyIntNames == null) {
		legacyIntNames = false;
	}
	var baseName = null;
	if(legacyIntNames) {
		baseName = t._hx_index == null ? "null" : "" + t._hx_index;
	} else {
		switch(t._hx_index) {
		case 0:
			baseName = "Id";
			break;
		case 1:
			baseName = "String";
			break;
		case 2:
			baseName = "Bool";
			break;
		case 3:
			baseName = "Int";
			break;
		case 4:
			baseName = "Float";
			break;
		case 5:
			var _g2 = t.values;
			baseName = "Enum";
			break;
		case 6:
			var _g = t.sheet;
			baseName = "Ref";
			break;
		case 7:
			baseName = "Image";
			break;
		case 8:
			baseName = "List";
			break;
		case 9:
			var _g1 = t.name;
			baseName = "Custom";
			break;
		case 10:
			var _g3 = t.values;
			baseName = "Flags";
			break;
		case 11:
			baseName = "Color";
			break;
		case 12:
			var _g4 = t.type;
			baseName = "Layer";
			break;
		case 13:
			baseName = "File";
			break;
		case 14:
			baseName = "TilePos";
			break;
		case 15:
			baseName = "TileLayer";
			break;
		case 16:
			baseName = "Dynamic";
			break;
		case 17:
			baseName = "Properties";
			break;
		}
	}
	switch(t._hx_index) {
	case 5:
		var values = t.values;
		return baseName + ":" + values.join(",");
	case 6:
		var _g5 = t.sheet;
		return baseName + ":" + Std.string(Type.enumParameters(t)[0]);
	case 0:case 1:case 2:case 3:case 4:case 7:case 8:case 11:case 13:case 14:case 15:case 16:case 17:
		return baseName;
	case 9:
		var _g11 = t.name;
		return baseName + ":" + Std.string(Type.enumParameters(t)[0]);
	case 10:
		var values1 = t.values;
		return baseName + ":" + values1.join(",");
	case 12:
		var _g41 = t.type;
		return baseName + ":" + Std.string(Type.enumParameters(t)[0]);
	}
};
cdb_Parser.getType = function(str) {
	var colonIndex = str.indexOf(":");
	var afterColon = null;
	if(colonIndex > 0) {
		afterColon = HxOverrides.substr(str,colonIndex + 1,null);
		str = HxOverrides.substr(str,0,colonIndex);
	}
	switch(str) {
	case "0":case "Id":
		return cdb_ColumnType.TId;
	case "12":case "Layer":
		throw new js__$Boot_HaxeError("TLayer is unsupported.");
	case "16":case "Dynamic":
		return cdb_ColumnType.TDynamic;
	case "2":case "Bool":
		return cdb_ColumnType.TBool;
	case "3":case "Int":
		return cdb_ColumnType.TInt;
	case "4":case "Float":
		return cdb_ColumnType.TFloat;
	case "6":case "Ref":
		return cdb_ColumnType.TRef(afterColon);
	case "7":case "Image":
		throw new js__$Boot_HaxeError("TImage is unsupported.");
	case "9":case "Custom":
		throw new js__$Boot_HaxeError("TCustom is unsupported.");
	case "11":case "Color":
		return cdb_ColumnType.TColor;
	case "5":case "Enum":
		return cdb_ColumnType.TEnum(afterColon.split(","));
	case "13":case "File":
		return cdb_ColumnType.TFile;
	case "10":case "Flags":
		return cdb_ColumnType.TFlags(afterColon.split(","));
	case "8":case "List":
		return cdb_ColumnType.TList;
	case "17":case "Properties":
		return cdb_ColumnType.TProperties;
	case "1":case "String":
		return cdb_ColumnType.TString;
	case "15":case "TileLayer":
		return cdb_ColumnType.TTileLayer;
	case "14":case "TilePos":
		return cdb_ColumnType.TTilePos;
	default:
		throw new js__$Boot_HaxeError("Unknown type " + str);
	}
};
cdb_Parser.getHash = function(path) {
	var b = haxe_io_Bytes.ofString(cdb_MultifileLoadSave.getMonoCDB(path));
	return sys.ssl.Digest.make(b,"SHA256").toHex();
};
cdb_Parser.parseJson = function(content,editMode) {
	if(content == null) {
		throw new js__$Boot_HaxeError("CDB content is null");
	}
	var data = JSON.parse(content);
	if(data.format == cdb_MultifileLoadSave.MULTIFILE_FORMAT) {
		throw new js__$Boot_HaxeError("cannot use parseJson on a multifile cdb, use parseFrom instead");
	}
	cdb_Parser.postProcessParsedData(data,editMode);
	return data;
};
cdb_Parser.parseFrom = function(schemaPath,editMode) {
	var content = cdb_MultifileLoadSave.readFile(schemaPath);
	if(content == null) {
		throw new js__$Boot_HaxeError("CDB content is null");
	}
	var data = JSON.parse(content);
	if(data.format == cdb_MultifileLoadSave.MULTIFILE_FORMAT) {
		cdb_MultifileLoadSave.parseMultifileContents(data,schemaPath);
	}
	return cdb_Parser.postProcessParsedData(data,editMode);
};
cdb_Parser.postProcessParsedData = function(data,editMode) {
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g11 = s.columns;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			c.type = cdb_Parser.getType(c.typeStr);
			c.typeStr = null;
		}
	}
	var _g21 = 0;
	var _g3 = data.customTypes;
	while(_g21 < _g3.length) {
		var t = _g3[_g21];
		++_g21;
		var _g22 = 0;
		var _g31 = t.cases;
		while(_g22 < _g31.length) {
			var c1 = _g31[_g22];
			++_g22;
			var _g23 = 0;
			var _g32 = c1.args;
			while(_g23 < _g32.length) {
				var a = _g32[_g23];
				++_g23;
				a.type = cdb_Parser.getType(a.typeStr);
				a.typeStr = null;
			}
		}
	}
	if(editMode) {
		var _g4 = 0;
		var _g5 = data.sheets;
		while(_g4 < _g5.length) {
			var s1 = _g5[_g4];
			++_g4;
			if(s1.separators == null) {
				var idField = null;
				var _g41 = 0;
				var _g51 = s1.columns;
				while(_g41 < _g51.length) {
					var c2 = _g51[_g41];
					++_g41;
					if(c2.type == cdb_ColumnType.TId) {
						idField = c2.name;
						break;
					}
				}
				var indexMap = new haxe_ds_StringMap();
				var _g6 = 0;
				var _g7 = s1.lines.length;
				while(_g6 < _g7) {
					var i = _g6++;
					var l = s1.lines[i];
					var id = Reflect.field(l,idField);
					if(id != null) {
						if(__map_reserved[id] != null) {
							indexMap.setReserved(id,i);
						} else {
							indexMap.h[id] = i;
						}
					}
				}
				var ids = Reflect.field(s1,"separatorIds");
				var _g8 = [];
				var _g9 = 0;
				while(_g9 < ids.length) {
					var i1 = ids[_g9];
					++_g9;
					var tmp;
					if(typeof(i1) == "number" && ((i1 | 0) === i1)) {
						tmp = i1;
					} else {
						var key = i1;
						tmp = __map_reserved[key] != null ? indexMap.getReserved(key) : indexMap.h[key];
					}
					_g8.push(tmp);
				}
				s1.separators = _g8;
				Reflect.deleteField(s1,"separatorIds");
			}
		}
	}
	return data;
};
cdb_Parser.saveMultifile = function(data,outPath) {
	cdb_MultifileLoadSave.saveMultifileTableContents(data,outPath);
	cdb_MultifileLoadSave.saveMultifileRootSchema(data,outPath);
};
cdb_Parser.saveMonofile = function(data,compact,legacyFormat) {
	if(legacyFormat == null) {
		legacyFormat = false;
	}
	if(compact == null) {
		compact = false;
	}
	var formatBackup = data.format;
	var save = [];
	var seps = [];
	data.format = legacyFormat ? "legacy-monofile" : "ee-monofile";
	var _g = 0;
	var _g1 = data.sheets;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		var idField = null;
		var _g2 = 0;
		var _g11 = s.columns;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			if(c.type == cdb_ColumnType.TId && idField == null) {
				idField = c.name;
			}
			save.push(c.type);
			if(c.typeStr == null) {
				c.typeStr = cdb_Parser.saveType(c.type,legacyFormat);
			}
			Reflect.deleteField(c,"type");
		}
		var oldSeps = null;
		if(!legacyFormat && idField != null && s.separators.length > 0) {
			var uniqueIDs = true;
			var uids = new haxe_ds_StringMap();
			var _g21 = 0;
			var _g3 = s.lines;
			while(_g21 < _g3.length) {
				var l = _g3[_g21];
				++_g21;
				var id = Reflect.field(l,idField);
				if(id != null) {
					if(__map_reserved[id] != null ? uids.getReserved(id) : uids.h[id]) {
						uniqueIDs = false;
						break;
					}
					if(__map_reserved[id] != null) {
						uids.setReserved(id,true);
					} else {
						uids.h[id] = true;
					}
				}
			}
			if(uniqueIDs) {
				var _g4 = [];
				var _g5 = 0;
				var _g6 = s.separators;
				while(_g5 < _g6.length) {
					var i = _g6[_g5];
					++_g5;
					var id1 = s.lines[i] != null ? Reflect.field(s.lines[i],idField) : null;
					_g4.push(id1 == null || id1 == "" ? i : id1);
				}
				s["separatorIds"] = _g4;
				oldSeps = s.separators;
				Reflect.deleteField(s,"separators");
			}
		}
		seps.push(oldSeps);
		if(legacyFormat && s.props.hasIndex) {
			var _g22 = 0;
			var _g31 = s.lines.length;
			while(_g22 < _g31) {
				var rowIdx = _g22++;
				s.lines[rowIdx]["index"] = rowIdx;
			}
		}
	}
	var _g23 = 0;
	var _g32 = data.customTypes;
	while(_g23 < _g32.length) {
		var t = _g32[_g23];
		++_g23;
		var _g24 = 0;
		var _g33 = t.cases;
		while(_g24 < _g33.length) {
			var c1 = _g33[_g24];
			++_g24;
			var _g25 = 0;
			var _g34 = c1.args;
			while(_g25 < _g34.length) {
				var a = _g34[_g25];
				++_g25;
				save.push(a.type);
				if(a.typeStr == null) {
					a.typeStr = cdb_Parser.saveType(a.type);
				}
				Reflect.deleteField(a,"type");
			}
		}
	}
	var str = JSON.stringify(data,null,compact ? null : "\t");
	data.format = formatBackup;
	var _g41 = 0;
	var _g51 = data.sheets;
	while(_g41 < _g51.length) {
		var s1 = _g51[_g41];
		++_g41;
		var _g42 = 0;
		var _g52 = s1.columns;
		while(_g42 < _g52.length) {
			var c2 = _g52[_g42];
			++_g42;
			c2.type = save.shift();
		}
		var oldSeps1 = seps.shift();
		if(oldSeps1 != null) {
			s1.separators = oldSeps1;
			Reflect.deleteField(s1,"separatorIds");
		}
		if(legacyFormat && s1.props.hasIndex) {
			var _g61 = 0;
			var _g7 = s1.lines;
			while(_g61 < _g7.length) {
				var l1 = _g7[_g61];
				++_g61;
				Reflect.deleteField(l1,"index");
			}
		}
	}
	var _g62 = 0;
	var _g71 = data.customTypes;
	while(_g62 < _g71.length) {
		var t1 = _g71[_g62];
		++_g62;
		var _g63 = 0;
		var _g72 = t1.cases;
		while(_g63 < _g72.length) {
			var c3 = _g72[_g63];
			++_g63;
			var _g64 = 0;
			var _g73 = c3.args;
			while(_g64 < _g73.length) {
				var a1 = _g73[_g64];
				++_g64;
				a1.type = save.shift();
			}
		}
	}
	return str;
};
var cdb_Sheet = function(base,sheet,path,parent) {
	this.base = base;
	this.sheet = sheet;
	this.path = path;
	this.parent = parent;
};
$hxClasses["cdb.Sheet"] = cdb_Sheet;
cdb_Sheet.__name__ = "cdb.Sheet";
cdb_Sheet.prototype = {
	get_lines: function() {
		return this.sheet.lines;
	}
	,get_props: function() {
		return this.sheet.props;
	}
	,get_columns: function() {
		return this.sheet.columns;
	}
	,get_name: function() {
		return this.sheet.name;
	}
	,get_separators: function() {
		return this.sheet.separators;
	}
	,isLevel: function() {
		return this.sheet.props.level != null;
	}
	,getSub: function(c) {
		return this.base.getSheet(this.sheet.name + "@" + c.name);
	}
	,getNestedPos: function(rowIndex) {
		var pos;
		var colName;
		if(this.parent == null) {
			pos = [];
			colName = this.sheet.name;
		} else {
			colName = this.parent.sheet.sheet.columns[this.parent.column].name;
			pos = this.parent.sheet.getNestedPos(this.parent.line);
			if(this.parent.sheet.sheet.columns[this.parent.column].type == cdb_ColumnType.TProperties) {
				return pos;
			}
		}
		pos.push({ col : colName, row : rowIndex});
		return pos;
	}
	,getParent: function() {
		if(!this.sheet.props.hide) {
			return null;
		}
		var parts = this.sheet.name.split("@");
		var colName = parts.pop();
		return { s : this.base.getSheet(parts.join("@")), c : colName};
	}
	,getLines: function() {
		var p = this.getParent();
		if(p == null) {
			return this.sheet.lines;
		}
		if(p.s.sheet.props.level != null && p.c == "tileProps") {
			var all = [];
			var sets = p.s.sheet.props.level.tileSets;
			var _g = 0;
			var _g1 = Reflect.fields(sets);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				var t = Reflect.field(sets,f);
				if(t.props == null) {
					continue;
				}
				var _g2 = 0;
				var _g11 = t.props;
				while(_g2 < _g11.length) {
					var p1 = _g11[_g2];
					++_g2;
					if(p1 != null) {
						all.push(p1);
					}
				}
			}
			return all;
		}
		var all1 = [];
		if(this.sheet.props.isProps) {
			var _g3 = 0;
			var _g12 = p.s.getLines();
			while(_g3 < _g12.length) {
				var obj = _g12[_g3];
				++_g3;
				var v = Reflect.field(obj,p.c);
				if(v != null) {
					all1.push(v);
				}
			}
		} else {
			var _g4 = 0;
			var _g13 = p.s.getLines();
			while(_g4 < _g13.length) {
				var obj1 = _g13[_g4];
				++_g4;
				var v1 = Reflect.field(obj1,p.c);
				if(v1 != null) {
					var _g5 = 0;
					while(_g5 < v1.length) {
						var v2 = v1[_g5];
						++_g5;
						all1.push(v2);
					}
				}
			}
		}
		return all1;
	}
	,getObjects: function() {
		var p = this.getParent();
		if(p == null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.sheet.lines.length;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push({ path : [this.sheet.lines[i]], indexes : [i]});
			}
			return _g;
		}
		var all = [];
		var _g3 = 0;
		var _g11 = p.s.getObjects();
		while(_g3 < _g11.length) {
			var obj = _g11[_g3];
			++_g3;
			var v = Reflect.field(obj.path[obj.path.length - 1],p.c);
			if(v != null) {
				var _g4 = 0;
				var _g12 = v.length;
				while(_g4 < _g12) {
					var i1 = _g4++;
					var sobj = v[i1];
					var p1 = obj.path.slice();
					var idx = obj.indexes.slice();
					p1.push(sobj);
					idx.push(i1);
					all.push({ path : p1, indexes : idx});
				}
			}
		}
		return all;
	}
	,newLine: function(index) {
		var o = { };
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = this.base.getDefault(c,null,this);
			if(d != null) {
				o[c.name] = d;
			}
		}
		if(index == null) {
			this.sheet.lines.push(o);
		} else {
			var _g2 = 0;
			var _g3 = this.sheet.separators.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var s = this.sheet.separators[i];
				if(s > index) {
					this.sheet.separators[i] = s + 1;
				}
			}
			this.sheet.lines.splice(index + 1,0,o);
			var _g4 = [];
			var _g5 = 0;
			var _g6 = this.sheet.lines.length;
			while(_g5 < _g6) {
				var i1 = _g5++;
				_g4.push(i1 <= index ? i1 : i1 + 1);
			}
			this.changeLineOrder(_g4);
		}
		return o;
	}
	,getPath: function() {
		if(this.path == null) {
			return this.sheet.name;
		} else {
			return this.path;
		}
	}
	,hasColumn: function(name,types) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				if(types != null) {
					var _g2 = 0;
					while(_g2 < types.length) {
						var t = types[_g2];
						++_g2;
						if(Type.enumEq(c.type,t)) {
							return true;
						}
					}
					return false;
				}
				return true;
			}
		}
		return false;
	}
	,moveLine: function(opStack,index,delta) {
		if(this.sheet == null || delta == 0) {
			return null;
		}
		if(delta < 0) {
			var _g = 0;
			var _g1 = this.sheet.separators.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.sheet.separators[i] == index) {
					var i1 = i;
					while(i1 < this.sheet.separators.length - 1 && this.sheet.separators[i1 + 1] == index) ++i1;
					opStack.push(new ops_SeparatorMove(this,i1,this.sheet.separators[i1] + 1));
					return index;
				}
			}
			if(index <= 0) {
				return null;
			}
		} else if(delta > 0) {
			var _g2 = 0;
			var _g11 = this.sheet.separators.length;
			while(_g2 < _g11) {
				var i2 = _g2++;
				if(this.sheet.separators[i2] == index + 1) {
					opStack.push(new ops_SeparatorMove(this,i2,this.sheet.separators[i2] - 1));
					return index;
				}
			}
			if(index >= this.sheet.lines.length - 1) {
				return null;
			}
		} else {
			return null;
		}
		var nested = this.getNestedPos(index);
		opStack.push(new ops_RowMove(nested,index + delta));
		return index + delta;
	}
	,deleteLine: function(index) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.sheet.lines.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(i < index ? i : i - 1);
		}
		var arr = _g;
		arr[index] = -1;
		this.changeLineOrder(arr);
		this.sheet.lines.splice(index,1);
		var prev = -1;
		var toRemove = null;
		var _g3 = 0;
		var _g4 = this.sheet.separators.length;
		while(_g3 < _g4) {
			var i1 = _g3++;
			var s = this.sheet.separators[i1];
			if(s > index) {
				if(prev == s) {
					toRemove = i1;
				}
				this.sheet.separators[i1] = s - 1;
			} else {
				prev = s;
			}
		}
		if(toRemove != null) {
			this.sheet.separators.splice(toRemove,1);
			if(this.sheet.props.separatorTitles != null) {
				this.sheet.props.separatorTitles.splice(toRemove,1);
			}
		}
	}
	,deleteColumn: function(cname) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == cname) {
				HxOverrides.remove(this.sheet.columns,c);
				var _g2 = 0;
				var _g11 = this.getLines();
				while(_g2 < _g11.length) {
					var o = _g11[_g2];
					++_g2;
					Reflect.deleteField(o,c.name);
				}
				if(this.sheet.props.displayColumn == c.name) {
					this.sheet.props.displayColumn = null;
					this.sync();
				}
				if(this.sheet.props.displayIcon == c.name) {
					this.sheet.props.displayIcon = null;
					this.sync();
				}
				if(c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties) {
					this.base.deleteSheet(this.base.getSheet(this.sheet.name + "@" + c.name));
				}
				return true;
			}
		}
		return false;
	}
	,addColumn: function(c,index) {
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c2 = _g1[_g];
			++_g;
			if(c2.name == c.name) {
				return "Column already exists";
			} else if(c2.type == cdb_ColumnType.TId && c.type == cdb_ColumnType.TId) {
				return "Only one ID allowed";
			}
		}
		if(c.name == "index" && this.sheet.props.hasIndex) {
			return "Sheet already has an index";
		}
		if(c.name == "group" && this.sheet.props.hasGroup) {
			return "Sheet already has a group";
		}
		if(index == null) {
			this.sheet.columns.push(c);
		} else {
			this.sheet.columns.splice(index,0,c);
		}
		if(c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties) {
			this.base.createSubSheet(this,c);
		}
		var _g2 = 0;
		var _g3 = this.getLines();
		while(_g2 < _g3.length) {
			var i = _g3[_g2];
			++_g2;
			var def = this.base.getDefault(c,null,this);
			if(def != null) {
				i[c.name] = def;
			}
		}
		return null;
	}
	,getDefaults: function() {
		var props = { };
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var d = this.base.getDefault(c,null,this);
			if(d != null) {
				props[c.name] = d;
			}
		}
		return props;
	}
	,objToString: function(obj,esc) {
		if(esc == null) {
			esc = false;
		}
		if(obj == null) {
			return "null";
		}
		var fl = [];
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var v = Reflect.field(obj,c.name);
			if(v == null) {
				continue;
			}
			fl.push(c.name + " : " + this.colToString(c,v,esc));
		}
		if(fl.length == 0) {
			return "{}";
		}
		return "{ " + fl.join(", ") + " }";
	}
	,colToString: function(c,v,esc) {
		if(esc == null) {
			esc = false;
		}
		if(v == null) {
			return "null";
		}
		if(c.type._hx_index == 8) {
			var a = v;
			if(a.length == 0) {
				return "[]";
			}
			var s = this.base.getSheet(this.sheet.name + "@" + c.name);
			var _g = [];
			var _g1 = 0;
			while(_g1 < a.length) {
				var v1 = a[_g1];
				++_g1;
				_g.push(s.objToString(v1,esc));
			}
			return "[ " + _g.join(", ") + " ]";
		} else {
			return this.base.valToString(c.type,v,esc);
		}
	}
	,changeLineOrder: function(remap) {
		var anyModifications = false;
		var _g = 0;
		var _g1 = this.base.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = s.sheet.columns;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				var _g3 = c.type;
				if(_g3._hx_index == 12) {
					var t = _g3.type;
					if(t == this.sheet.name) {
						var _g4 = 0;
						var _g12 = s.getLines();
						while(_g4 < _g12.length) {
							var obj = _g12[_g4];
							++_g4;
							var ldat = Reflect.field(obj,c.name);
							if(ldat == null || ldat == "") {
								continue;
							}
							var _g5 = [];
							var _g13 = 0;
							while(_g13 < 256) {
								var i = _g13++;
								_g5.push(i);
							}
							var d = cdb__$Types_Layer_$Impl_$.decode(ldat,_g5);
							var _g21 = 0;
							var _g31 = d.length;
							while(_g21 < _g31) {
								var i1 = _g21++;
								var r = remap[d[i1]];
								if(r < 0) {
									r = 0;
								}
								d[i1] = r;
							}
							ldat = cdb__$Types_Layer_$Impl_$.encode(d,this.base.data.compress);
							obj[c.name] = ldat;
							anyModifications = false;
						}
					}
				}
			}
		}
		return anyModifications;
	}
	,getReferences: function(index) {
		var id = null;
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type._hx_index == 0) {
				id = Reflect.field(this.sheet.lines[index],c.name);
				break;
			}
		}
		if(id == "" || id == null) {
			return null;
		}
		var results = [];
		var _g2 = 0;
		var _g3 = this.base.sheets;
		while(_g2 < _g3.length) {
			var s = _g3[_g2];
			++_g2;
			var _g21 = 0;
			var _g31 = s.sheet.columns;
			while(_g21 < _g31.length) {
				var c1 = _g31[_g21];
				++_g21;
				var _g22 = c1.type;
				switch(_g22._hx_index) {
				case 6:
					var sname = _g22.sheet;
					if(sname == this.sheet.name) {
						var sheets = [];
						var p = { s : s, c : c1.name, id : null};
						while(true) {
							var _g23 = 0;
							var _g32 = p.s.sheet.columns;
							while(_g23 < _g32.length) {
								var c2 = _g32[_g23];
								++_g23;
								if(c2.type._hx_index == 0) {
									p.id = c2.name;
									break;
								}
							}
							sheets.unshift(p);
							var p2 = p.s.getParent();
							if(p2 == null) {
								break;
							}
							p = { s : p2.s, c : p2.c, id : null};
						}
						var _g24 = 0;
						var _g33 = s.getObjects();
						while(_g24 < _g33.length) {
							var o = _g33[_g24];
							++_g24;
							var obj = o.path[o.path.length - 1];
							if(Reflect.field(obj,c1.name) == id) {
								results.push({ s : sheets, o : o});
							}
						}
					}
					break;
				case 9:
					var tname = _g22.name;
					break;
				default:
				}
			}
		}
		return results;
	}
	,sortById: function(a,b) {
		if(a.disp > b.disp) {
			return 1;
		} else {
			return -1;
		}
	}
	,rename: function(name) {
		this.base.smap.remove(this.sheet.name);
		this.sheet.name = name;
		var _this = this.base.smap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,this);
		} else {
			_this.h[name] = this;
		}
	}
	,sync: function() {
		this.index = new haxe_ds_StringMap();
		this.all = [];
		var cid = null;
		var lines = this.getLines();
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type == cdb_ColumnType.TId) {
				var _g2 = 0;
				while(_g2 < lines.length) {
					var l = lines[_g2];
					++_g2;
					var v = Reflect.field(l,c.name);
					if(v != null && v != "") {
						var disp = v;
						var ico = null;
						if(this.sheet.props.displayColumn != null) {
							disp = Reflect.field(l,this.sheet.props.displayColumn);
							if(disp == null || disp == "") {
								disp = "#" + v;
							}
						}
						if(this.sheet.props.displayIcon != null) {
							ico = Reflect.field(l,this.sheet.props.displayIcon);
						}
						var o = { id : v, disp : disp, ico : ico, obj : l};
						var _this = this.index;
						if((__map_reserved[v] != null ? _this.getReserved(v) : _this.h[v]) == null) {
							var _this1 = this.index;
							if(__map_reserved[v] != null) {
								_this1.setReserved(v,o);
							} else {
								_this1.h[v] = o;
							}
						}
						this.all.push(o);
					}
				}
				this.all.sort($bind(this,this.sortById));
				break;
			}
		}
		var key = this.sheet.name;
		var _this2 = this.base.smap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,this);
		} else {
			_this2.h[key] = this;
		}
	}
	,__class__: cdb_Sheet
};
var cdb_TileBuilder = function(t,stride,total) {
	this.borders = [];
	this.groundIds = new haxe_ds_StringMap();
	this.groundMap = [];
	var _g = 0;
	var _g1 = total + 1;
	while(_g < _g1) {
		var i = _g++;
		this.groundMap[i] = 0;
	}
	this.groundMap[0] = 0;
	this.borders = [];
	var tmp = new haxe_ds_StringMap();
	var _g2 = 0;
	var _g3 = t.sets;
	while(_g2 < _g3.length) {
		var s = _g3[_g2];
		++_g2;
		if(s.t == "ground") {
			if(s.opts.name != "" && s.opts.name != null) {
				var key = s.opts.name;
				var g = __map_reserved[key] != null ? tmp.getReserved(key) : tmp.h[key];
				if(g == null) {
					g = [];
					var key1 = s.opts.name;
					if(__map_reserved[key1] != null) {
						tmp.setReserved(key1,g);
					} else {
						tmp.h[key1] = g;
					}
				}
				g.push(s);
			}
		}
	}
	var allGrounds = Lambda.array(tmp);
	allGrounds.sort(function(g1,g2) {
		var v = g1[0].opts.priority;
		var v1 = g2[0].opts.priority;
		var dp = (v == null ? 0 : v) - (v1 == null ? 0 : v1);
		if(dp != 0) {
			return dp;
		} else {
			return Reflect.compare(g1[0].opts.name,g2[0].opts.name);
		}
	});
	var gid = 0;
	var _g4 = 0;
	while(_g4 < allGrounds.length) {
		var g3 = allGrounds[_g4];
		++_g4;
		var v2 = g3[0].opts.priority;
		var p = v2 == null ? 0 : v2;
		if(p > 0) {
			++gid;
		}
		var fill = [];
		var _g41 = 0;
		while(_g41 < g3.length) {
			var s1 = g3[_g41];
			++_g41;
			var _g42 = 0;
			var _g5 = s1.w;
			while(_g42 < _g5) {
				var dx = _g42++;
				var _g43 = 0;
				var _g51 = s1.h;
				while(_g43 < _g51) {
					var dy = _g43++;
					var tid = s1.x + dx + (s1.y + dy) * stride;
					fill.push(tid);
					this.groundMap[tid + 1] = gid;
				}
			}
		}
		var key2 = g3[0].opts.name;
		var _this = this.groundIds;
		var value = { id : gid, fill : fill};
		if(__map_reserved[key2] != null) {
			_this.setReserved(key2,value);
		} else {
			_this.h[key2] = value;
		}
	}
	var maxGid = gid + 1;
	var allBorders = [];
	var _g52 = 0;
	var _g6 = t.sets;
	while(_g52 < _g6.length) {
		var s2 = _g6[_g52];
		++_g52;
		if(s2.t == "border") {
			allBorders.push(s2);
		}
	}
	allBorders.sort(function(b1,b2) {
		var k = 0;
		if(b1.opts.borderIn != null) {
			++k;
		}
		if(b1.opts.borderOut != null) {
			k += 2;
		}
		if(b1.opts.borderMode != null) {
			k += 4;
		}
		if(b1.opts.borderIn != null && b1.opts.borderOut != null && b1.opts.borderIn != "lower" && b1.opts.borderOut != "upper") {
			k += 8;
		}
		var k1 = 0;
		if(b2.opts.borderIn != null) {
			++k1;
		}
		if(b2.opts.borderOut != null) {
			k1 += 2;
		}
		if(b2.opts.borderMode != null) {
			k1 += 4;
		}
		if(b2.opts.borderIn != null && b2.opts.borderOut != null && b2.opts.borderIn != "lower" && b2.opts.borderOut != "upper") {
			k1 += 8;
		}
		return k - k1;
	});
	var _g7 = 0;
	while(_g7 < allBorders.length) {
		var b = allBorders[_g7];
		++_g7;
		var gid1;
		if(b.opts.borderIn == null) {
			gid1 = null;
		} else {
			var key3 = b.opts.borderIn;
			var _this1 = this.groundIds;
			gid1 = __map_reserved[key3] != null ? _this1.getReserved(key3) : _this1.h[key3];
		}
		var tid1;
		if(b.opts.borderOut == null) {
			tid1 = null;
		} else {
			var key4 = b.opts.borderOut;
			var _this2 = this.groundIds;
			tid1 = __map_reserved[key4] != null ? _this2.getReserved(key4) : _this2.h[key4];
		}
		if(gid1 == null && tid1 == null) {
			continue;
		}
		var gids;
		var tids;
		if(gid1 != null) {
			gids = [gid1.id];
		} else {
			var _g71 = b.opts.borderIn;
			if(_g71 == null) {
				var _g72 = [];
				var _g8 = tid1.id + 1;
				var _g9 = maxGid;
				while(_g8 < _g9) {
					var g4 = _g8++;
					_g72.push(g4);
				}
				gids = _g72;
			} else if(_g71 == "lower") {
				var _g73 = [];
				var _g81 = 0;
				var _g91 = tid1.id;
				while(_g81 < _g91) {
					var g5 = _g81++;
					_g73.push(g5);
				}
				gids = _g73;
			} else {
				continue;
			}
		}
		if(tid1 != null) {
			tids = [tid1.id];
		} else {
			var _g74 = b.opts.borderOut;
			if(_g74 == null) {
				var _g75 = [];
				var _g82 = 0;
				var _g92 = gid1.id;
				while(_g82 < _g92) {
					var g6 = _g82++;
					_g75.push(g6);
				}
				tids = _g75;
			} else if(_g74 == "upper") {
				var _g76 = [];
				var _g83 = gid1.id + 1;
				var _g93 = maxGid;
				while(_g83 < _g93) {
					var g7 = _g83++;
					_g76.push(g7);
				}
				tids = _g76;
			} else {
				continue;
			}
		}
		var clear = gid1 != null && tid1 != null && b.opts.borderMode == null;
		var _g77 = b.opts.borderMode;
		if(_g77 != null) {
			if(_g77 == "corner") {
				var tmp1 = gids;
				gids = tids;
				tids = tmp1;
			}
		}
		var _g84 = 0;
		while(_g84 < gids.length) {
			var g8 = gids[_g84];
			++_g84;
			var _g85 = 0;
			while(_g85 < tids.length) {
				var t1 = tids[_g85];
				++_g85;
				var bt = this.borders[g8 + t1 * 256];
				if(bt == null || clear) {
					var _g86 = [];
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					_g86.push([]);
					bt = _g86;
					if(gid1 != null) {
						bt[8] = gid1.fill;
					}
					this.borders[g8 + t1 * 256] = bt;
				}
				var _g87 = 0;
				var _g94 = b.w;
				while(_g87 < _g94) {
					var dx1 = _g87++;
					var _g88 = 0;
					var _g95 = b.h;
					while(_g88 < _g95) {
						var dy1 = _g88++;
						var k2;
						var _g89 = b.opts.borderMode;
						if(_g89 == null) {
							if(dy1 == 0) {
								k2 = dx1 == 0 ? 0 : dx1 == b.w - 1 ? 2 : 1;
							} else if(dy1 == b.h - 1) {
								k2 = dx1 == 0 ? 5 : dx1 == b.w - 1 ? 7 : 6;
							} else if(dx1 == 0) {
								k2 = 3;
							} else if(dx1 == b.w - 1) {
								k2 = 4;
							} else {
								continue;
							}
						} else {
							switch(_g89) {
							case "bottom":
								k2 = dx1 == 0 ? 17 : dx1 == b.w - 1 ? 19 : 18;
								break;
							case "corner":
								if(dx1 == 0 && dy1 == 0) {
									k2 = 9;
								} else if(dx1 == b.w - 1 && dy1 == 0) {
									k2 = 10;
								} else if(dx1 == 0 && dy1 == b.h - 1) {
									k2 = 11;
								} else if(dx1 == b.w - 1 && dy1 == b.h - 1) {
									k2 = 12;
								} else {
									continue;
								}
								break;
							case "u":
								if(dx1 == 1 && dy1 == 0) {
									k2 = 13;
								} else if(dx1 == 0 && dy1 == 1) {
									k2 = 14;
								} else if(dx1 == 2 && dy1 == 1) {
									k2 = 15;
								} else if(dx1 == 1 && dy1 == 2) {
									k2 = 16;
								} else {
									continue;
								}
								break;
							default:
								continue;
							}
						}
						bt[k2].push(b.x + dx1 + (b.y + dy1) * stride);
					}
				}
			}
		}
	}
};
$hxClasses["cdb.TileBuilder"] = cdb_TileBuilder;
cdb_TileBuilder.__name__ = "cdb.TileBuilder";
cdb_TileBuilder.prototype = {
	random: function(n) {
		n *= -862048943;
		n = n << 15 | n >>> 17;
		n *= 461845907;
		var h = 5381;
		h ^= n;
		h = h << 13 | h >>> 19;
		h = h * 5 + (-430675100);
		h ^= h >> 16;
		h *= -2048144789;
		h ^= h >> 13;
		h *= -1028477387;
		h ^= h >> 16;
		return h;
	}
	,buildGrounds: function(input,width) {
		var _gthis = this;
		var height = input.length / width | 0;
		var p = -1;
		var out = [];
		var _g = 0;
		var _g1 = height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g11 = width;
			while(_g2 < _g11) {
				var x = _g2++;
				var v = input[++p];
				var g = this.groundMap[v];
				var gl = x == 0 ? g : this.groundMap[input[p - 1]];
				var gr = x == width - 1 ? g : this.groundMap[input[p + 1]];
				var gt = y == 0 ? g : this.groundMap[input[p - width]];
				var gb = y == height - 1 ? g : this.groundMap[input[p + width]];
				var gtl = x == 0 || y == 0 ? g : this.groundMap[input[p - 1 - width]];
				var gtr = x == width - 1 || y == 0 ? g : this.groundMap[input[p + 1 - width]];
				var gbl = x == 0 || y == height - 1 ? g : this.groundMap[input[p - 1 + width]];
				var gbr = x == width - 1 || y == height - 1 ? g : this.groundMap[input[p + 1 + width]];
				var a = gr > gl ? gr : gl;
				var b = gt > gb ? gt : gb;
				var a1 = a > b ? a : b;
				var a2 = gtr > gtl ? gtr : gtl;
				var b1 = gbr > gbl ? gbr : gbl;
				var b2 = a2 > b1 ? a2 : b1;
				var max = a1 > b2 ? a1 : b2;
				var a3 = gr > gl ? gl : gr;
				var b3 = gt > gb ? gb : gt;
				var a4 = a3 > b3 ? b3 : a3;
				var a5 = gtr > gtl ? gtl : gtr;
				var b4 = gbr > gbl ? gbl : gbr;
				var b5 = a5 > b4 ? b4 : a5;
				var min = a4 > b5 ? b5 : a4;
				var _g3 = min;
				var _g12 = max + 1;
				while(_g3 < _g12) {
					var t = _g3++;
					var bb = this.borders[t + g * 256];
					if(bb == null) {
						continue;
					}
					var bits = 0;
					if(t == gtl) {
						bits |= 1;
					}
					if(t == gt) {
						bits |= 2;
					}
					if(t == gtr) {
						bits |= 4;
					}
					if(t == gl) {
						bits |= 8;
					}
					if(t == gr) {
						bits |= 16;
					}
					if(t == gbl) {
						bits |= 32;
					}
					if(t == gb) {
						bits |= 64;
					}
					if(t == gbr) {
						bits |= 128;
					}
					var f = false;
					if((bits & 26) == 26) {
						var a6 = bb[13];
						if(a6.length != 0) {
							bits &= -32;
							out.push(x);
							out.push(y);
							out.push(a6.length == 1 ? a6[0] : a6[_gthis.random(x + y * width) % a6.length]);
							f = true;
						}
					}
					var f1 = false;
					if((bits & 74) == 74) {
						var a7 = bb[14];
						if(a7.length != 0) {
							bits &= -108;
							out.push(x);
							out.push(y);
							out.push(a7.length == 1 ? a7[0] : a7[_gthis.random(x + y * width) % a7.length]);
							f1 = true;
						}
					}
					var f2 = false;
					if((bits & 82) == 82) {
						var a8 = bb[15];
						if(a8.length != 0) {
							bits &= -215;
							out.push(x);
							out.push(y);
							out.push(a8.length == 1 ? a8[0] : a8[_gthis.random(x + y * width) % a8.length]);
							f2 = true;
						}
					}
					var f3 = false;
					if((bits & 88) == 88) {
						var a9 = bb[16];
						if(a9.length != 0) {
							bits &= -249;
							out.push(x);
							out.push(y);
							out.push(a9.length == 1 ? a9[0] : a9[_gthis.random(x + y * width) % a9.length]);
							f3 = true;
						}
					}
					var f4 = false;
					if((bits & 10) == 10) {
						var a10 = bb[9];
						if(a10.length != 0) {
							bits &= -48;
							out.push(x);
							out.push(y);
							out.push(a10.length == 1 ? a10[0] : a10[_gthis.random(x + y * width) % a10.length]);
							f4 = true;
						}
					}
					var f5 = false;
					if((bits & 18) == 18) {
						var a11 = bb[10];
						if(a11.length != 0) {
							bits &= -152;
							out.push(x);
							out.push(y);
							out.push(a11.length == 1 ? a11[0] : a11[_gthis.random(x + y * width) % a11.length]);
							f5 = true;
						}
					}
					var f6 = false;
					if((bits & 72) == 72) {
						var a12 = bb[11];
						if(a12.length != 0) {
							bits &= -234;
							out.push(x);
							out.push(y);
							out.push(a12.length == 1 ? a12[0] : a12[_gthis.random(x + y * width) % a12.length]);
							f6 = true;
						}
					}
					var f7 = false;
					if((bits & 80) == 80) {
						var a13 = bb[12];
						if(a13.length != 0) {
							bits &= -245;
							out.push(x);
							out.push(y);
							out.push(a13.length == 1 ? a13[0] : a13[_gthis.random(x + y * width) % a13.length]);
							f7 = true;
						}
					}
					var f8 = false;
					if((bits & 2) == 2) {
						var a14 = bb[6];
						if(a14.length != 0) {
							bits &= -8;
							out.push(x);
							out.push(y);
							out.push(a14.length == 1 ? a14[0] : a14[_gthis.random(x + y * width) % a14.length]);
							f8 = true;
						}
					}
					if(f8) {
						var a15 = bb[18];
						if(a15.length != 0) {
							out.push(x);
							out.push(y + 1);
							if(x > 0 && y > 0 && this.groundMap[input[p - 1 - width]] != t) {
								out.push(a15[0]);
							} else if(x < width - 1 && y > 0 && this.groundMap[input[p + 1 - width]] != t) {
								out.push(a15[a15.length - 1]);
							} else if(a15.length == 1) {
								out.push(a15[0]);
							} else {
								out.push(a15[1 + this.random(x + y * width) % (a15.length - 2)]);
							}
						}
					}
					var f9 = false;
					if((bits & 8) == 8) {
						var a16 = bb[4];
						if(a16.length != 0) {
							bits &= -42;
							out.push(x);
							out.push(y);
							out.push(a16.length == 1 ? a16[0] : a16[_gthis.random(x + y * width) % a16.length]);
							f9 = true;
						}
					}
					var f10 = false;
					if((bits & 16) == 16) {
						var a17 = bb[3];
						if(a17.length != 0) {
							bits &= -149;
							out.push(x);
							out.push(y);
							out.push(a17.length == 1 ? a17[0] : a17[_gthis.random(x + y * width) % a17.length]);
							f10 = true;
						}
					}
					var f11 = false;
					if((bits & 64) == 64) {
						var a18 = bb[1];
						if(a18.length != 0) {
							bits &= -225;
							out.push(x);
							out.push(y);
							out.push(a18.length == 1 ? a18[0] : a18[_gthis.random(x + y * width) % a18.length]);
							f11 = true;
						}
					}
					var f12 = false;
					if((bits & 1) == 1) {
						var a19 = bb[7];
						if(a19.length != 0) {
							bits &= -2;
							out.push(x);
							out.push(y);
							out.push(a19.length == 1 ? a19[0] : a19[_gthis.random(x + y * width) % a19.length]);
							f12 = true;
						}
					}
					if(f12) {
						var a20 = bb[19];
						if(a20.length != 0) {
							var y1 = y + 1;
							out.push(x);
							out.push(y1);
							out.push(a20.length == 1 ? a20[0] : a20[_gthis.random(x + y1 * width) % a20.length]);
						}
					}
					var f13 = false;
					if((bits & 4) == 4) {
						var a21 = bb[5];
						if(a21.length != 0) {
							bits &= -5;
							out.push(x);
							out.push(y);
							out.push(a21.length == 1 ? a21[0] : a21[_gthis.random(x + y * width) % a21.length]);
							f13 = true;
						}
					}
					if(f13) {
						var a22 = bb[17];
						if(a22.length != 0) {
							var y2 = y + 1;
							out.push(x);
							out.push(y2);
							out.push(a22.length == 1 ? a22[0] : a22[_gthis.random(x + y2 * width) % a22.length]);
						}
					}
					var f14 = false;
					if((bits & 32) == 32) {
						var a23 = bb[2];
						if(a23.length != 0) {
							bits &= -33;
							out.push(x);
							out.push(y);
							out.push(a23.length == 1 ? a23[0] : a23[_gthis.random(x + y * width) % a23.length]);
							f14 = true;
						}
					}
					var f15 = false;
					if((bits & 128) == 128) {
						var a24 = bb[0];
						if(a24.length != 0) {
							bits &= -129;
							out.push(x);
							out.push(y);
							out.push(a24.length == 1 ? a24[0] : a24[_gthis.random(x + y * width) % a24.length]);
							f15 = true;
						}
					}
				}
			}
		}
		return out;
	}
	,__class__: cdb_TileBuilder
};
var cdb__$Types_ArrayIterator = function(a) {
	this.a = a;
	this.pos = 0;
};
$hxClasses["cdb._Types.ArrayIterator"] = cdb__$Types_ArrayIterator;
cdb__$Types_ArrayIterator.__name__ = "cdb._Types.ArrayIterator";
cdb__$Types_ArrayIterator.prototype = {
	hasNext: function() {
		return this.pos < this.a.length;
	}
	,next: function() {
		return this.a[this.pos++];
	}
	,__class__: cdb__$Types_ArrayIterator
};
var cdb__$Types_FlagsIterator = function(flags) {
	this.flags = flags;
	this.k = 0;
};
$hxClasses["cdb._Types.FlagsIterator"] = cdb__$Types_FlagsIterator;
cdb__$Types_FlagsIterator.__name__ = "cdb._Types.FlagsIterator";
cdb__$Types_FlagsIterator.prototype = {
	hasNext: function() {
		return this.flags >= 1 << this.k;
	}
	,next: function() {
		while((this.flags & 1 << this.k) == 0) this.k++;
		return this.k++;
	}
	,__class__: cdb__$Types_FlagsIterator
};
var cdb__$Types_ArrayRead_$Impl_$ = {};
$hxClasses["cdb._Types.ArrayRead_Impl_"] = cdb__$Types_ArrayRead_$Impl_$;
cdb__$Types_ArrayRead_$Impl_$.__name__ = "cdb._Types.ArrayRead_Impl_";
cdb__$Types_ArrayRead_$Impl_$._new = function(a) {
	var this1 = a;
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.get_length = function(this1) {
	return this1.length;
};
cdb__$Types_ArrayRead_$Impl_$.toIterable = function(this1) {
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.iterator = function(this1) {
	return new cdb__$Types_ArrayIterator(this1);
};
cdb__$Types_ArrayRead_$Impl_$.castArray = function(this1) {
	return this1;
};
cdb__$Types_ArrayRead_$Impl_$.toArrayCopy = function(this1) {
	return this1.slice();
};
cdb__$Types_ArrayRead_$Impl_$.getIndex = function(this1,v) {
	return this1[v];
};
var cdb__$Types_Flags_$Impl_$ = {};
$hxClasses["cdb._Types.Flags_Impl_"] = cdb__$Types_Flags_$Impl_$;
cdb__$Types_Flags_$Impl_$.__name__ = "cdb._Types.Flags_Impl_";
cdb__$Types_Flags_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Flags_$Impl_$.has = function(this1,t) {
	return (this1 & 1 << t) != 0;
};
cdb__$Types_Flags_$Impl_$.set = function(this1,t) {
	this1 |= 1 << t;
};
cdb__$Types_Flags_$Impl_$.unset = function(this1,t) {
	this1 &= ~(1 << t);
};
cdb__$Types_Flags_$Impl_$.iterator = function(this1) {
	var this2 = this1;
	return new cdb__$Types_FlagsIterator(this2);
};
cdb__$Types_Flags_$Impl_$.toInt = function(this1) {
	return this1;
};
var cdb__$Types_Layer_$Impl_$ = {};
$hxClasses["cdb._Types.Layer_Impl_"] = cdb__$Types_Layer_$Impl_$;
cdb__$Types_Layer_$Impl_$.__name__ = "cdb._Types.Layer_Impl_";
cdb__$Types_Layer_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
cdb__$Types_Layer_$Impl_$.decode = function(this1,all) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g1 = 0;
	var _g2 = k.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(all[k.b[i]]);
	}
	return _g;
};
cdb__$Types_Layer_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length));
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		b.b[i] = a[i];
	}
	var this1 = cdb_Lz4Reader.encodeBytes(b,compress);
	return this1;
};
var cdb__$Types_TileLayerData_$Impl_$ = {};
$hxClasses["cdb._Types.TileLayerData_Impl_"] = cdb__$Types_TileLayerData_$Impl_$;
cdb__$Types_TileLayerData_$Impl_$.__name__ = "cdb._Types.TileLayerData_Impl_";
cdb__$Types_TileLayerData_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
cdb__$Types_TileLayerData_$Impl_$.decode = function(this1) {
	var k = cdb_Lz4Reader.decodeString(this1);
	var _g = [];
	var _g1 = 0;
	var _g2 = k.length >> 1;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(k.b[i << 1] | k.b[(i << 1) + 1] << 8);
	}
	return _g;
};
cdb__$Types_TileLayerData_$Impl_$.encode = function(a,compress) {
	var b = new haxe_io_Bytes(new ArrayBuffer(a.length * 2));
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		var v = a[i];
		b.b[i << 1] = v & 255;
		b.b[(i << 1) + 1] = v >> 8 & 255;
	}
	return cdb__$Types_TileLayerData_$Impl_$._new(cdb_Lz4Reader.encodeBytes(b,compress));
};
var cdb__$Types_LevelPropsAccess_$Impl_$ = {};
$hxClasses["cdb._Types.LevelPropsAccess_Impl_"] = cdb__$Types_LevelPropsAccess_$Impl_$;
cdb__$Types_LevelPropsAccess_$Impl_$.__name__ = "cdb._Types.LevelPropsAccess_Impl_";
cdb__$Types_LevelPropsAccess_$Impl_$.get_tileSize = function(this1) {
	return this1.tileSize;
};
cdb__$Types_LevelPropsAccess_$Impl_$.getTileset = function(this1,i,name) {
	return Reflect.field(i.sheet.props.level.tileSets,name);
};
cdb__$Types_LevelPropsAccess_$Impl_$.getLayer = function(this1,name) {
	if(this1 == null || this1.layers == null) {
		return null;
	}
	var _g = 0;
	var _g1 = this1.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.l == name) {
			return l.p;
		}
	}
	return null;
};
var cdb_Index = function(data,name) {
	this.name = name;
	this.initSheet(data);
	if(this.sheet == null) {
		throw new js__$Boot_HaxeError("'" + name + "' not found in CDB data");
	}
};
$hxClasses["cdb.Index"] = cdb_Index;
cdb_Index.__name__ = "cdb.Index";
cdb_Index.prototype = {
	initSheet: function(data) {
		var _g = 0;
		var _g1 = data.sheets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == this.name) {
				this.all = s.lines;
				this.sheet = s;
				if(s.props.hasIndex) {
					var _g2 = 0;
					var _g11 = this.all.length;
					while(_g2 < _g11) {
						var i = _g2++;
						this.all[i].index = i;
					}
				}
				break;
			}
		}
	}
	,__class__: cdb_Index
};
var cdb_IndexId = function(data,name) {
	cdb_Index.call(this,data,name);
};
$hxClasses["cdb.IndexId"] = cdb_IndexId;
cdb_IndexId.__name__ = "cdb.IndexId";
cdb_IndexId.__super__ = cdb_Index;
cdb_IndexId.prototype = $extend(cdb_Index.prototype,{
	initSheet: function(data) {
		cdb_Index.prototype.initSheet.call(this,data);
		this.byId = new haxe_ds_StringMap();
		this.byIndex = [];
		var _g = 0;
		var _g1 = this.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.type._hx_index == 0) {
				var cname = c.name;
				var _g2 = 0;
				var _g11 = this.sheet.lines;
				while(_g2 < _g11.length) {
					var a = _g11[_g2];
					++_g2;
					var id = Reflect.field(a,cname);
					if(id != null && id != "") {
						var _this = this.byId;
						var value = a;
						if(__map_reserved[id] != null) {
							_this.setReserved(id,value);
						} else {
							_this.h[id] = value;
						}
						this.byIndex.push(a);
					}
				}
				break;
			}
		}
	}
	,reload: function(data) {
		var oldId = this.byId;
		var oldIndex = this.byIndex;
		this.initSheet(data);
		var id = this.byId.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var oldObj = __map_reserved[id1] != null ? oldId.getReserved(id1) : oldId.h[id1];
			if(oldObj == null) {
				continue;
			}
			var _this = this.byId;
			var newObj = __map_reserved[id1] != null ? _this.getReserved(id1) : _this.h[id1];
			var fields = Reflect.fields(oldObj);
			var _g = 0;
			var _g1 = Reflect.fields(newObj);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				oldObj[f] = Reflect.field(newObj,f);
				HxOverrides.remove(fields,f);
			}
			var _g2 = 0;
			while(_g2 < fields.length) {
				var f1 = fields[_g2];
				++_g2;
				Reflect.deleteField(oldObj,f1);
			}
			var idx = this.byIndex.indexOf(newObj);
			if(idx >= 0) {
				this.byIndex[idx] = oldObj;
			}
			this.sheet.lines[this.sheet.lines.indexOf(newObj)] = oldObj;
			var _this1 = this.byId;
			if(__map_reserved[id1] != null) {
				_this1.setReserved(id1,oldObj);
			} else {
				_this1.h[id1] = oldObj;
			}
		}
	}
	,get: function(k) {
		var _this = this.byId;
		var key = k;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,resolve: function(id,opt) {
		if(id == null) {
			return null;
		}
		var _this = this.byId;
		var v = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(v == null && !opt) {
			throw new js__$Boot_HaxeError("Missing " + this.name + "." + id);
		} else {
			return v;
		}
	}
	,__class__: cdb_IndexId
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g11 = l;
				while(_g1 < _g11) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v3 = v;
				var k = v3.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v3.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v4 = v;
				var _g_head = v4.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g2 = 0;
					var _g12 = haxe_Serializer.BASE64.length;
					while(_g2 < _g12) {
						var i3 = _g2++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b11 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCodePoint(b64[b12 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e1 = v;
				this.serializeString($hxEnums[e1.__enum__].__constructs__[e1._hx_index]);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g3 = 0;
			while(_g3 < params.length) {
				var p = params[_g3];
				++_g3;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var b = data.b.bufferValue;
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var tmp = (c_crc ^ b.bytes[i]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	while(i1 < b.length) {
		blks[i1 >> 2] |= b.b[i1] << (((b.length << 3) + i1 & 3) << 3);
		++i1;
	}
	blks[i1 >> 2] |= 128 << (b.length * 8 + i1) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addInt32: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setInt32(this.pos,v,true);
		this.pos += 4;
	}
	,addInt64: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setInt32(this.pos,v.low,true);
		this.view.setInt32(this.pos + 4,v.high,true);
		this.pos += 8;
	}
	,addFloat: function(v) {
		if(this.pos + 4 > this.size) {
			this.grow(4);
		}
		this.view.setFloat32(this.pos,v,true);
		this.pos += 4;
	}
	,addDouble: function(v) {
		if(this.pos + 8 > this.size) {
			this.grow(8);
		}
		this.view.setFloat64(this.pos,v,true);
		this.pos += 8;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths1 = _g;
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g3 = 1;
	var _g11 = paths1.length;
	while(_g3 < _g11) {
		var i = _g3++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	__class__: haxe_io_Path
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Access_Access_$Impl_$ = {};
$hxClasses["haxe.xml._Access.Access_Impl_"] = haxe_xml__$Access_Access_$Impl_$;
haxe_xml__$Access_Access_$Impl_$.__name__ = "haxe.xml._Access.Access_Impl_";
haxe_xml__$Access_Access_$Impl_$.get_innerHTML = function(this1) {
	var s_b = "";
	if(this1.nodeType != Xml.Document && this1.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
	}
	var x = HxOverrides.iter(this1.children);
	while(x.hasNext()) {
		var x1 = x.next();
		s_b += Std.string(haxe_xml_Printer.print(x1));
	}
	return s_b;
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hxbit_ConvertField = function(path,from,to) {
	this.path = path;
	this.from = from;
	this.to = to;
};
$hxClasses["hxbit.ConvertField"] = hxbit_ConvertField;
hxbit_ConvertField.__name__ = "hxbit.ConvertField";
hxbit_ConvertField.prototype = {
	__class__: hxbit_ConvertField
};
var hxbit_Convert = function(classPath,ourSchema,schema) {
	var ourMap = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = ourSchema.fieldsNames.length;
	while(_g < _g1) {
		var i = _g++;
		var key = ourSchema.fieldsNames[i];
		var value = ourSchema.fieldsTypes[i];
		if(__map_reserved[key] != null) {
			ourMap.setReserved(key,value);
		} else {
			ourMap.h[key] = value;
		}
	}
	this.read = [];
	this.hadCID = !schema.isFinal;
	this.hasCID = !ourSchema.isFinal;
	var map = new haxe_ds_StringMap();
	var _g2 = 0;
	var _g3 = schema.fieldsNames.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		var oldT = schema.fieldsTypes[i1];
		var key1 = schema.fieldsNames[i1];
		var newT = __map_reserved[key1] != null ? ourMap.getReserved(key1) : ourMap.h[key1];
		var c = new hxbit_ConvertField(classPath + "." + schema.fieldsNames[i1],oldT,newT);
		if(newT != null) {
			if(hxbit_Convert.sameType(oldT,newT)) {
				c.same = true;
			} else {
				var key2 = c.path;
				var _this = hxbit_Convert.convFuns;
				c.conv = __map_reserved[key2] != null ? _this.getReserved(key2) : _this.h[key2];
				c.defaultValue = hxbit_Convert.getDefault(newT);
			}
		}
		c.index = this.read.length;
		this.read.push(c);
		var key3 = schema.fieldsNames[i1];
		if(__map_reserved[key3] != null) {
			map.setReserved(key3,c);
		} else {
			map.h[key3] = c;
		}
	}
	this.write = [];
	var _g4 = 0;
	var _g5 = ourSchema.fieldsNames.length;
	while(_g4 < _g5) {
		var i2 = _g4++;
		var newT1 = ourSchema.fieldsTypes[i2];
		var key4 = ourSchema.fieldsNames[i2];
		var c1 = __map_reserved[key4] != null ? map.getReserved(key4) : map.h[key4];
		if(c1 == null) {
			c1 = new hxbit_ConvertField(null,null,newT1);
			c1.defaultValue = hxbit_Convert.getDefault(newT1);
		}
		this.write.push(c1);
	}
};
$hxClasses["hxbit.Convert"] = hxbit_Convert;
hxbit_Convert.__name__ = "hxbit.Convert";
hxbit_Convert.sameType = function(a,b) {
	switch(a._hx_index) {
	case 0:
		switch(b._hx_index) {
		case 10:
			var b1 = b.k;
			return hxbit_Convert.sameType(a,b1);
		case 16:
			var _g11 = b.t;
			return true;
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 7:
		var _g3 = a.v;
		var _g2 = a.k;
		switch(b._hx_index) {
		case 7:
			var ak = _g2;
			var av = _g3;
			var bv = b.v;
			var bk = b.k;
			if(hxbit_Convert.sameType(ak,bk)) {
				return hxbit_Convert.sameType(av,bv);
			} else {
				return false;
			}
			break;
		case 10:
			var b2 = b.k;
			return hxbit_Convert.sameType(a,b2);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 8:
		var _g7 = a.k;
		switch(b._hx_index) {
		case 8:
			var a1 = _g7;
			var b3 = b.k;
			return hxbit_Convert.sameType(a1,b3);
		case 10:
			var b4 = b.k;
			return hxbit_Convert.sameType(a,b4);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 9:
		var _g20 = a.fields;
		switch(b._hx_index) {
		case 9:
			var fa = _g20;
			var fb = b.fields;
			if(fa.length != fb.length) {
				return false;
			}
			var _g = 0;
			var _g1 = fa.length;
			while(_g < _g1) {
				var i = _g++;
				var a2 = fa[i];
				var b5 = fb[i];
				if(a2.name != b5.name || a2.opt != b5.opt || !hxbit_Convert.sameType(a2.type,b5.type)) {
					return false;
				}
			}
			return true;
		case 10:
			var b6 = b.k;
			return hxbit_Convert.sameType(a,b6);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 10:
		var _g4 = a.k;
		if(b._hx_index == 10) {
			var a3 = _g4;
			var b7 = b.k;
			return hxbit_Convert.sameType(a3,b7);
		} else {
			var a4 = _g4;
			return hxbit_Convert.sameType(a4,b);
		}
		break;
	case 11:
		var _g17 = a.k;
		switch(b._hx_index) {
		case 10:
			var b8 = b.k;
			return hxbit_Convert.sameType(a,b8);
		case 11:
			var a5 = _g17;
			var b9 = b.k;
			return hxbit_Convert.sameType(a5,b9);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 12:
		var _g12 = a.t;
		switch(b._hx_index) {
		case 10:
			var b10 = b.k;
			return hxbit_Convert.sameType(a,b10);
		case 12:
			var a6 = _g12;
			var b11 = b.t;
			return hxbit_Convert.sameType(a6,b11);
		default:
			return Type.enumEq(a,b);
		}
		break;
	case 16:
		var _g15 = a.t;
		switch(b._hx_index) {
		case 0:
			return true;
		case 10:
			var b12 = b.k;
			return hxbit_Convert.sameType(a,b12);
		default:
			return Type.enumEq(a,b);
		}
		break;
	default:
		if(b._hx_index == 10) {
			var b13 = b.k;
			return hxbit_Convert.sameType(a,b13);
		} else {
			return Type.enumEq(a,b);
		}
	}
};
hxbit_Convert.getDefault = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:
		return 0.;
	case 2:
		return false;
	case 5:
		var _g2 = t.name;
		return null;
	case 6:
		var _g1 = t.name;
		return null;
	case 7:
		var _g4 = t.v;
		var k = t.k;
		switch(k._hx_index) {
		case 0:
			return new haxe_ds_IntMap();
		case 3:
			return new haxe_ds_StringMap();
		default:
			return new haxe_ds_ObjectMap();
		}
		break;
	case 8:
		var _g5 = t.k;
		return [];
	case 9:
		var _g9 = t.fields;
		return null;
	case 10:
		var t1 = t.k;
		return hxbit_Convert.getDefault(t1);
	case 11:
		var _g8 = t.k;
		var this1 = new Array(0);
		return this1;
	case 12:
		var _g7 = t.t;
		return null;
	case 15:
		var this2 = new haxe__$Int64__$_$_$Int64(0,0);
		return this2;
	case 16:
		var _g6 = t.t;
		return 0;
	case 3:case 4:case 13:case 14:case 17:
		return null;
	}
};
hxbit_Convert.registerConverter = function(path,f) {
	var _this = hxbit_Convert.convFuns;
	if(__map_reserved[path] != null) {
		_this.setReserved(path,f);
	} else {
		_this.h[path] = f;
	}
};
hxbit_Convert.prototype = {
	toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.write.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var w = this.write[i];
			_g.push(w.from == null ? "insert:" + Std.string(w.defaultValue) : w.same ? i == w.index ? "s" : "@" + w.index : "@" + w.index + ":" + Std.string(w.to));
		}
		return _g.toString();
	}
	,__class__: hxbit_Convert
};
var hxbit_RpcMode = $hxEnums["hxbit.RpcMode"] = { __ename__ : "hxbit.RpcMode", __constructs__ : ["All","Clients","Server","Owner","Immediate"]
	,All: {_hx_index:0,__enum__:"hxbit.RpcMode",toString:$estr}
	,Clients: {_hx_index:1,__enum__:"hxbit.RpcMode",toString:$estr}
	,Server: {_hx_index:2,__enum__:"hxbit.RpcMode",toString:$estr}
	,Owner: {_hx_index:3,__enum__:"hxbit.RpcMode",toString:$estr}
	,Immediate: {_hx_index:4,__enum__:"hxbit.RpcMode",toString:$estr}
};
var hxbit_PropTypeDesc = $hxEnums["hxbit.PropTypeDesc"] = { __ename__ : "hxbit.PropTypeDesc", __constructs__ : ["PInt","PFloat","PBool","PString","PBytes","PSerializable","PEnum","PMap","PArray","PObj","PAlias","PVector","PNull","PUnknown","PDynamic","PInt64","PFlags","PStruct"]
	,PInt: {_hx_index:0,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFloat: {_hx_index:1,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBool: {_hx_index:2,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PString: {_hx_index:3,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PBytes: {_hx_index:4,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PSerializable: ($_=function(name) { return {_hx_index:5,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["name"],$_)
	,PEnum: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["name"],$_)
	,PMap: ($_=function(k,v) { return {_hx_index:7,k:k,v:v,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["k","v"],$_)
	,PArray: ($_=function(k) { return {_hx_index:8,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["k"],$_)
	,PObj: ($_=function(fields) { return {_hx_index:9,fields:fields,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,PAlias: ($_=function(k) { return {_hx_index:10,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["k"],$_)
	,PVector: ($_=function(k) { return {_hx_index:11,k:k,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["k"],$_)
	,PNull: ($_=function(t) { return {_hx_index:12,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["t"],$_)
	,PUnknown: {_hx_index:13,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PDynamic: {_hx_index:14,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PInt64: {_hx_index:15,__enum__:"hxbit.PropTypeDesc",toString:$estr}
	,PFlags: ($_=function(t) { return {_hx_index:16,t:t,__enum__:"hxbit.PropTypeDesc",toString:$estr}; },$_.__params__ = ["t"],$_)
	,PStruct: {_hx_index:17,__enum__:"hxbit.PropTypeDesc",toString:$estr}
};
var hxbit_Macros = function() { };
$hxClasses["hxbit.Macros"] = hxbit_Macros;
hxbit_Macros.__name__ = "hxbit.Macros";
var hxbit_Serializable = function() { };
$hxClasses["hxbit.Serializable"] = hxbit_Serializable;
hxbit_Serializable.__name__ = "hxbit.Serializable";
hxbit_Serializable.__isInterface__ = true;
hxbit_Serializable.prototype = {
	__class__: hxbit_Serializable
};
var hxbit_Serializer = function() {
	this.usedClasses = [];
	if(hxbit_Serializer.CLIDS == null) {
		hxbit_Serializer.initClassIDS();
	}
};
$hxClasses["hxbit.Serializer"] = hxbit_Serializer;
hxbit_Serializer.__name__ = "hxbit.Serializer";
hxbit_Serializer.resetCounters = function() {
	hxbit_Serializer.UID = 0;
	hxbit_Serializer.SEQ = 0;
};
hxbit_Serializer.allocUID = function() {
	return hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
};
hxbit_Serializer.registerClass = function(c) {
	if(hxbit_Serializer.CLIDS != null) {
		throw new js__$Boot_HaxeError("Too late to register class");
	}
	var idx = hxbit_Serializer.CLASSES.length;
	hxbit_Serializer.CLASSES.push(c);
	return idx;
};
hxbit_Serializer.hash = function(name) {
	var v = 1;
	var _g = 0;
	var _g1 = name.length;
	while(_g < _g1) {
		var i = _g++;
		v = v * 223 + name.charCodeAt(i) | 0;
	}
	v = 1 + (v & 1073741823) % 65423;
	return v;
};
hxbit_Serializer.initClassIDS = function() {
	var cl = hxbit_Serializer.CLASSES;
	var _g = [];
	var _g1 = 0;
	while(_g1 < cl.length) {
		var c = cl[_g1];
		++_g1;
		_g.push([]);
	}
	var subClasses = _g;
	var isSub = [];
	var _g2 = 0;
	var _g3 = cl.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var c1 = cl[i];
		while(true) {
			c1 = c1.__super__;
			if(c1 == null) {
				break;
			}
			var idx = cl.indexOf(c1);
			if(idx < 0) {
				break;
			}
			subClasses[idx].push(i);
			isSub[i] = true;
		}
	}
	var _g4 = [];
	var _g5 = 0;
	var _g6 = hxbit_Serializer.CLASSES.length;
	while(_g5 < _g6) {
		var i1 = _g5++;
		var tmp;
		if(subClasses[i1].length == 0 && !isSub[i1]) {
			tmp = 0;
		} else {
			var name = cl[i1].__name__;
			var v = 1;
			var _g7 = 0;
			var _g11 = name.length;
			while(_g7 < _g11) {
				var i2 = _g7++;
				v = v * 223 + name.charCodeAt(i2) | 0;
			}
			v = 1 + (v & 1073741823) % 65423;
			tmp = v;
		}
		_g4.push(tmp);
	}
	hxbit_Serializer.CLIDS = _g4;
	hxbit_Serializer.CL_BYID = [];
	var _g71 = 0;
	var _g8 = hxbit_Serializer.CLIDS.length;
	while(_g71 < _g8) {
		var i3 = _g71++;
		var cid = hxbit_Serializer.CLIDS[i3];
		if(cid == 0) {
			continue;
		}
		if(hxbit_Serializer.CL_BYID[cid] != null) {
			var c2 = hxbit_Serializer.CL_BYID[cid];
			throw new js__$Boot_HaxeError("Conflicting CLID between " + c2.__name__ + " and " + cl[i3].__name__);
		}
		hxbit_Serializer.CL_BYID[cid] = cl[i3];
	}
};
hxbit_Serializer.getSignature = function() {
	if(hxbit_Serializer.__SIGN != null) {
		return hxbit_Serializer.__SIGN;
	}
	var s = new hxbit_Serializer();
	s.begin();
	var v = hxbit_Serializer.CLASSES.length;
	if(v >= 0 && v < 128) {
		s.out.addByte(v);
	} else {
		s.out.addByte(128);
		s.out.addInt32(v);
	}
	var _g = 0;
	var _g1 = hxbit_Serializer.CLASSES.length;
	while(_g < _g1) {
		var i = _g++;
		var v1 = hxbit_Serializer.CLIDS[i];
		if(v1 >= 0 && v1 < 128) {
			s.out.addByte(v1);
		} else {
			s.out.addByte(128);
			s.out.addInt32(v1);
		}
		var v2 = Object.create(hxbit_Serializer.CLASSES[i].prototype).getSerializeSchema().get_checkSum();
		s.out.addInt32(v2);
	}
	return hxbit_Serializer.__SIGN = haxe_crypto_Md5.make(s.end());
};
hxbit_Serializer.isClassFinal = function(index) {
	return hxbit_Serializer.CLIDS[index] == 0;
};
hxbit_Serializer.save = function(value) {
	var s = new hxbit_Serializer();
	s.beginSave();
	s.addKnownRef(value);
	return s.endSave();
};
hxbit_Serializer.load = function(bytes,cl) {
	var s = new hxbit_Serializer();
	s.beginLoad(bytes);
	var value = s.getRef(cl,cl.__clid);
	s.endLoad();
	return value;
};
hxbit_Serializer.prototype = {
	set_remapIds: function(b) {
		this.remapObjs = b ? new haxe_ds_ObjectMap() : null;
		return b;
	}
	,get_remapIds: function() {
		return this.remapObjs != null;
	}
	,remap: function(s) {
		if(this.remapObjs.h.__keys__[s.__id__] != null) {
			return;
		}
		this.remapObjs.set(s,s.__uid);
		s.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	}
	,begin: function() {
		this.out = new haxe_io_BytesBuffer();
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
	}
	,end: function() {
		var bytes = this.out.getBytes();
		this.out = null;
		this.refs = null;
		this.knownStructs = null;
		return bytes;
	}
	,setInput: function(data,pos) {
		this.input = data;
		this.inPos = pos;
		if(this.refs == null) {
			this.refs = new haxe_ds_IntMap();
		}
		if(this.knownStructs == null) {
			this.knownStructs = [];
		}
	}
	,serialize: function(s) {
		this.begin();
		this.addKnownRef(s);
		return this.out.getBytes();
	}
	,unserialize: function(data,c,startPos) {
		if(startPos == null) {
			startPos = 0;
		}
		this.refs = new haxe_ds_IntMap();
		this.knownStructs = [];
		this.setInput(data,startPos);
		return this.getRef(c,c.__clid);
	}
	,getByte: function() {
		return this.input.b[this.inPos++];
	}
	,addByte: function(v) {
		this.out.addByte(v);
	}
	,addInt: function(v) {
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,addInt32: function(v) {
		this.out.addInt32(v);
	}
	,addInt64: function(v) {
		this.out.addInt64(v);
	}
	,addFloat: function(v) {
		this.out.addFloat(v);
	}
	,addDouble: function(v) {
		this.out.addDouble(v);
	}
	,addBool: function(v) {
		this.out.addByte(v ? 1 : 0);
	}
	,addArray: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,addVector: function(a,f) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var v = a.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g = 0;
		while(_g < a.length) {
			var v1 = a[_g];
			++_g;
			f(v1);
		}
	}
	,getArray: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var a = [];
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,getVector: function(f) {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var this1 = new Array(len);
		var a = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			a[i] = f();
		}
		return a;
	}
	,addMap: function(a,fk,ft) {
		if(a == null) {
			this.out.addByte(0);
			return;
		}
		var _g = [];
		var k = a.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var keys = _g;
		var v = keys.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		var _g1 = 0;
		while(_g1 < keys.length) {
			var k2 = keys[_g1];
			++_g1;
			fk(k2);
			ft(a.get(k2));
		}
	}
	,getBool: function() {
		return this.input.b[this.inPos++] != 0;
	}
	,getInt: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,skip: function(size) {
		this.inPos += size;
	}
	,getInt32: function() {
		var v = this.input.getInt32(this.inPos);
		this.inPos += 4;
		return v;
	}
	,getInt64: function() {
		var v = this.input.getInt64(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getDouble: function() {
		var v = this.input.getDouble(this.inPos);
		this.inPos += 8;
		return v;
	}
	,getFloat: function() {
		var v = this.input.getFloat(this.inPos);
		this.inPos += 4;
		return v;
	}
	,addString: function(s) {
		if(s == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytes: function(b) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
	}
	,addBytesSub: function(b,pos,len) {
		if(b == null) {
			this.out.addByte(0);
		} else {
			var v = len + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.addBytes(b,pos,len);
		}
	}
	,getString: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.getString(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getBytes: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			return null;
		}
		--len;
		var s = this.input.sub(this.inPos,len);
		this.inPos += len;
		return s;
	}
	,getDynamic: function() {
		var _g = this.input.b[this.inPos++];
		switch(_g) {
		case 0:
			return null;
		case 1:
			return false;
		case 2:
			return true;
		case 3:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 4:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 5:
			var o = { };
			var _g1 = 0;
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g11 = v2;
			while(_g1 < _g11) {
				var i = _g1++;
				var v3 = this.input.b[this.inPos++];
				if(v3 == 128) {
					v3 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len = v3;
				var field;
				if(len == 0) {
					field = null;
				} else {
					--len;
					var s = this.input.getString(this.inPos,len);
					this.inPos += len;
					field = s;
				}
				o[field] = this.getDynamic();
			}
			return o;
		case 6:
			var v4 = this.input.b[this.inPos++];
			if(v4 == 128) {
				v4 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v4;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 7:
			var _g2 = [];
			var _g12 = 0;
			var v5 = this.input.b[this.inPos++];
			if(v5 == 128) {
				v5 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var _g21 = v5;
			while(_g12 < _g21) {
				var i1 = _g12++;
				_g2.push(this.getDynamic());
			}
			return _g2;
		case 8:
			var v6 = this.input.b[this.inPos++];
			if(v6 == 128) {
				v6 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len2 = v6;
			if(len2 == 0) {
				return null;
			} else {
				--len2;
				var s2 = this.input.sub(this.inPos,len2);
				this.inPos += len2;
				return s2;
			}
			break;
		default:
			var x = _g;
			throw new js__$Boot_HaxeError("Invalid dynamic prefix " + x);
		}
	}
	,addDynamic: function(v) {
		if(v == null) {
			this.out.addByte(0);
			return;
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 1:
			this.out.addByte(3);
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 2:
			this.out.addByte(4);
			this.out.addFloat(v);
			break;
		case 3:
			this.out.addByte(v ? 2 : 1);
			break;
		case 4:
			var fields = Reflect.fields(v);
			this.out.addByte(5);
			var v2 = fields.length;
			if(v2 >= 0 && v2 < 128) {
				this.out.addByte(v2);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v2);
			}
			var _g1 = 0;
			while(_g1 < fields.length) {
				var f = fields[_g1];
				++_g1;
				if(f == null) {
					this.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(f);
					var v3 = b.length + 1;
					if(v3 >= 0 && v3 < 128) {
						this.out.addByte(v3);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v3);
					}
					this.out.add(b);
				}
				this.addDynamic(Reflect.field(v,f));
			}
			break;
		case 6:
			var c = _g.c;
			switch(c) {
			case Array:
				this.out.addByte(7);
				var a = v;
				var v4 = a.length;
				if(v4 >= 0 && v4 < 128) {
					this.out.addByte(v4);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v4);
				}
				var _g2 = 0;
				while(_g2 < a.length) {
					var v5 = a[_g2];
					++_g2;
					this.addDynamic(v5);
				}
				break;
			case String:
				this.out.addByte(6);
				var s = v;
				if(s == null) {
					this.out.addByte(0);
				} else {
					var b1 = haxe_io_Bytes.ofString(s);
					var v6 = b1.length + 1;
					if(v6 >= 0 && v6 < 128) {
						this.out.addByte(v6);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v6);
					}
					this.out.add(b1);
				}
				break;
			case haxe_io_Bytes:
				this.out.addByte(8);
				var b2 = v;
				if(b2 == null) {
					this.out.addByte(0);
				} else {
					var v7 = b2.length + 1;
					if(v7 >= 0 && v7 < 128) {
						this.out.addByte(v7);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v7);
					}
					this.out.add(b2);
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(c));
			}
			break;
		default:
			var t = _g;
			throw new js__$Boot_HaxeError("Unsupported dynamic " + Std.string(t));
		}
	}
	,addCLID: function(clid) {
		this.out.addByte(clid >> 8);
		this.out.addByte(clid & 255);
	}
	,getCLID: function() {
		return this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
	}
	,addStruct: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		var c = js_Boot.__implements(s,hxbit_Serializable) ? s : null;
		if(c != null) {
			this.out.addByte(1);
			this.addAnyRef(c);
			return;
		}
		var index = this.knownStructs.indexOf(s);
		if(index >= 0) {
			this.out.addByte(2);
			if(index >= 0 && index < 128) {
				this.out.addByte(index);
			} else {
				this.out.addByte(128);
				this.out.addInt32(index);
			}
			return;
		}
		this.knownStructs.push(s);
		this.out.addByte(3);
		var c1 = js_Boot.getClass(s);
		if(c1 == null) {
			throw new js__$Boot_HaxeError(Std.string(s) + " does not have a class ?");
		}
		var s1 = c1.__name__;
		if(s1 == null) {
			this.out.addByte(0);
		} else {
			var b = haxe_io_Bytes.ofString(s1);
			var v = b.length + 1;
			if(v >= 0 && v < 128) {
				this.out.addByte(v);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v);
			}
			this.out.add(b);
		}
		s.customSerialize(this);
		this.out.addByte(255);
	}
	,getStruct: function() {
		switch(this.input.b[this.inPos++]) {
		case 0:
			return null;
		case 1:
			return this.getAnyRef();
		case 2:
			var tmp = this.knownStructs;
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return tmp[v];
		case 3:
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v1;
			var cname;
			if(len == 0) {
				cname = null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				cname = s;
			}
			var cl = $hxClasses[cname];
			if(cl == null) {
				throw new js__$Boot_HaxeError("Missing struct class " + cname);
			}
			var s1 = Object.create(cl.prototype);
			this.knownStructs.push(s1);
			s1.customUnserialize(this);
			if(this.input.b[this.inPos++] != 255) {
				throw new js__$Boot_HaxeError("Invalid customUnserialize for " + Std.string(s1));
			}
			return s1;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,addObjRef: function(s) {
		var v = s.__uid;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
	}
	,getObjRef: function() {
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		return v;
	}
	,addAnyRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		this.out.addByte(index >> 8);
		this.out.addByte(index & 255);
		s.serialize(this);
	}
	,addKnownRef: function(s) {
		if(s == null) {
			this.out.addByte(0);
			return;
		}
		if(this.remapObjs != null) {
			this.remap(s);
		}
		this.addObjRef(s);
		if(this.refs.h[s.__uid] != null) {
			return;
		}
		this.refs.h[s.__uid] = s;
		var index = s.getCLID();
		this.usedClasses[index] = true;
		var clid = hxbit_Serializer.CLIDS[index];
		if(clid != 0) {
			this.out.addByte(clid >> 8);
			this.out.addByte(clid & 255);
		}
		s.serialize(this);
	}
	,getAnyRef: function() {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		var clidx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
		if(this.mapIndexes != null) {
			clidx = this.mapIndexes[clidx];
		}
		var i = Object.create(hxbit_Serializer.CLASSES[clidx].prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getRef: function(c,clidx) {
		var id = this.getObjRef();
		if(id == 0) {
			return null;
		}
		if(this.refs.h[id] != null) {
			return this.refs.h[id];
		}
		var rid = id & 16777215;
		if(hxbit_Serializer.UID < rid) {
			hxbit_Serializer.UID = rid;
		}
		if(this.convert != null && this.convert[clidx] != null) {
			var conv = this.convert[clidx];
			if(conv.hadCID) {
				var realIdx = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
				if(conv.hasCID) {
					c = hxbit_Serializer.CL_BYID[realIdx];
					clidx = c.__clid;
				}
			}
		} else if(hxbit_Serializer.CLIDS[clidx] != 0) {
			var realIdx1 = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			c = hxbit_Serializer.CL_BYID[realIdx1];
			if(this.convert != null) {
				clidx = c.__clid;
			}
		}
		var i = Object.create(c.prototype);
		if(this.newObjects != null) {
			this.newObjects.push(i);
		}
		i.__uid = id;
		i.unserializeInit();
		this.refs.h[id] = i;
		if(this.convert != null && this.convert[clidx] != null) {
			this.convertRef(i,this.convert[clidx]);
		} else {
			i.unserialize(this);
		}
		return i;
	}
	,getKnownRef: function(c) {
		return this.getRef(c,c.__clid);
	}
	,beginSave: function() {
		this.begin();
		this.usedClasses = [];
	}
	,endSave: function(savePosition) {
		if(savePosition == null) {
			savePosition = 0;
		}
		var content = this.end();
		this.begin();
		var classes = [];
		var schemas = [];
		var sidx = hxbit_Serializer.CLASSES.indexOf(hxbit_Schema);
		var _g = 0;
		var _g1 = this.usedClasses.length;
		while(_g < _g1) {
			var i = _g++;
			if(!this.usedClasses[i] || i == sidx) {
				continue;
			}
			var c = hxbit_Serializer.CLASSES[i];
			var schema = Object.create(c.prototype).getSerializeSchema();
			schemas.push(schema);
			classes.push(i);
			this.addKnownRef(schema);
			this.refs.remove(schema.__uid);
		}
		var schemaData = this.end();
		this.begin();
		this.out.addBytes(content,0,savePosition);
		var b = haxe_io_Bytes.ofString("HXS");
		var v = b.length + 1;
		if(v >= 0 && v < 128) {
			this.out.addByte(v);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v);
		}
		this.out.add(b);
		this.out.addByte(1);
		var _g2 = 0;
		var _g3 = classes.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var index = classes[i1];
			var c1 = hxbit_Serializer.CLASSES[index];
			var s = c1.__name__;
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b1 = haxe_io_Bytes.ofString(s);
				var v1 = b1.length + 1;
				if(v1 >= 0 && v1 < 128) {
					this.out.addByte(v1);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v1);
				}
				this.out.add(b1);
			}
			this.out.addByte(index >> 8);
			this.out.addByte(index & 255);
			var v2 = schemas[i1].get_checkSum();
			this.out.addInt32(v2);
		}
		var s1 = null;
		if(s1 == null) {
			this.out.addByte(0);
		} else {
			var b2 = haxe_io_Bytes.ofString(s1);
			var v3 = b2.length + 1;
			if(v3 >= 0 && v3 < 128) {
				this.out.addByte(v3);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v3);
			}
			this.out.add(b2);
		}
		var v4 = schemaData.length;
		if(v4 >= 0 && v4 < 128) {
			this.out.addByte(v4);
		} else {
			this.out.addByte(128);
			this.out.addInt32(v4);
		}
		this.out.add(schemaData);
		this.out.addBytes(content,savePosition,content.length - savePosition);
		return this.end();
	}
	,beginLoad: function(bytes,position) {
		if(position == null) {
			position = 0;
		}
		this.setInput(bytes,position);
		var classByName = new haxe_ds_StringMap();
		var schemas = [];
		var mapIndexes = [];
		var indexes = [];
		var needConvert = false;
		var needReindex = false;
		var _g = 0;
		var _g1 = hxbit_Serializer.CLASSES.length;
		while(_g < _g1) {
			var i = _g++;
			var c = hxbit_Serializer.CLASSES[i];
			var key = c.__name__;
			if(__map_reserved[key] != null) {
				classByName.setReserved(key,i);
			} else {
				classByName.h[key] = i;
			}
			mapIndexes[i] = i;
		}
		var v = this.input.b[this.inPos++];
		if(v == 128) {
			v = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var s = this.input.getString(this.inPos,len);
			this.inPos += len;
			tmp = s;
		}
		if(tmp != "HXS") {
			throw new js__$Boot_HaxeError("Invalid HXS data");
		}
		var version = this.input.b[this.inPos++];
		if(version != 1) {
			throw new js__$Boot_HaxeError("Unsupported HXS version " + version);
		}
		while(true) {
			var v1 = this.input.b[this.inPos++];
			if(v1 == 128) {
				v1 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v1;
			var clname;
			if(len1 == 0) {
				clname = null;
			} else {
				--len1;
				var s1 = this.input.getString(this.inPos,len1);
				this.inPos += len1;
				clname = s1;
			}
			if(clname == null) {
				break;
			}
			var index = this.input.b[this.inPos++] << 8 | this.input.b[this.inPos++];
			var v2 = this.input.getInt32(this.inPos);
			this.inPos += 4;
			var crc = v2;
			var ourClassIndex = __map_reserved[clname] != null ? classByName.getReserved(clname) : classByName.h[clname];
			if(ourClassIndex == null) {
				throw new js__$Boot_HaxeError("Missing class " + clname + " found in HXS data");
			}
			var ourSchema = Object.create(hxbit_Serializer.CLASSES[ourClassIndex].prototype).getSerializeSchema();
			if(ourSchema.get_checkSum() != crc) {
				needConvert = true;
				schemas[index] = ourSchema;
			}
			if(index != ourClassIndex) {
				needReindex = true;
				mapIndexes[index] = ourClassIndex;
			}
			indexes.push(index);
		}
		var v3 = this.input.b[this.inPos++];
		if(v3 == 128) {
			v3 = this.input.getInt32(this.inPos);
			this.inPos += 4;
		}
		var schemaDataSize = v3;
		if(needConvert) {
			this.convert = [];
			var _g2 = 0;
			while(_g2 < indexes.length) {
				var index1 = indexes[_g2];
				++_g2;
				var ourSchema1 = schemas[index1];
				var c1 = hxbit_Schema;
				var schema = this.getRef(c1,c1.__clid);
				this.refs.remove(schema.__uid);
				if(ourSchema1 != null) {
					var c2 = hxbit_Serializer.CLASSES[mapIndexes[index1]];
					this.convert[mapIndexes[index1]] = new hxbit_Convert(c2.__name__,ourSchema1,schema);
				}
			}
		} else {
			this.inPos += schemaDataSize;
		}
		if(needReindex) {
			this.mapIndexes = mapIndexes;
		}
	}
	,endLoad: function() {
		this.convert = null;
		this.mapIndexes = null;
		this.setInput(null,0);
	}
	,convertRef: function(i,c) {
		var this1 = new Array(c.read.length);
		var values = this1;
		var writePos = 0;
		var _g = 0;
		var _g1 = c.read;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			values[r.index] = this.readValue(r.from);
		}
		var oldOut = this.out;
		this.out = new haxe_io_BytesBuffer();
		var _g2 = 0;
		var _g3 = c.write;
		while(_g2 < _g3.length) {
			var w = _g3[_g2];
			++_g2;
			var v;
			if(w.from == null) {
				v = w.defaultValue;
			} else {
				v = values[w.index];
				if(!w.same) {
					if(v == null) {
						v = w.defaultValue;
					} else if(w.conv != null) {
						v = w.conv(v);
					} else {
						v = this.convertValue(w.path,v,w.from,w.to);
					}
				}
			}
			this.writeValue(v,w.to);
		}
		var bytes = this.out.getBytes();
		this.out = oldOut;
		var oldIn = this.input;
		var oldPos = this.inPos;
		this.setInput(bytes,0);
		i.unserialize(this);
		this.setInput(oldIn,oldPos);
	}
	,isNullable: function(t) {
		switch(t._hx_index) {
		case 0:case 1:case 2:
			return false;
		default:
			return true;
		}
	}
	,convertValue: function(path,v,from,to) {
		if(v == null) {
			return hxbit_Convert.getDefault(to);
		}
		if(hxbit_Convert.sameType(from,to)) {
			return v;
		}
		var _this = hxbit_Convert.convFuns;
		var conv = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(conv != null) {
			return conv(v);
		}
		switch(from._hx_index) {
		case 0:
			switch(to._hx_index) {
			case 1:
				return v * 1.0;
			case 10:
				var to1 = to.k;
				return this.convertValue(path,v,from,to1);
			case 12:
				var to2 = to.t;
				return this.convertValue(path,v,from,to2);
			default:
			}
			break;
		case 1:
			switch(to._hx_index) {
			case 0:
				return v | 0;
			case 10:
				var to3 = to.k;
				return this.convertValue(path,v,from,to3);
			case 12:
				var to4 = to.t;
				return this.convertValue(path,v,from,to4);
			default:
			}
			break;
		case 2:
			switch(to._hx_index) {
			case 0:
				if(v) {
					return 1;
				} else {
					return 0;
				}
				break;
			case 1:
				if(v) {
					return 1.;
				} else {
					return 0.;
				}
				break;
			case 10:
				var to5 = to.k;
				return this.convertValue(path,v,from,to5);
			case 12:
				var to6 = to.t;
				return this.convertValue(path,v,from,to6);
			default:
			}
			break;
		case 5:
			var _g5 = from.name;
			switch(to._hx_index) {
			case 5:
				var to7 = to.name;
				var value = v;
				var v2 = js_Boot.__downcastCheck(value,$hxClasses[to7]) ? value : null;
				if(v2 != null) {
					return v2;
				}
				break;
			case 10:
				var to8 = to.k;
				return this.convertValue(path,v,from,to8);
			case 12:
				var to9 = to.t;
				return this.convertValue(path,v,from,to9);
			default:
			}
			break;
		case 8:
			var _g9 = from.k;
			switch(to._hx_index) {
			case 8:
				var from1 = _g9;
				var to10 = to.k;
				var arr = v;
				var _g = [];
				var _g1 = 0;
				while(_g1 < arr.length) {
					var v1 = arr[_g1];
					++_g1;
					_g.push(this.convertValue(path + "[]",v1,from1,to10));
				}
				return _g;
			case 10:
				var to11 = to.k;
				return this.convertValue(path,v,from,to11);
			case 12:
				var to12 = to.t;
				return this.convertValue(path,v,from,to12);
			default:
			}
			break;
		case 9:
			var _g18 = from.fields;
			switch(to._hx_index) {
			case 9:
				var obj1 = _g18;
				var obj2 = to.fields;
				var v21 = { };
				var _g2 = 0;
				while(_g2 < obj2.length) {
					var f = obj2[_g2];
					++_g2;
					var found = false;
					var field = null;
					var _g3 = 0;
					while(_g3 < obj1.length) {
						var f2 = obj1[_g3];
						++_g3;
						if(f2.name == f.name) {
							found = true;
							field = this.convertValue(path + "." + f2.name,Reflect.field(v,f2.name),f2.type,f.type);
							break;
						}
					}
					if(!found) {
						if(f.opt) {
							continue;
						}
						field = hxbit_Convert.getDefault(f.type);
					} else if(field == null && f.opt) {
						continue;
					}
					v21[f.name] = field;
				}
				return v21;
			case 10:
				var to13 = to.k;
				return this.convertValue(path,v,from,to13);
			case 12:
				var to14 = to.t;
				return this.convertValue(path,v,from,to14);
			default:
			}
			break;
		case 10:
			var _g4 = from.k;
			switch(to._hx_index) {
			case 10:
				var _g11 = to.k;
				var from2 = _g4;
				return this.convertValue(path,v,from2,to);
			case 12:
				var to15 = to.t;
				return this.convertValue(path,v,from,to15);
			default:
				var from3 = _g4;
				return this.convertValue(path,v,from3,to);
			}
			break;
		case 12:
			var from4 = from.t;
			return this.convertValue(path,v,from4,to);
		default:
			switch(to._hx_index) {
			case 10:
				var to16 = to.k;
				return this.convertValue(path,v,from,to16);
			case 12:
				var to17 = to.t;
				return this.convertValue(path,v,from,to17);
			default:
			}
		}
		throw new js__$Boot_HaxeError("Cannot convert " + path + "(" + Std.string(v) + ") from " + Std.string(from) + " to " + Std.string(to));
	}
	,getEnumClass: function(name) {
		var _this = hxbit_Serializer.ENUM_CLASSES;
		var cl = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(cl != null) {
			return cl;
		}
		var path = name.split(".").join("_");
		path = path.charAt(0).toUpperCase() + HxOverrides.substr(path,1,null);
		cl = $hxClasses["hxbit.enumSer." + path];
		if(cl != null) {
			var _this1 = hxbit_Serializer.ENUM_CLASSES;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,cl);
			} else {
				_this1.h[name] = cl;
			}
		}
		return cl;
	}
	,readValue: function(t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			var v = this.input.b[this.inPos++];
			if(v == 128) {
				v = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v;
		case 1:
			var v1 = this.input.getFloat(this.inPos);
			this.inPos += 4;
			return v1;
		case 2:
			return this.input.b[this.inPos++] != 0;
		case 3:
			var v2 = this.input.b[this.inPos++];
			if(v2 == 128) {
				v2 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len = v2;
			if(len == 0) {
				return null;
			} else {
				--len;
				var s = this.input.getString(this.inPos,len);
				this.inPos += len;
				return s;
			}
			break;
		case 4:
			var v3 = this.input.b[this.inPos++];
			if(v3 == 128) {
				v3 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len1 = v3;
			if(len1 == 0) {
				return null;
			} else {
				--len1;
				var s1 = this.input.sub(this.inPos,len1);
				this.inPos += len1;
				return s1;
			}
			break;
		case 5:
			var name = t.name;
			var c = $hxClasses[name];
			return this.getRef(c,c.__clid);
		case 6:
			var name1 = t.name;
			var ser = this.getEnumClass(name1);
			if(ser == null) {
				var e = $hxEnums[name1];
				var tmp;
				if(e != null) {
					var o = haxe_rtti_Meta.getType(e);
					tmp = Object.prototype.hasOwnProperty.call(o,"skipSerialize");
				} else {
					tmp = false;
				}
				if(tmp) {
					var v4 = this.input.b[this.inPos++];
					if(v4 == 128) {
						v4 = this.input.getInt32(this.inPos);
						this.inPos += 4;
					}
					return null;
				}
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name1);
			}
			return ser.doUnserialize(this);
		case 7:
			var v5 = t.v;
			var k = t.k;
			switch(k._hx_index) {
			case 0:
				var v6 = this.input.b[this.inPos++];
				if(v6 == 128) {
					v6 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len2 = v6;
				var tmp1;
				if(len2 == 0) {
					tmp1 = null;
				} else {
					var m = new haxe_ds_IntMap();
					while(--len2 > 0) {
						var k1 = _gthis.readValue(k);
						var v7 = _gthis.readValue(v5);
						m.h[k1] = v7;
					}
					tmp1 = m;
				}
				return tmp1;
			case 3:
				var v8 = this.input.b[this.inPos++];
				if(v8 == 128) {
					v8 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len3 = v8;
				var tmp2;
				if(len3 == 0) {
					tmp2 = null;
				} else {
					var m1 = new haxe_ds_StringMap();
					while(--len3 > 0) {
						var k2 = _gthis.readValue(k);
						var v9 = _gthis.readValue(v5);
						if(__map_reserved[k2] != null) {
							m1.setReserved(k2,v9);
						} else {
							m1.h[k2] = v9;
						}
					}
					tmp2 = m1;
				}
				return tmp2;
			case 6:
				var _g = k.name;
				var v10 = this.input.b[this.inPos++];
				if(v10 == 128) {
					v10 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len4 = v10;
				if(len4 == 0) {
					return null;
				}
				var m2 = new haxe_ds_EnumValueMap();
				while(--len4 > 0) {
					var k3 = this.readValue(k);
					var v11 = this.readValue(v5);
					m2.set(k3,v11);
				}
				return m2;
			default:
				var v12 = this.input.b[this.inPos++];
				if(v12 == 128) {
					v12 = this.input.getInt32(this.inPos);
					this.inPos += 4;
				}
				var len5 = v12;
				var tmp3;
				if(len5 == 0) {
					tmp3 = null;
				} else {
					var m3 = new haxe_ds_ObjectMap();
					while(--len5 > 0) {
						var k4 = _gthis.readValue(k);
						var v13 = _gthis.readValue(v5);
						m3.set(k4,v13);
					}
					tmp3 = m3;
				}
				return tmp3;
			}
			break;
		case 8:
			var t1 = t.k;
			var v14 = this.input.b[this.inPos++];
			if(v14 == 128) {
				v14 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len6 = v14;
			if(len6 == 0) {
				return null;
			} else {
				--len6;
				var a = [];
				var _g1 = 0;
				var _g11 = len6;
				while(_g1 < _g11) {
					var i = _g1++;
					a[i] = _gthis.readValue(t1);
				}
				return a;
			}
			break;
		case 9:
			var fields = t.fields;
			var v15 = this.input.b[this.inPos++];
			if(v15 == 128) {
				v15 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var bits = v15;
			if(bits == 0) {
				return null;
			}
			var o1 = { };
			--bits;
			var _g2 = [];
			var _g12 = 0;
			while(_g12 < fields.length) {
				var f = fields[_g12];
				++_g12;
				if(this.isNullable(f.type)) {
					_g2.push(f);
				}
			}
			var nullables = _g2;
			var _g21 = 0;
			while(_g21 < fields.length) {
				var f1 = fields[_g21];
				++_g21;
				var nidx = nullables.indexOf(f1);
				if(nidx >= 0 && (bits & 1 << nidx) == 0) {
					continue;
				}
				o1[f1.name] = this.readValue(f1.type);
			}
			return o1;
		case 10:
			var t2 = t.k;
			return this.readValue(t2);
		case 11:
			var t3 = t.k;
			var v16 = this.input.b[this.inPos++];
			if(v16 == 128) {
				v16 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			var len7 = v16;
			if(len7 == 0) {
				return null;
			} else {
				--len7;
				var this1 = new Array(len7);
				var a1 = this1;
				var _g3 = 0;
				var _g13 = len7;
				while(_g3 < _g13) {
					var i1 = _g3++;
					a1[i1] = _gthis.readValue(t3);
				}
				return a1;
			}
			break;
		case 12:
			var t4 = t.t;
			if(this.input.b[this.inPos++] == 0) {
				return null;
			} else {
				return this.readValue(t4);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
		case 14:
			return this.getDynamic();
		case 15:
			var v17 = this.input.getInt64(this.inPos);
			this.inPos += 8;
			return v17;
		case 16:
			var _g7 = t.t;
			var v18 = this.input.b[this.inPos++];
			if(v18 == 128) {
				v18 = this.input.getInt32(this.inPos);
				this.inPos += 4;
			}
			return v18;
		case 17:
			return this.getStruct();
		}
	}
	,writeValue: function(v,t) {
		var _gthis = this;
		switch(t._hx_index) {
		case 0:
			var v1 = v;
			if(v1 >= 0 && v1 < 128) {
				this.out.addByte(v1);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v1);
			}
			break;
		case 1:
			this.out.addFloat(v);
			break;
		case 2:
			this.out.addByte(v ? 1 : 0);
			break;
		case 3:
			var s = v;
			if(s == null) {
				this.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(s);
				var v2 = b.length + 1;
				if(v2 >= 0 && v2 < 128) {
					this.out.addByte(v2);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v2);
				}
				this.out.add(b);
			}
			break;
		case 4:
			var b1 = v;
			if(b1 == null) {
				this.out.addByte(0);
			} else {
				var v3 = b1.length + 1;
				if(v3 >= 0 && v3 < 128) {
					this.out.addByte(v3);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v3);
				}
				this.out.add(b1);
			}
			break;
		case 5:
			var _g2 = t.name;
			this.addKnownRef(v);
			break;
		case 6:
			var name = t.name;
			var ser = this.getEnumClass(name);
			if(ser == null) {
				throw new js__$Boot_HaxeError("No enum unserializer found for " + name);
			}
			ser.doSerialize(this,v);
			break;
		case 7:
			var t1 = t.v;
			var k = t.k;
			switch(k._hx_index) {
			case 0:
				var v4 = v;
				if(v4 == null) {
					this.out.addByte(0);
				} else {
					var _g = [];
					var k1 = v4.keys();
					while(k1.hasNext()) {
						var k2 = k1.next();
						_g.push(k2);
					}
					var keys = _g;
					var v5 = keys.length + 1;
					if(v5 >= 0 && v5 < 128) {
						this.out.addByte(v5);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v5);
					}
					var _g1 = 0;
					while(_g1 < keys.length) {
						var k3 = keys[_g1];
						++_g1;
						_gthis.writeValue(k3,k);
						_gthis.writeValue(v4.h[k3],t1);
					}
				}
				break;
			case 3:
				var v6 = v;
				if(v6 == null) {
					this.out.addByte(0);
				} else {
					var _g3 = [];
					var k4 = v6.keys();
					while(k4.hasNext()) {
						var k5 = k4.next();
						_g3.push(k5);
					}
					var keys1 = _g3;
					var v7 = keys1.length + 1;
					if(v7 >= 0 && v7 < 128) {
						this.out.addByte(v7);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v7);
					}
					var _g11 = 0;
					while(_g11 < keys1.length) {
						var k6 = keys1[_g11];
						++_g11;
						_gthis.writeValue(k6,k);
						_gthis.writeValue(__map_reserved[k6] != null ? v6.getReserved(k6) : v6.h[k6],t1);
					}
				}
				break;
			case 6:
				var _g4 = k.name;
				var v8 = v;
				if(v8 == null) {
					this.out.addByte(0);
					return;
				}
				var _g5 = [];
				var k7 = v8.keys();
				while(k7.hasNext()) {
					var k8 = k7.next();
					_g5.push(k8);
				}
				var keys2 = _g5;
				var v9 = keys2.length + 1;
				if(v9 >= 0 && v9 < 128) {
					this.out.addByte(v9);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v9);
				}
				var _g12 = 0;
				while(_g12 < keys2.length) {
					var vk = keys2[_g12];
					++_g12;
					this.writeValue(vk,k);
					this.writeValue(v8.get(vk),t1);
				}
				break;
			default:
				var v10 = v;
				if(v10 == null) {
					this.out.addByte(0);
				} else {
					var _g6 = [];
					var k9 = v10.keys();
					while(k9.hasNext()) {
						var k10 = k9.next();
						_g6.push(k10);
					}
					var keys3 = _g6;
					var v11 = keys3.length + 1;
					if(v11 >= 0 && v11 < 128) {
						this.out.addByte(v11);
					} else {
						this.out.addByte(128);
						this.out.addInt32(v11);
					}
					var _g13 = 0;
					while(_g13 < keys3.length) {
						var k11 = keys3[_g13];
						++_g13;
						_gthis.writeValue(k11,k);
						_gthis.writeValue(v10.h[k11.__id__],t1);
					}
				}
			}
			break;
		case 8:
			var t2 = t.k;
			var a = v;
			if(a == null) {
				this.out.addByte(0);
			} else {
				var v12 = a.length + 1;
				if(v12 >= 0 && v12 < 128) {
					this.out.addByte(v12);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v12);
				}
				var _g7 = 0;
				while(_g7 < a.length) {
					var v13 = a[_g7];
					++_g7;
					_gthis.writeValue(v13,t2);
				}
			}
			break;
		case 9:
			var fields = t.fields;
			if(v == null) {
				this.out.addByte(0);
			} else {
				var fbits = 0;
				var _g8 = [];
				var _g14 = 0;
				while(_g14 < fields.length) {
					var f = fields[_g14];
					++_g14;
					if(this.isNullable(f.type)) {
						_g8.push(f);
					}
				}
				var nullables = _g8;
				var _g21 = 0;
				var _g31 = nullables.length;
				while(_g21 < _g31) {
					var i = _g21++;
					if(Reflect.field(v,nullables[i].name) != null) {
						fbits |= 1 << i;
					}
				}
				var v14 = fbits + 1;
				if(v14 >= 0 && v14 < 128) {
					this.out.addByte(v14);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v14);
				}
				var _g41 = 0;
				while(_g41 < fields.length) {
					var f1 = fields[_g41];
					++_g41;
					var nidx = nullables.indexOf(f1);
					if(nidx >= 0 && (fbits & 1 << nidx) == 0) {
						continue;
					}
					this.writeValue(Reflect.field(v,f1.name),f1.type);
				}
			}
			break;
		case 10:
			var t3 = t.k;
			this.writeValue(v,t3);
			break;
		case 11:
			var t4 = t.k;
			var a1 = v;
			if(a1 == null) {
				this.out.addByte(0);
			} else {
				var v15 = a1.length + 1;
				if(v15 >= 0 && v15 < 128) {
					this.out.addByte(v15);
				} else {
					this.out.addByte(128);
					this.out.addInt32(v15);
				}
				var _g9 = 0;
				while(_g9 < a1.length) {
					var v16 = a1[_g9];
					++_g9;
					_gthis.writeValue(v16,t4);
				}
			}
			break;
		case 12:
			var t5 = t.t;
			if(v == null) {
				this.out.addByte(0);
			} else {
				this.out.addByte(1);
				this.writeValue(v,t5);
			}
			break;
		case 13:
			throw new js__$Boot_HaxeError("assert");
		case 14:
			this.addDynamic(v);
			break;
		case 15:
			this.out.addInt64(v);
			break;
		case 16:
			var _g71 = t.t;
			var v17 = v;
			if(v17 >= 0 && v17 < 128) {
				this.out.addByte(v17);
			} else {
				this.out.addByte(128);
				this.out.addInt32(v17);
			}
			break;
		case 17:
			this.addStruct(v);
			break;
		}
	}
	,__class__: hxbit_Serializer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var hxbit_Schema = function() {
	this.__uid = hxbit_Serializer.SEQ << 24 | ++hxbit_Serializer.UID;
	this.fieldsNames = [];
	this.fieldsTypes = [];
};
$hxClasses["hxbit.Schema"] = hxbit_Schema;
hxbit_Schema.__name__ = "hxbit.Schema";
hxbit_Schema.__interfaces__ = [hxbit_Serializable];
hxbit_Schema.prototype = {
	get_checkSum: function() {
		var s = new hxbit_Serializer();
		s.begin();
		var old = this.__uid;
		this.__uid = 0;
		s.addKnownRef(this);
		this.__uid = old;
		var bytes = s.end();
		return haxe_crypto_Crc32.make(bytes);
	}
	,getCLID: function() {
		return hxbit_Schema.__clid;
	}
	,serialize: function(__ctx) {
		__ctx.out.addByte(this.isFinal ? 1 : 0);
		var a = this.fieldsNames;
		if(a == null) {
			__ctx.out.addByte(0);
		} else {
			var v = a.length + 1;
			if(v >= 0 && v < 128) {
				__ctx.out.addByte(v);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v);
			}
			var _g = 0;
			while(_g < a.length) {
				var v1 = a[_g];
				++_g;
				if(v1 == null) {
					__ctx.out.addByte(0);
				} else {
					var b = haxe_io_Bytes.ofString(v1);
					var v2 = b.length + 1;
					if(v2 >= 0 && v2 < 128) {
						__ctx.out.addByte(v2);
					} else {
						__ctx.out.addByte(128);
						__ctx.out.addInt32(v2);
					}
					__ctx.out.add(b);
				}
			}
		}
		var a1 = this.fieldsTypes;
		if(a1 == null) {
			__ctx.out.addByte(0);
		} else {
			var v3 = a1.length + 1;
			if(v3 >= 0 && v3 < 128) {
				__ctx.out.addByte(v3);
			} else {
				__ctx.out.addByte(128);
				__ctx.out.addInt32(v3);
			}
			var _g1 = 0;
			while(_g1 < a1.length) {
				var v4 = a1[_g1];
				++_g1;
				hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(__ctx,v4);
			}
		}
	}
	,getSerializeSchema: function() {
		var schema = new hxbit_Schema();
		schema.fieldsNames.push("isFinal");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PBool);
		schema.fieldsNames.push("fieldsNames");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PString));
		schema.fieldsNames.push("fieldsTypes");
		schema.fieldsTypes.push(hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")));
		schema.isFinal = hxbit_Serializer.isClassFinal(hxbit_Schema.__clid);
		return schema;
	}
	,unserializeInit: function() {
	}
	,unserialize: function(__ctx) {
		this.isFinal = __ctx.input.b[__ctx.inPos++] != 0;
		var e0;
		var v = __ctx.input.b[__ctx.inPos++];
		if(v == 128) {
			v = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len = v;
		var tmp;
		if(len == 0) {
			tmp = null;
		} else {
			--len;
			var a = [];
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var v1 = __ctx.input.b[__ctx.inPos++];
				if(v1 == 128) {
					v1 = __ctx.input.getInt32(__ctx.inPos);
					__ctx.inPos += 4;
				}
				var len1 = v1;
				if(len1 == 0) {
					e0 = null;
				} else {
					--len1;
					var s = __ctx.input.getString(__ctx.inPos,len1);
					__ctx.inPos += len1;
					e0 = s;
				}
				a[i] = e0;
			}
			tmp = a;
		}
		this.fieldsNames = tmp;
		var e01;
		var v2 = __ctx.input.b[__ctx.inPos++];
		if(v2 == 128) {
			v2 = __ctx.input.getInt32(__ctx.inPos);
			__ctx.inPos += 4;
		}
		var len2 = v2;
		var tmp1;
		if(len2 == 0) {
			tmp1 = null;
		} else {
			--len2;
			var a1 = [];
			var _g2 = 0;
			var _g11 = len2;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(__ctx);
				e01 = __e;
				a1[i1] = e01;
			}
			tmp1 = a1;
		}
		this.fieldsTypes = tmp1;
	}
	,__class__: hxbit_Schema
};
var hxbit_SerializableEnum = function() { };
$hxClasses["hxbit.SerializableEnum"] = hxbit_SerializableEnum;
hxbit_SerializableEnum.__name__ = "hxbit.SerializableEnum";
var hxbit_StructSerializable = function() { };
$hxClasses["hxbit.StructSerializable"] = hxbit_StructSerializable;
hxbit_StructSerializable.__name__ = "hxbit.StructSerializable";
hxbit_StructSerializable.__isInterface__ = true;
hxbit_StructSerializable.prototype = {
	__class__: hxbit_StructSerializable
};
var hxbit_enumSer_Hxbit_$PropTypeDesc = function() { };
$hxClasses["hxbit.enumSer.Hxbit_PropTypeDesc"] = hxbit_enumSer_Hxbit_$PropTypeDesc;
hxbit_enumSer_Hxbit_$PropTypeDesc.__name__ = "hxbit.enumSer.Hxbit_PropTypeDesc";
hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			ctx.out.addByte(1);
			break;
		case 1:
			ctx.out.addByte(2);
			break;
		case 2:
			ctx.out.addByte(3);
			break;
		case 3:
			ctx.out.addByte(4);
			break;
		case 4:
			ctx.out.addByte(5);
			break;
		case 5:
			var name = v.name;
			ctx.out.addByte(6);
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			break;
		case 6:
			var name1 = v.name;
			ctx.out.addByte(7);
			if(name1 == null) {
				ctx.out.addByte(0);
			} else {
				var b1 = haxe_io_Bytes.ofString(name1);
				var v2 = b1.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				ctx.out.add(b1);
			}
			break;
		case 7:
			var v3 = v.v;
			var k = v.k;
			ctx.out.addByte(8);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v3);
			break;
		case 8:
			var k1 = v.k;
			ctx.out.addByte(9);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k1);
			break;
		case 9:
			var fields = v.fields;
			ctx.out.addByte(10);
			if(fields == null) {
				ctx.out.addByte(0);
			} else {
				var v4 = fields.length + 1;
				if(v4 >= 0 && v4 < 128) {
					ctx.out.addByte(v4);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v4);
				}
				var _g = 0;
				while(_g < fields.length) {
					var v5 = fields[_g];
					++_g;
					var v6 = v5;
					if(v6 == null) {
						ctx.out.addByte(0);
					} else {
						var fbits = 0;
						if(v6.name != null) {
							fbits |= 1;
						}
						if(v6.type != null) {
							fbits |= 2;
						}
						var v7 = fbits + 1;
						if(v7 >= 0 && v7 < 128) {
							ctx.out.addByte(v7);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v7);
						}
						if((fbits & 1) != 0) {
							var s = v6.name;
							if(s == null) {
								ctx.out.addByte(0);
							} else {
								var b2 = haxe_io_Bytes.ofString(s);
								var v8 = b2.length + 1;
								if(v8 >= 0 && v8 < 128) {
									ctx.out.addByte(v8);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v8);
								}
								ctx.out.add(b2);
							}
						}
						ctx.out.addByte(v6.opt ? 1 : 0);
						if((fbits & 2) != 0) {
							hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,v6.type);
						}
					}
				}
			}
			break;
		case 10:
			var k2 = v.k;
			ctx.out.addByte(11);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k2);
			break;
		case 11:
			var k3 = v.k;
			ctx.out.addByte(12);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,k3);
			break;
		case 12:
			var t = v.t;
			ctx.out.addByte(13);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,t);
			break;
		case 13:
			ctx.out.addByte(14);
			break;
		case 14:
			ctx.out.addByte(15);
			break;
		case 15:
			ctx.out.addByte(16);
			break;
		case 16:
			var t1 = v.t;
			ctx.out.addByte(17);
			hxbit_enumSer_Hxbit_$PropTypeDesc.doSerialize(ctx,t1);
			break;
		case 17:
			ctx.out.addByte(18);
			break;
		}
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		return hxbit_PropTypeDesc.PInt;
	case 2:
		return hxbit_PropTypeDesc.PFloat;
	case 3:
		return hxbit_PropTypeDesc.PBool;
	case 4:
		return hxbit_PropTypeDesc.PString;
	case 5:
		return hxbit_PropTypeDesc.PBytes;
	case 6:
		var _name;
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		return hxbit_PropTypeDesc.PSerializable(_name);
	case 7:
		var _name1;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v1;
		if(len1 == 0) {
			_name1 = null;
		} else {
			--len1;
			var s1 = ctx.input.getString(ctx.inPos,len1);
			ctx.inPos += len1;
			_name1 = s1;
		}
		return hxbit_PropTypeDesc.PEnum(_name1);
	case 8:
		var _k;
		var __e = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k = __e;
		var _v;
		var __e1 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_v = __e1;
		return hxbit_PropTypeDesc.PMap(_k,_v);
	case 9:
		var _k1;
		var __e2 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k1 = __e2;
		return hxbit_PropTypeDesc.PArray(_k1);
	case 10:
		var _fields;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len2 = v2;
		if(len2 == 0) {
			_fields = null;
		} else {
			--len2;
			var a = [];
			var _g = 0;
			var _g1 = len2;
			while(_g < _g1) {
				var i = _g++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var type = null;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v4;
						if(len3 == 0) {
							name = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							name = s2;
						}
					}
					var opt = ctx.input.b[ctx.inPos++] != 0;
					if((fbits & 2) != 0) {
						var __e3 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
						type = __e3;
					}
					e0 = { name : name, opt : opt, type : type};
				}
				a[i] = e0;
			}
			_fields = a;
		}
		return hxbit_PropTypeDesc.PObj(_fields);
	case 11:
		var _k2;
		var __e4 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k2 = __e4;
		return hxbit_PropTypeDesc.PAlias(_k2);
	case 12:
		var _k3;
		var __e5 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_k3 = __e5;
		return hxbit_PropTypeDesc.PVector(_k3);
	case 13:
		var _t;
		var __e6 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t = __e6;
		return hxbit_PropTypeDesc.PNull(_t);
	case 14:
		return hxbit_PropTypeDesc.PUnknown;
	case 15:
		return hxbit_PropTypeDesc.PDynamic;
	case 16:
		return hxbit_PropTypeDesc.PInt64;
	case 17:
		var _t1;
		var __e7 = hxbit_enumSer_Hxbit_$PropTypeDesc.doUnserialize(ctx);
		_t1 = __e7;
		return hxbit_PropTypeDesc.PFlags(_t1);
	case 18:
		return hxbit_PropTypeDesc.PStruct;
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_Hxbit_$PropTypeDesc.getSchema = function() {
	var s = new hxbit_Schema();
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PFloat");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBool");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PString");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PBytes");
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var t = hxbit_PropTypeDesc.PString;
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("PSerializable");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v1;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("PEnum");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v2;
	var v3;
	var t2 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("PMap");
	var s4 = s.fieldsTypes;
	var _g3 = [];
	var v4;
	var t3 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g3.push({ name : "", type : t3, opt : false});
	s4.push(hxbit_PropTypeDesc.PObj(_g3));
	s.fieldsNames.push("PArray");
	var s5 = s.fieldsTypes;
	var _g4 = [];
	var v5;
	var t4 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "opt", opt : false, type : hxbit_PropTypeDesc.PBool},{ name : "type", opt : false, type : hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc")}]));
	_g4.push({ name : "", type : t4, opt : false});
	s5.push(hxbit_PropTypeDesc.PObj(_g4));
	s.fieldsNames.push("PObj");
	var s6 = s.fieldsTypes;
	var _g5 = [];
	var v6;
	var t5 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g5.push({ name : "", type : t5, opt : false});
	s6.push(hxbit_PropTypeDesc.PObj(_g5));
	s.fieldsNames.push("PAlias");
	var s7 = s.fieldsTypes;
	var _g6 = [];
	var v7;
	var t6 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g6.push({ name : "", type : t6, opt : false});
	s7.push(hxbit_PropTypeDesc.PObj(_g6));
	s.fieldsNames.push("PVector");
	var s8 = s.fieldsTypes;
	var _g7 = [];
	var v8;
	var t7 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g7.push({ name : "", type : t7, opt : false});
	s8.push(hxbit_PropTypeDesc.PObj(_g7));
	s.fieldsNames.push("PNull");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PUnknown");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PDynamic");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PInt64");
	var s9 = s.fieldsTypes;
	var _g8 = [];
	var v9;
	var t8 = hxbit_PropTypeDesc.PEnum("hxbit.PropTypeDesc");
	_g8.push({ name : "", type : t8, opt : false});
	s9.push(hxbit_PropTypeDesc.PObj(_g8));
	s.fieldsNames.push("PFlags");
	s.fieldsTypes.push(null);
	s.fieldsNames.push("PStruct");
	return s;
};
var hxbit_enumSer_Vdom_$Answer = function() { };
$hxClasses["hxbit.enumSer.Vdom_Answer"] = hxbit_enumSer_Vdom_$Answer;
hxbit_enumSer_Vdom_$Answer.__name__ = "hxbit.enumSer.Vdom_Answer";
hxbit_enumSer_Vdom_$Answer.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			var props = v.props;
			var eid = v.eid;
			ctx.out.addByte(1);
			if(eid >= 0 && eid < 128) {
				ctx.out.addByte(eid);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid);
			}
			var v1 = props;
			if(v1 == null) {
				ctx.out.addByte(0);
			} else {
				var fbits = 0;
				if(v1.ctrlKey != null) {
					fbits |= 1;
				}
				if(v1.keyCode != null) {
					fbits |= 2;
				}
				if(v1.shiftKey != null) {
					fbits |= 4;
				}
				if(v1.target != null) {
					fbits |= 8;
				}
				if(v1.value != null) {
					fbits |= 16;
				}
				if(v1.which != null) {
					fbits |= 32;
				}
				var v2 = fbits + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				if((fbits & 1) != 0) {
					if(v1.ctrlKey == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						ctx.out.addByte(v1.ctrlKey ? 1 : 0);
					}
				}
				if((fbits & 2) != 0) {
					if(v1.keyCode == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v3 = v1.keyCode;
						if(v3 >= 0 && v3 < 128) {
							ctx.out.addByte(v3);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v3);
						}
					}
				}
				if((fbits & 4) != 0) {
					if(v1.shiftKey == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						ctx.out.addByte(v1.shiftKey ? 1 : 0);
					}
				}
				if((fbits & 8) != 0) {
					if(v1.target == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v4 = v1.target;
						if(v4 >= 0 && v4 < 128) {
							ctx.out.addByte(v4);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v4);
						}
					}
				}
				if((fbits & 16) != 0) {
					ctx.addDynamic(v1.value);
				}
				if((fbits & 32) != 0) {
					if(v1.which == null) {
						ctx.out.addByte(0);
					} else {
						ctx.out.addByte(1);
						var v5 = v1.which;
						if(v5 >= 0 && v5 < 128) {
							ctx.out.addByte(v5);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v5);
						}
					}
				}
			}
			break;
		case 1:
			var value = v.value;
			var id = v.id;
			ctx.out.addByte(2);
			if(id >= 0 && id < 128) {
				ctx.out.addByte(id);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id);
			}
			if(value == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(value);
				var v6 = b.length + 1;
				if(v6 >= 0 && v6 < 128) {
					ctx.out.addByte(v6);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v6);
				}
				ctx.out.add(b);
			}
			break;
		case 2:
			var eid1 = v.eid;
			ctx.out.addByte(3);
			if(eid1 >= 0 && eid1 < 128) {
				ctx.out.addByte(eid1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid1);
			}
			break;
		}
	}
};
hxbit_enumSer_Vdom_$Answer.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid = v;
		var _props;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var fbits = v1;
		if(fbits == 0) {
			_props = null;
		} else {
			--fbits;
			var which = null;
			var value = null;
			var target = null;
			var shiftKey = null;
			var keyCode = null;
			var ctrlKey = null;
			if((fbits & 1) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					ctrlKey = null;
				} else {
					ctrlKey = ctx.input.b[ctx.inPos++] != 0;
				}
			}
			if((fbits & 2) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					keyCode = null;
				} else {
					var v2 = ctx.input.b[ctx.inPos++];
					if(v2 == 128) {
						v2 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					keyCode = v2;
				}
			}
			if((fbits & 4) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					shiftKey = null;
				} else {
					shiftKey = ctx.input.b[ctx.inPos++] != 0;
				}
			}
			if((fbits & 8) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					target = null;
				} else {
					var v3 = ctx.input.b[ctx.inPos++];
					if(v3 == 128) {
						v3 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					target = v3;
				}
			}
			if((fbits & 16) != 0) {
				value = ctx.getDynamic();
			}
			if((fbits & 32) != 0) {
				if(ctx.input.b[ctx.inPos++] == 0) {
					which = null;
				} else {
					var v4 = ctx.input.b[ctx.inPos++];
					if(v4 == 128) {
						v4 = ctx.input.getInt32(ctx.inPos);
						ctx.inPos += 4;
					}
					which = v4;
				}
			}
			_props = { ctrlKey : ctrlKey, keyCode : keyCode, shiftKey : shiftKey, target : target, value : value, which : which};
		}
		return vdom_Answer.Event(_eid,_props);
	case 2:
		var v5 = ctx.input.b[ctx.inPos++];
		if(v5 == 128) {
			v5 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id = v5;
		var _value;
		var v6 = ctx.input.b[ctx.inPos++];
		if(v6 == 128) {
			v6 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v6;
		if(len == 0) {
			_value = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_value = s;
		}
		return vdom_Answer.SetValue(_id,_value);
	case 3:
		var v7 = ctx.input.b[ctx.inPos++];
		if(v7 == 128) {
			v7 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid1 = v7;
		return vdom_Answer.Done(_eid1);
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_Vdom_$Answer.getSchema = function() {
	var s = new hxbit_Schema();
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var v1;
	var t = hxbit_PropTypeDesc.PObj([{ name : "ctrlKey", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PBool)},{ name : "keyCode", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)},{ name : "shiftKey", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PBool)},{ name : "target", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)},{ name : "value", opt : true, type : hxbit_PropTypeDesc.PDynamic},{ name : "which", opt : true, type : hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt)}]);
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("Event");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v2;
	var v3;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("SetValue");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v4;
	var t2 = hxbit_PropTypeDesc.PInt;
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("Done");
	return s;
};
var hxbit_enumSer_Vdom_$Message = function() { };
$hxClasses["hxbit.enumSer.Vdom_Message"] = hxbit_enumSer_Vdom_$Message;
hxbit_enumSer_Vdom_$Message.__name__ = "hxbit.enumSer.Vdom_Message";
hxbit_enumSer_Vdom_$Message.doSerialize = function(ctx,v) {
	if(v == null) {
		ctx.out.addByte(0);
	} else {
		switch(v._hx_index) {
		case 0:
			var attr = v.attr;
			var name = v.name;
			var id = v.id;
			ctx.out.addByte(1);
			if(id >= 0 && id < 128) {
				ctx.out.addByte(id);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id);
			}
			if(name == null) {
				ctx.out.addByte(0);
			} else {
				var b = haxe_io_Bytes.ofString(name);
				var v1 = b.length + 1;
				if(v1 >= 0 && v1 < 128) {
					ctx.out.addByte(v1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v1);
				}
				ctx.out.add(b);
			}
			if(attr == null) {
				ctx.out.addByte(0);
			} else {
				var v2 = attr.length + 1;
				if(v2 >= 0 && v2 < 128) {
					ctx.out.addByte(v2);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v2);
				}
				var _g = 0;
				while(_g < attr.length) {
					var v3 = attr[_g];
					++_g;
					var v4 = v3;
					if(v4 == null) {
						ctx.out.addByte(0);
					} else {
						var fbits = 0;
						if(v4.name != null) {
							fbits |= 1;
						}
						if(v4.value != null) {
							fbits |= 2;
						}
						var v5 = fbits + 1;
						if(v5 >= 0 && v5 < 128) {
							ctx.out.addByte(v5);
						} else {
							ctx.out.addByte(128);
							ctx.out.addInt32(v5);
						}
						if((fbits & 1) != 0) {
							var s = v4.name;
							if(s == null) {
								ctx.out.addByte(0);
							} else {
								var b1 = haxe_io_Bytes.ofString(s);
								var v6 = b1.length + 1;
								if(v6 >= 0 && v6 < 128) {
									ctx.out.addByte(v6);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v6);
								}
								ctx.out.add(b1);
							}
						}
						if((fbits & 2) != 0) {
							var s1 = v4.value;
							if(s1 == null) {
								ctx.out.addByte(0);
							} else {
								var b2 = haxe_io_Bytes.ofString(s1);
								var v7 = b2.length + 1;
								if(v7 >= 0 && v7 < 128) {
									ctx.out.addByte(v7);
								} else {
									ctx.out.addByte(128);
									ctx.out.addInt32(v7);
								}
								ctx.out.add(b2);
							}
						}
					}
				}
			}
			break;
		case 1:
			var name1 = v.name;
			var id1 = v.id;
			ctx.out.addByte(2);
			if(id1 >= 0 && id1 < 128) {
				ctx.out.addByte(id1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id1);
			}
			if(name1 == null) {
				ctx.out.addByte(0);
			} else {
				var b3 = haxe_io_Bytes.ofString(name1);
				var v8 = b3.length + 1;
				if(v8 >= 0 && v8 < 128) {
					ctx.out.addByte(v8);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v8);
				}
				ctx.out.add(b3);
			}
			break;
		case 2:
			var name2 = v.name;
			var id2 = v.id;
			ctx.out.addByte(3);
			if(id2 >= 0 && id2 < 128) {
				ctx.out.addByte(id2);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id2);
			}
			if(name2 == null) {
				ctx.out.addByte(0);
			} else {
				var b4 = haxe_io_Bytes.ofString(name2);
				var v9 = b4.length + 1;
				if(v9 >= 0 && v9 < 128) {
					ctx.out.addByte(v9);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v9);
				}
				ctx.out.add(b4);
			}
			break;
		case 3:
			var to = v.to;
			var id3 = v.id;
			ctx.out.addByte(4);
			if(id3 >= 0 && id3 < 128) {
				ctx.out.addByte(id3);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id3);
			}
			if(to >= 0 && to < 128) {
				ctx.out.addByte(to);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(to);
			}
			break;
		case 4:
			var pos = v.pos;
			var to1 = v.to;
			var id4 = v.id;
			ctx.out.addByte(5);
			if(id4 >= 0 && id4 < 128) {
				ctx.out.addByte(id4);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id4);
			}
			if(to1 >= 0 && to1 < 128) {
				ctx.out.addByte(to1);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(to1);
			}
			if(pos >= 0 && pos < 128) {
				ctx.out.addByte(pos);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(pos);
			}
			break;
		case 5:
			var pid = v.pid;
			var text = v.text;
			var id5 = v.id;
			ctx.out.addByte(6);
			if(id5 >= 0 && id5 < 128) {
				ctx.out.addByte(id5);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id5);
			}
			if(text == null) {
				ctx.out.addByte(0);
			} else {
				var b5 = haxe_io_Bytes.ofString(text);
				var v10 = b5.length + 1;
				if(v10 >= 0 && v10 < 128) {
					ctx.out.addByte(v10);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v10);
				}
				ctx.out.add(b5);
			}
			if(pid == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				if(pid >= 0 && pid < 128) {
					ctx.out.addByte(pid);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(pid);
				}
			}
			break;
		case 6:
			var id6 = v.id;
			ctx.out.addByte(7);
			if(id6 >= 0 && id6 < 128) {
				ctx.out.addByte(id6);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id6);
			}
			break;
		case 7:
			var id7 = v.id;
			ctx.out.addByte(8);
			if(id7 >= 0 && id7 < 128) {
				ctx.out.addByte(id7);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id7);
			}
			break;
		case 8:
			var eid = v.eid;
			var name3 = v.name;
			var id8 = v.id;
			ctx.out.addByte(9);
			if(id8 >= 0 && id8 < 128) {
				ctx.out.addByte(id8);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id8);
			}
			if(name3 == null) {
				ctx.out.addByte(0);
			} else {
				var b6 = haxe_io_Bytes.ofString(name3);
				var v11 = b6.length + 1;
				if(v11 >= 0 && v11 < 128) {
					ctx.out.addByte(v11);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v11);
				}
				ctx.out.add(b6);
			}
			if(eid >= 0 && eid < 128) {
				ctx.out.addByte(eid);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(eid);
			}
			break;
		case 9:
			var val = v.val;
			var att = v.att;
			var id9 = v.id;
			ctx.out.addByte(10);
			if(id9 >= 0 && id9 < 128) {
				ctx.out.addByte(id9);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id9);
			}
			if(att == null) {
				ctx.out.addByte(0);
			} else {
				var b7 = haxe_io_Bytes.ofString(att);
				var v12 = b7.length + 1;
				if(v12 >= 0 && v12 < 128) {
					ctx.out.addByte(v12);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v12);
				}
				ctx.out.add(b7);
			}
			if(val == null) {
				ctx.out.addByte(0);
			} else {
				var b8 = haxe_io_Bytes.ofString(val);
				var v13 = b8.length + 1;
				if(v13 >= 0 && v13 < 128) {
					ctx.out.addByte(v13);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v13);
				}
				ctx.out.add(b8);
			}
			break;
		case 10:
			var val1 = v.val;
			var st = v.st;
			var id10 = v.id;
			ctx.out.addByte(11);
			if(id10 >= 0 && id10 < 128) {
				ctx.out.addByte(id10);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id10);
			}
			if(st == null) {
				ctx.out.addByte(0);
			} else {
				var b9 = haxe_io_Bytes.ofString(st);
				var v14 = b9.length + 1;
				if(v14 >= 0 && v14 < 128) {
					ctx.out.addByte(v14);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v14);
				}
				ctx.out.add(b9);
			}
			if(val1 == null) {
				ctx.out.addByte(0);
			} else {
				var b10 = haxe_io_Bytes.ofString(val1);
				var v15 = b10.length + 1;
				if(v15 >= 0 && v15 < 128) {
					ctx.out.addByte(v15);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v15);
				}
				ctx.out.add(b10);
			}
			break;
		case 11:
			var name4 = v.name;
			var id11 = v.id;
			ctx.out.addByte(12);
			if(id11 >= 0 && id11 < 128) {
				ctx.out.addByte(id11);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id11);
			}
			if(name4 == null) {
				ctx.out.addByte(0);
			} else {
				var b11 = haxe_io_Bytes.ofString(name4);
				var v16 = b11.length + 1;
				if(v16 >= 0 && v16 < 128) {
					ctx.out.addByte(v16);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v16);
				}
				ctx.out.add(b11);
			}
			break;
		case 12:
			var eid1 = v.eid;
			var args = v.args;
			var name5 = v.name;
			var id12 = v.id;
			ctx.out.addByte(13);
			if(id12 >= 0 && id12 < 128) {
				ctx.out.addByte(id12);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id12);
			}
			if(name5 == null) {
				ctx.out.addByte(0);
			} else {
				var b12 = haxe_io_Bytes.ofString(name5);
				var v17 = b12.length + 1;
				if(v17 >= 0 && v17 < 128) {
					ctx.out.addByte(v17);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v17);
				}
				ctx.out.add(b12);
			}
			if(args == null) {
				ctx.out.addByte(0);
			} else {
				var v18 = args.length + 1;
				if(v18 >= 0 && v18 < 128) {
					ctx.out.addByte(v18);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v18);
				}
				var _g1 = 0;
				while(_g1 < args.length) {
					var v19 = args[_g1];
					++_g1;
					ctx.addDynamic(v19);
				}
			}
			if(eid1 == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				if(eid1 >= 0 && eid1 < 128) {
					ctx.out.addByte(eid1);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(eid1);
				}
			}
			break;
		case 13:
			var dur = v.dur;
			var name6 = v.name;
			var id13 = v.id;
			ctx.out.addByte(14);
			if(id13 >= 0 && id13 < 128) {
				ctx.out.addByte(id13);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id13);
			}
			if(name6 == null) {
				ctx.out.addByte(0);
			} else {
				var b13 = haxe_io_Bytes.ofString(name6);
				var v20 = b13.length + 1;
				if(v20 >= 0 && v20 < 128) {
					ctx.out.addByte(v20);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v20);
				}
				ctx.out.add(b13);
			}
			if(dur == null) {
				ctx.out.addByte(0);
			} else {
				ctx.out.addByte(1);
				ctx.out.addFloat(dur);
			}
			break;
		case 14:
			var events = v.events;
			var id14 = v.id;
			ctx.out.addByte(15);
			if(id14 >= 0 && id14 < 128) {
				ctx.out.addByte(id14);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id14);
			}
			if(events == null) {
				ctx.out.addByte(0);
			} else {
				var v21 = events.length + 1;
				if(v21 >= 0 && v21 < 128) {
					ctx.out.addByte(v21);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v21);
				}
				var _g2 = 0;
				while(_g2 < events.length) {
					var v22 = events[_g2];
					++_g2;
					if(v22 >= 0 && v22 < 128) {
						ctx.out.addByte(v22);
					} else {
						ctx.out.addByte(128);
						ctx.out.addInt32(v22);
					}
				}
			}
			break;
		case 15:
			var events1 = v.events;
			ctx.out.addByte(16);
			if(events1 == null) {
				ctx.out.addByte(0);
			} else {
				var v23 = events1.length + 1;
				if(v23 >= 0 && v23 < 128) {
					ctx.out.addByte(v23);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v23);
				}
				var _g3 = 0;
				while(_g3 < events1.length) {
					var v24 = events1[_g3];
					++_g3;
					if(v24 >= 0 && v24 < 128) {
						ctx.out.addByte(v24);
					} else {
						ctx.out.addByte(128);
						ctx.out.addInt32(v24);
					}
				}
			}
			break;
		case 16:
			var msg = v.msg;
			ctx.out.addByte(17);
			if(msg == null) {
				ctx.out.addByte(0);
			} else {
				var v25 = msg.length + 1;
				if(v25 >= 0 && v25 < 128) {
					ctx.out.addByte(v25);
				} else {
					ctx.out.addByte(128);
					ctx.out.addInt32(v25);
				}
				var _g4 = 0;
				while(_g4 < msg.length) {
					var v26 = msg[_g4];
					++_g4;
					hxbit_enumSer_Vdom_$Message.doSerialize(ctx,v26);
				}
			}
			break;
		case 17:
			var value = v.value;
			var id15 = v.id;
			ctx.out.addByte(18);
			if(id15 >= 0 && id15 < 128) {
				ctx.out.addByte(id15);
			} else {
				ctx.out.addByte(128);
				ctx.out.addInt32(id15);
			}
			ctx.addDynamic(value);
			break;
		}
	}
};
hxbit_enumSer_Vdom_$Message.doUnserialize = function(ctx) {
	var b = ctx.input.b[ctx.inPos++];
	if(b == 0) {
		return null;
	}
	switch(b) {
	case 1:
		var v = ctx.input.b[ctx.inPos++];
		if(v == 128) {
			v = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id = v;
		var _name;
		var v1 = ctx.input.b[ctx.inPos++];
		if(v1 == 128) {
			v1 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len = v1;
		if(len == 0) {
			_name = null;
		} else {
			--len;
			var s = ctx.input.getString(ctx.inPos,len);
			ctx.inPos += len;
			_name = s;
		}
		var _attr;
		var e0;
		var v2 = ctx.input.b[ctx.inPos++];
		if(v2 == 128) {
			v2 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len1 = v2;
		if(len1 == 0) {
			_attr = null;
		} else {
			--len1;
			var a = [];
			var _g = 0;
			var _g1 = len1;
			while(_g < _g1) {
				var i = _g++;
				var v3 = ctx.input.b[ctx.inPos++];
				if(v3 == 128) {
					v3 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				var fbits = v3;
				if(fbits == 0) {
					e0 = null;
				} else {
					--fbits;
					var value = null;
					var name = null;
					if((fbits & 1) != 0) {
						var v4 = ctx.input.b[ctx.inPos++];
						if(v4 == 128) {
							v4 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len2 = v4;
						if(len2 == 0) {
							name = null;
						} else {
							--len2;
							var s1 = ctx.input.getString(ctx.inPos,len2);
							ctx.inPos += len2;
							name = s1;
						}
					}
					if((fbits & 2) != 0) {
						var v5 = ctx.input.b[ctx.inPos++];
						if(v5 == 128) {
							v5 = ctx.input.getInt32(ctx.inPos);
							ctx.inPos += 4;
						}
						var len3 = v5;
						if(len3 == 0) {
							value = null;
						} else {
							--len3;
							var s2 = ctx.input.getString(ctx.inPos,len3);
							ctx.inPos += len3;
							value = s2;
						}
					}
					e0 = { name : name, value : value};
				}
				a[i] = e0;
			}
			_attr = a;
		}
		return vdom_Message.Create(_id,_name,_attr);
	case 2:
		var v6 = ctx.input.b[ctx.inPos++];
		if(v6 == 128) {
			v6 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id1 = v6;
		var _name1;
		var v7 = ctx.input.b[ctx.inPos++];
		if(v7 == 128) {
			v7 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len4 = v7;
		if(len4 == 0) {
			_name1 = null;
		} else {
			--len4;
			var s3 = ctx.input.getString(ctx.inPos,len4);
			ctx.inPos += len4;
			_name1 = s3;
		}
		return vdom_Message.AddClass(_id1,_name1);
	case 3:
		var v8 = ctx.input.b[ctx.inPos++];
		if(v8 == 128) {
			v8 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id2 = v8;
		var _name2;
		var v9 = ctx.input.b[ctx.inPos++];
		if(v9 == 128) {
			v9 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len5 = v9;
		if(len5 == 0) {
			_name2 = null;
		} else {
			--len5;
			var s4 = ctx.input.getString(ctx.inPos,len5);
			ctx.inPos += len5;
			_name2 = s4;
		}
		return vdom_Message.RemoveClass(_id2,_name2);
	case 4:
		var v10 = ctx.input.b[ctx.inPos++];
		if(v10 == 128) {
			v10 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id3 = v10;
		var v11 = ctx.input.b[ctx.inPos++];
		if(v11 == 128) {
			v11 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _to = v11;
		return vdom_Message.Append(_id3,_to);
	case 5:
		var v12 = ctx.input.b[ctx.inPos++];
		if(v12 == 128) {
			v12 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id4 = v12;
		var v13 = ctx.input.b[ctx.inPos++];
		if(v13 == 128) {
			v13 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _to1 = v13;
		var v14 = ctx.input.b[ctx.inPos++];
		if(v14 == 128) {
			v14 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _pos = v14;
		return vdom_Message.InsertAt(_id4,_to1,_pos);
	case 6:
		var v15 = ctx.input.b[ctx.inPos++];
		if(v15 == 128) {
			v15 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id5 = v15;
		var _text;
		var v16 = ctx.input.b[ctx.inPos++];
		if(v16 == 128) {
			v16 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len6 = v16;
		if(len6 == 0) {
			_text = null;
		} else {
			--len6;
			var s5 = ctx.input.getString(ctx.inPos,len6);
			ctx.inPos += len6;
			_text = s5;
		}
		var _pid;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_pid = null;
		} else {
			var v17 = ctx.input.b[ctx.inPos++];
			if(v17 == 128) {
				v17 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			_pid = v17;
		}
		return vdom_Message.CreateText(_id5,_text,_pid);
	case 7:
		var v18 = ctx.input.b[ctx.inPos++];
		if(v18 == 128) {
			v18 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id6 = v18;
		return vdom_Message.Reset(_id6);
	case 8:
		var v19 = ctx.input.b[ctx.inPos++];
		if(v19 == 128) {
			v19 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id7 = v19;
		return vdom_Message.Remove(_id7);
	case 9:
		var v20 = ctx.input.b[ctx.inPos++];
		if(v20 == 128) {
			v20 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id8 = v20;
		var _name3;
		var v21 = ctx.input.b[ctx.inPos++];
		if(v21 == 128) {
			v21 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len7 = v21;
		if(len7 == 0) {
			_name3 = null;
		} else {
			--len7;
			var s6 = ctx.input.getString(ctx.inPos,len7);
			ctx.inPos += len7;
			_name3 = s6;
		}
		var v22 = ctx.input.b[ctx.inPos++];
		if(v22 == 128) {
			v22 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _eid = v22;
		return vdom_Message.Event(_id8,_name3,_eid);
	case 10:
		var v23 = ctx.input.b[ctx.inPos++];
		if(v23 == 128) {
			v23 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id9 = v23;
		var _att;
		var v24 = ctx.input.b[ctx.inPos++];
		if(v24 == 128) {
			v24 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len8 = v24;
		if(len8 == 0) {
			_att = null;
		} else {
			--len8;
			var s7 = ctx.input.getString(ctx.inPos,len8);
			ctx.inPos += len8;
			_att = s7;
		}
		var _val;
		var v25 = ctx.input.b[ctx.inPos++];
		if(v25 == 128) {
			v25 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len9 = v25;
		if(len9 == 0) {
			_val = null;
		} else {
			--len9;
			var s8 = ctx.input.getString(ctx.inPos,len9);
			ctx.inPos += len9;
			_val = s8;
		}
		return vdom_Message.SetAttr(_id9,_att,_val);
	case 11:
		var v26 = ctx.input.b[ctx.inPos++];
		if(v26 == 128) {
			v26 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id10 = v26;
		var _st;
		var v27 = ctx.input.b[ctx.inPos++];
		if(v27 == 128) {
			v27 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len10 = v27;
		if(len10 == 0) {
			_st = null;
		} else {
			--len10;
			var s9 = ctx.input.getString(ctx.inPos,len10);
			ctx.inPos += len10;
			_st = s9;
		}
		var _val1;
		var v28 = ctx.input.b[ctx.inPos++];
		if(v28 == 128) {
			v28 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len11 = v28;
		if(len11 == 0) {
			_val1 = null;
		} else {
			--len11;
			var s10 = ctx.input.getString(ctx.inPos,len11);
			ctx.inPos += len11;
			_val1 = s10;
		}
		return vdom_Message.SetStyle(_id10,_st,_val1);
	case 12:
		var v29 = ctx.input.b[ctx.inPos++];
		if(v29 == 128) {
			v29 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id11 = v29;
		var _name4;
		var v30 = ctx.input.b[ctx.inPos++];
		if(v30 == 128) {
			v30 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len12 = v30;
		if(len12 == 0) {
			_name4 = null;
		} else {
			--len12;
			var s11 = ctx.input.getString(ctx.inPos,len12);
			ctx.inPos += len12;
			_name4 = s11;
		}
		return vdom_Message.Trigger(_id11,_name4);
	case 13:
		var v31 = ctx.input.b[ctx.inPos++];
		if(v31 == 128) {
			v31 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id12 = v31;
		var _name5;
		var v32 = ctx.input.b[ctx.inPos++];
		if(v32 == 128) {
			v32 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len13 = v32;
		if(len13 == 0) {
			_name5 = null;
		} else {
			--len13;
			var s12 = ctx.input.getString(ctx.inPos,len13);
			ctx.inPos += len13;
			_name5 = s12;
		}
		var _args;
		var e01;
		var v33 = ctx.input.b[ctx.inPos++];
		if(v33 == 128) {
			v33 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len14 = v33;
		if(len14 == 0) {
			_args = null;
		} else {
			--len14;
			var a1 = [];
			var _g2 = 0;
			var _g11 = len14;
			while(_g2 < _g11) {
				var i1 = _g2++;
				e01 = ctx.getDynamic();
				a1[i1] = e01;
			}
			_args = a1;
		}
		var _eid1;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_eid1 = null;
		} else {
			var v34 = ctx.input.b[ctx.inPos++];
			if(v34 == 128) {
				v34 = ctx.input.getInt32(ctx.inPos);
				ctx.inPos += 4;
			}
			_eid1 = v34;
		}
		return vdom_Message.Special(_id12,_name5,_args,_eid1);
	case 14:
		var v35 = ctx.input.b[ctx.inPos++];
		if(v35 == 128) {
			v35 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id13 = v35;
		var _name6;
		var v36 = ctx.input.b[ctx.inPos++];
		if(v36 == 128) {
			v36 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len15 = v36;
		if(len15 == 0) {
			_name6 = null;
		} else {
			--len15;
			var s13 = ctx.input.getString(ctx.inPos,len15);
			ctx.inPos += len15;
			_name6 = s13;
		}
		var _dur;
		if(ctx.input.b[ctx.inPos++] == 0) {
			_dur = null;
		} else {
			var v37 = ctx.input.getFloat(ctx.inPos);
			ctx.inPos += 4;
			_dur = v37;
		}
		return vdom_Message.Anim(_id13,_name6,_dur);
	case 15:
		var v38 = ctx.input.b[ctx.inPos++];
		if(v38 == 128) {
			v38 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id14 = v38;
		var _events;
		var e02;
		var v39 = ctx.input.b[ctx.inPos++];
		if(v39 == 128) {
			v39 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len16 = v39;
		if(len16 == 0) {
			_events = null;
		} else {
			--len16;
			var a2 = [];
			var _g3 = 0;
			var _g12 = len16;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var v40 = ctx.input.b[ctx.inPos++];
				if(v40 == 128) {
					v40 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				e02 = v40;
				a2[i2] = e02;
			}
			_events = a2;
		}
		return vdom_Message.Dispose(_id14,_events);
	case 16:
		var _events1;
		var e03;
		var v41 = ctx.input.b[ctx.inPos++];
		if(v41 == 128) {
			v41 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len17 = v41;
		if(len17 == 0) {
			_events1 = null;
		} else {
			--len17;
			var a3 = [];
			var _g4 = 0;
			var _g13 = len17;
			while(_g4 < _g13) {
				var i3 = _g4++;
				var v42 = ctx.input.b[ctx.inPos++];
				if(v42 == 128) {
					v42 = ctx.input.getInt32(ctx.inPos);
					ctx.inPos += 4;
				}
				e03 = v42;
				a3[i3] = e03;
			}
			_events1 = a3;
		}
		return vdom_Message.Unbind(_events1);
	case 17:
		var _msg;
		var e04;
		var v43 = ctx.input.b[ctx.inPos++];
		if(v43 == 128) {
			v43 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var len18 = v43;
		if(len18 == 0) {
			_msg = null;
		} else {
			--len18;
			var a4 = [];
			var _g5 = 0;
			var _g14 = len18;
			while(_g5 < _g14) {
				var i4 = _g5++;
				var __e = hxbit_enumSer_Vdom_$Message.doUnserialize(ctx);
				e04 = __e;
				a4[i4] = e04;
			}
			_msg = a4;
		}
		return vdom_Message.Group(_msg);
	case 18:
		var v44 = ctx.input.b[ctx.inPos++];
		if(v44 == 128) {
			v44 = ctx.input.getInt32(ctx.inPos);
			ctx.inPos += 4;
		}
		var _id15 = v44;
		var _value = ctx.getDynamic();
		return vdom_Message.SetVal(_id15,_value);
	default:
		throw new js__$Boot_HaxeError("Invalid enum index " + b);
	}
};
hxbit_enumSer_Vdom_$Message.getSchema = function() {
	var s = new hxbit_Schema();
	var s1 = s.fieldsTypes;
	var _g = [];
	var v;
	var v1;
	var v2;
	var t = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PObj([{ name : "name", opt : false, type : hxbit_PropTypeDesc.PString},{ name : "value", opt : false, type : hxbit_PropTypeDesc.PString}]));
	_g.push({ name : "", type : t, opt : false});
	s1.push(hxbit_PropTypeDesc.PObj(_g));
	s.fieldsNames.push("Create");
	var s2 = s.fieldsTypes;
	var _g1 = [];
	var v3;
	var v4;
	var t1 = hxbit_PropTypeDesc.PString;
	_g1.push({ name : "", type : t1, opt : false});
	s2.push(hxbit_PropTypeDesc.PObj(_g1));
	s.fieldsNames.push("AddClass");
	var s3 = s.fieldsTypes;
	var _g2 = [];
	var v5;
	var v6;
	var t2 = hxbit_PropTypeDesc.PString;
	_g2.push({ name : "", type : t2, opt : false});
	s3.push(hxbit_PropTypeDesc.PObj(_g2));
	s.fieldsNames.push("RemoveClass");
	var s4 = s.fieldsTypes;
	var _g3 = [];
	var v7;
	var v8;
	var t3 = hxbit_PropTypeDesc.PInt;
	_g3.push({ name : "", type : t3, opt : false});
	s4.push(hxbit_PropTypeDesc.PObj(_g3));
	s.fieldsNames.push("Append");
	var s5 = s.fieldsTypes;
	var _g4 = [];
	var v9;
	var v10;
	var v11;
	var t4 = hxbit_PropTypeDesc.PInt;
	_g4.push({ name : "", type : t4, opt : false});
	s5.push(hxbit_PropTypeDesc.PObj(_g4));
	s.fieldsNames.push("InsertAt");
	var s6 = s.fieldsTypes;
	var _g5 = [];
	var v12;
	var v13;
	var v14;
	var t5 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt);
	_g5.push({ name : "", type : t5, opt : false});
	s6.push(hxbit_PropTypeDesc.PObj(_g5));
	s.fieldsNames.push("CreateText");
	var s7 = s.fieldsTypes;
	var _g6 = [];
	var v15;
	var t6 = hxbit_PropTypeDesc.PInt;
	_g6.push({ name : "", type : t6, opt : false});
	s7.push(hxbit_PropTypeDesc.PObj(_g6));
	s.fieldsNames.push("Reset");
	var s8 = s.fieldsTypes;
	var _g7 = [];
	var v16;
	var t7 = hxbit_PropTypeDesc.PInt;
	_g7.push({ name : "", type : t7, opt : false});
	s8.push(hxbit_PropTypeDesc.PObj(_g7));
	s.fieldsNames.push("Remove");
	var s9 = s.fieldsTypes;
	var _g8 = [];
	var v17;
	var v18;
	var v19;
	var t8 = hxbit_PropTypeDesc.PInt;
	_g8.push({ name : "", type : t8, opt : false});
	s9.push(hxbit_PropTypeDesc.PObj(_g8));
	s.fieldsNames.push("Event");
	var s10 = s.fieldsTypes;
	var _g9 = [];
	var v20;
	var v21;
	var v22;
	var t9 = hxbit_PropTypeDesc.PString;
	_g9.push({ name : "", type : t9, opt : false});
	s10.push(hxbit_PropTypeDesc.PObj(_g9));
	s.fieldsNames.push("SetAttr");
	var s11 = s.fieldsTypes;
	var _g10 = [];
	var v23;
	var v24;
	var v25;
	var t10 = hxbit_PropTypeDesc.PString;
	_g10.push({ name : "", type : t10, opt : false});
	s11.push(hxbit_PropTypeDesc.PObj(_g10));
	s.fieldsNames.push("SetStyle");
	var s12 = s.fieldsTypes;
	var _g11 = [];
	var v26;
	var v27;
	var t11 = hxbit_PropTypeDesc.PString;
	_g11.push({ name : "", type : t11, opt : false});
	s12.push(hxbit_PropTypeDesc.PObj(_g11));
	s.fieldsNames.push("Trigger");
	var s13 = s.fieldsTypes;
	var _g12 = [];
	var v28;
	var v29;
	var v30;
	var v31;
	var t12 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PInt);
	_g12.push({ name : "", type : t12, opt : false});
	s13.push(hxbit_PropTypeDesc.PObj(_g12));
	s.fieldsNames.push("Special");
	var s14 = s.fieldsTypes;
	var _g13 = [];
	var v32;
	var v33;
	var v34;
	var t13 = hxbit_PropTypeDesc.PNull(hxbit_PropTypeDesc.PFloat);
	_g13.push({ name : "", type : t13, opt : false});
	s14.push(hxbit_PropTypeDesc.PObj(_g13));
	s.fieldsNames.push("Anim");
	var s15 = s.fieldsTypes;
	var _g14 = [];
	var v35;
	var v36;
	var t14 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PInt);
	_g14.push({ name : "", type : t14, opt : false});
	s15.push(hxbit_PropTypeDesc.PObj(_g14));
	s.fieldsNames.push("Dispose");
	var s16 = s.fieldsTypes;
	var _g15 = [];
	var v37;
	var t15 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PInt);
	_g15.push({ name : "", type : t15, opt : false});
	s16.push(hxbit_PropTypeDesc.PObj(_g15));
	s.fieldsNames.push("Unbind");
	var s17 = s.fieldsTypes;
	var _g16 = [];
	var v38;
	var t16 = hxbit_PropTypeDesc.PArray(hxbit_PropTypeDesc.PEnum("vdom.Message"));
	_g16.push({ name : "", type : t16, opt : false});
	s17.push(hxbit_PropTypeDesc.PObj(_g16));
	s.fieldsNames.push("Group");
	var s18 = s.fieldsTypes;
	var _g17 = [];
	var v39;
	var v40;
	var t17 = hxbit_PropTypeDesc.PDynamic;
	_g17.push({ name : "", type : t17, opt : false});
	s18.push(hxbit_PropTypeDesc.PObj(_g17));
	s.fieldsNames.push("SetVal");
	return s;
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
var js_Selection = function(doc) {
	this.doc = doc;
};
$hxClasses["js.Selection"] = js_Selection;
js_Selection.__name__ = "js.Selection";
js_Selection.prototype = {
	insert: function(left,text,right) {
		this.doc.focus();
		if(this.doc.selectionStart != null) {
			var top = this.doc.scrollTop;
			var start = this.doc.selectionStart;
			var end = this.doc.selectionEnd;
			var tmp = Std.string(this.doc.value.substr(0,start)) + left + text + right;
			var tmp1 = Std.string(this.doc.value.substr(end));
			this.doc.value = tmp + tmp1;
			this.doc.selectionStart = start + left.length;
			this.doc.selectionEnd = start + left.length + text.length;
			this.doc.scrollTop = top;
			return;
		}
		var range = js_Lib.document.selection.createRange();
		range.text = left + text + right;
		range.moveStart("character",-text.length - right.length);
		range.moveEnd("character",-right.length);
		range.select();
	}
	,__class__: js_Selection
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
$hxClasses["js.jquery.JqEltsIterator"] = js_jquery_JqEltsIterator;
js_jquery_JqEltsIterator.__name__ = "js.jquery.JqEltsIterator";
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
	,__class__: js_jquery_JqEltsIterator
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
$hxClasses["js.jquery.JqIterator"] = js_jquery_JqIterator;
js_jquery_JqIterator.__name__ = "js.jquery.JqIterator";
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
	,__class__: js_jquery_JqIterator
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_Fs = require("fs");
var js_node_Net = require("net");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
$hxClasses["js.node.buffer._Buffer.Helper"] = js_node_buffer__$Buffer_Helper;
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_webkit_App = require("nw.gui").App;
var js_node_webkit_Clipboard = require("nw.gui").Clipboard;
var js_node_webkit_Menu = require("nw.gui").Menu;
var js_node_webkit_MenuItem = require("nw.gui").MenuItem;
var js_node_webkit_Shell = require("nw.gui").Shell;
var js_node_webkit_Window = require("nw.gui").Window;
var lvl_Image = function(w,h) {
	this.originY = 0;
	this.originX = 0;
	this.width = w;
	this.height = h;
	this.canvas = window.document.createElement("canvas");
	this.origin = this.canvas;
	this.canvas.width = w;
	this.canvas.height = h;
	this.init();
};
$hxClasses["lvl.Image"] = lvl_Image;
lvl_Image.__name__ = "lvl.Image";
lvl_Image.clearCache = function(url) {
	lvl_Image.cache.remove(url);
};
lvl_Image.load = function(url,callb,onError,forceReload) {
	var _this = lvl_Image.cache;
	var i = __map_reserved[url] != null ? _this.getReserved(url) : _this.h[url];
	if(i != null && !forceReload) {
		var im = new lvl_Image(i.width,i.height);
		im.ctx.drawImage(i,0,0);
		im.origin = i;
		callb(im);
		return;
	}
	i = window.document.createElement("img");
	i.onload = function(_) {
		var _this1 = lvl_Image.cache;
		var i2 = __map_reserved[url] != null ? _this1.getReserved(url) : _this1.h[url];
		if(i2 == null || forceReload) {
			var _this2 = lvl_Image.cache;
			if(__map_reserved[url] != null) {
				_this2.setReserved(url,i);
			} else {
				_this2.h[url] = i;
			}
		} else {
			i = i2;
		}
		var im1 = new lvl_Image(i.width,i.height);
		im1.ctx.drawImage(i,0,0);
		im1.origin = i;
		callb(im1);
	};
	i.onerror = function(_1) {
		if(onError != null) {
			onError();
			return;
		}
		var i1 = new lvl_Image(16,16);
		i1.fill(-65281);
		callb(i1);
	};
	i.src = "file://" + url;
};
lvl_Image.fromCanvas = function(c) {
	var i = new lvl_Image(0,0);
	i.width = c.width;
	i.height = c.height;
	i.canvas = i.origin = c;
	i.init();
	return i;
};
lvl_Image.prototype = {
	get_smooth: function() {
		return this.ctx.imageSmoothingEnabled;
	}
	,set_smooth: function(v) {
		return this.ctx.imageSmoothingEnabled = v;
	}
	,get_alpha: function() {
		return this.ctx.globalAlpha;
	}
	,set_alpha: function(v) {
		return this.ctx.globalAlpha = v;
	}
	,init: function() {
		this.ctx = this.canvas.getContext("2d",null);
		this.ctx.imageSmoothingEnabled = false;
	}
	,getColor: function(color) {
		if(color >>> 24 == 255) {
			return "#" + StringTools.hex(color & 16777215,6);
		} else {
			return "rgba(" + (color >> 16 & 255) + "," + (color >> 8 & 255) + "," + (color & 255) + "," + (color >>> 24) / 255 + ")";
		}
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,clear: function() {
		this.ctx.clearRect(0,0,this.width,this.height);
		this.invalidate();
	}
	,invalidate: function() {
		if(this.origin == this.canvas) {
			return;
		}
		this.origin = this.canvas;
		this.originX = this.originY = 0;
		this.origin.texture = null;
	}
	,fill: function(color) {
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillRect(0,0,this.width,this.height);
		this.invalidate();
	}
	,fillRect: function(x,y,w,h,color) {
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillRect(x,y,w,h);
		this.invalidate();
	}
	,sub: function(x,y,w,h) {
		var i = new lvl_Image(w,h);
		i.ctx.drawImage(this.origin,x,y,w,h,0,0,w,h);
		i.origin = this.origin;
		i.originX = this.originX + x;
		i.originY = this.originY + y;
		return i;
	}
	,text: function(text,x,y,color) {
		if(color == null) {
			color = -1;
		}
		this.ctx.fillStyle = this.getColor(color);
		this.ctx.fillText(text,x,y);
		this.invalidate();
	}
	,draw: function(i,x,y) {
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,x,y,i.width,i.height);
		this.invalidate();
	}
	,drawMat: function(i,m) {
		this.ctx.setTransform(m.a,m.b,m.c,m.d,m.x,m.y);
		this.draw(i,0,0);
		this.ctx.setTransform(1,0,0,1,0,0);
	}
	,drawScaled: function(i,x,y,width,height) {
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,x,y,width,height);
		this.invalidate();
	}
	,drawSub: function(i,srcX,srcY,srcW,srcH,x,y,dstW,dstH) {
		if(dstH == null) {
			dstH = -1;
		}
		if(dstW == null) {
			dstW = -1;
		}
		if(dstW < 0) {
			dstW = srcW;
		}
		if(dstH < 0) {
			dstH = srcH;
		}
		this.ctx.drawImage(i.origin,srcX + i.originX,srcY + i.originY,srcW,srcH,x,y,dstW,dstH);
		this.invalidate();
	}
	,copyFrom: function(i) {
		this.ctx.fillStyle = "rgba(0,0,0,0)";
		this.ctx.fillRect(0,0,this.width,this.height);
		this.ctx.drawImage(i.origin,i.originX,i.originY,i.width,i.height,0,0,this.width,this.height);
		this.invalidate();
	}
	,isBlank: function() {
		var i = this.ctx.getImageData(0,0,this.width,this.height);
		var _g = 0;
		var _g1 = this.width * this.height * 4;
		while(_g < _g1) {
			var k = _g++;
			if(i.data[k] != 0) {
				return false;
			}
		}
		return true;
	}
	,getPixel: function(x,y) {
		var i = this.ctx.getImageData(x,y,1,1);
		return i.data[3] << 24 | i.data[0] << 16 | i.data[1] << 8 | i.data[2];
	}
	,setSize: function(width,height) {
		if(width == this.width && height == this.height) {
			return;
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.canvas.setAttribute("width",width + "px");
		this.canvas.setAttribute("height",height + "px");
		this.width = width;
		this.height = height;
		this.init();
		this.invalidate();
	}
	,resize: function(width,height) {
		if(width == this.width && height == this.height) {
			return;
		}
		var c = window.document.createElement("canvas");
		c.width = width;
		c.height = height;
		var ctx2 = c.getContext("2d",null);
		ctx2.imageSmoothingEnabled = this.ctx.imageSmoothingEnabled;
		ctx2.drawImage(this.canvas,0,0,this.width,this.height,0,0,width,height);
		this.ctx = ctx2;
		this.canvas = c;
		this.width = width;
		this.height = height;
		this.invalidate();
	}
	,__class__: lvl_Image
};
var lvl_Image3D = function(w,h) {
	this.scrollY = 0;
	this.scrollX = 0;
	this.alphaValue = 1.;
	this.zoom = 1;
	lvl_Image.call(this,w,h);
	this.viewport = window.document.createElement("div");
	this.viewport.style.backgroundColor = "black";
	this.viewport.style.overflow = "hidden";
	this.viewport.appendChild(this.canvas);
	this.canvas.width = 2048;
	this.canvas.height = 2048;
	this.canvas.setAttribute("width",2048 + "px");
	this.canvas.setAttribute("height",2048 + "px");
	this.colorCache = new haxe_ds_IntMap();
	this.curDraw = new Float32Array(174768);
	this.curIndex = new Uint16Array(65536);
};
$hxClasses["lvl.Image3D"] = lvl_Image3D;
lvl_Image3D.__name__ = "lvl.Image3D";
lvl_Image3D.getInstance = function() {
	if(lvl_Image3D.inst == null) {
		lvl_Image3D.inst = new lvl_Image3D(0,0);
	}
	return lvl_Image3D.inst;
};
lvl_Image3D.fromCanvas = function(c) {
	var i = new lvl_Image3D(0,0);
	i.width = c.width;
	i.height = c.height;
	i.canvas = i.origin = c;
	i.init();
	return i;
};
lvl_Image3D.__super__ = lvl_Image;
lvl_Image3D.prototype = $extend(lvl_Image.prototype,{
	init: function() {
		this.dispose();
		this.gl = this.canvas.gl;
		if(this.gl != null) {
			this.initScale();
			return;
		}
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,{ alpha : false, antialias : false});
		if(this.gl == null) {
			window.alert("Cannot initialize WebGL context ! (windows user : install DirectX redist)");
		}
		this.canvas.gl = this.gl;
		this.gl.disable(2884);
		this.gl.disable(2929);
		var vertex = this.gl.createShader(35633);
		this.gl.shaderSource(vertex,"\r\n\t\t\tvarying vec2 tuv;\r\n\t\t\tattribute vec2 pos;\r\n\t\t\tattribute vec2 uv;\r\n\t\t\tuniform vec2 scroll;\r\n\t\t\tvoid main() {\r\n\t\t\t\ttuv = uv;\r\n\t\t\t\tgl_Position = vec4(pos + vec2(-1.,1.) + scroll, 0, 1);\r\n\t\t\t}\r\n\t\t");
		this.gl.compileShader(vertex);
		if(this.gl.getShaderParameter(vertex,35713) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getShaderInfoLog(vertex));
		}
		var frag = this.gl.createShader(35632);
		this.gl.shaderSource(frag,"\r\n\t\t\tvarying mediump vec2 tuv;\r\n\t\t\tuniform sampler2D texture;\r\n\t\t\tuniform lowp float alpha;\r\n\t\t\tvoid main() {\r\n\t\t\t\tlowp vec4 color = texture2D(texture, tuv);\r\n\t\t\t\tcolor.a *= alpha;\r\n\t\t\t\tgl_FragColor = color;\r\n\t\t\t}\r\n\t\t");
		this.gl.compileShader(frag);
		if(this.gl.getShaderParameter(frag,35713) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getShaderInfoLog(frag));
		}
		var p = this.gl.createProgram();
		this.gl.attachShader(p,vertex);
		this.gl.attachShader(p,frag);
		this.gl.linkProgram(p);
		if(this.gl.getProgramParameter(p,35714) != 1) {
			throw new js__$Boot_HaxeError(this.gl.getProgramInfoLog(p));
		}
		this.gl.useProgram(p);
		this.gl.enableVertexAttribArray(0);
		this.gl.enableVertexAttribArray(1);
		this.gl.enable(3042);
		this.gl.blendFunc(770,771);
		this.uniScroll = this.gl.getUniformLocation(p,"scroll");
		this.uniTex = this.gl.getUniformLocation(p,"texture");
		this.uniAlpha = this.gl.getUniformLocation(p,"alpha");
		this.attribPos = this.gl.getAttribLocation(p,"pos");
		this.attribUV = this.gl.getAttribLocation(p,"uv");
		this.initScale();
	}
	,dispose: function() {
		if(this.texturesObjects != null) {
			var _g = 0;
			var _g1 = this.texturesObjects;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				this.gl.deleteTexture(o.texture);
				o.texture = null;
			}
		}
		this.texturesObjects = [];
		if(this.allocatedBuffers != null) {
			var _g2 = 0;
			var _g11 = this.allocatedBuffers;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				this.gl.deleteBuffer(b);
			}
			this.allocatedBuffers = [];
		}
	}
	,get_alpha: function() {
		return this.alphaValue;
	}
	,set_alpha: function(v) {
		if(this.alphaValue == v) {
			return v;
		}
		this.endDraw();
		return this.alphaValue = v;
	}
	,beginDraw: function(t) {
		if(t != this.curTexture) {
			this.endDraw();
			this.curTexture = t;
			this.drawPos = 0;
			this.indexPos = 0;
		}
	}
	,getColorImage: function(color) {
		var i = this.colorCache.h[color];
		if(i != null) {
			return i;
		}
		i = new lvl_Image(1,1);
		i.fill(color);
		this.colorCache.h[color] = i;
		return i;
	}
	,getTexture: function(i) {
		var t = i.origin.texture;
		if(t != null) {
			return t;
		}
		t = this.gl.createTexture();
		i.origin.texture = t;
		t.origin = i.origin;
		this.gl.bindTexture(3553,t);
		this.gl.texParameteri(3553,10240,9728);
		this.gl.texParameteri(3553,10241,9728);
		this.gl.texParameteri(3553,10242,33071);
		this.gl.texParameteri(3553,10243,33071);
		this.gl.texImage2D(3553,0,6408,6408,5121,i.origin);
		this.gl.bindTexture(3553,null);
		this.texturesObjects.push(i.origin);
		t.width = i.origin.width;
		t.height = i.origin.height;
		return t;
	}
	,drawMat: function(i,m) {
		var _gthis = this;
		this.beginDraw(this.getTexture(i));
		var w = i.width;
		var h = i.height;
		var pos = this.drawPos >> 2;
		this.curDraw[this.drawPos++] = (0 * m.a + 0 * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (0 * m.b + 0 * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (w * m.a + 0 * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (w * m.b + 0 * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (0 * m.a + h * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (0 * m.b + h * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + (-0.01)) / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (w * m.a + h * m.c + m.x) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (w * m.b + h * m.d + m.y) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + (-0.01)) / _gthis.curTexture.height;
		this.curIndex[this.indexPos++] = pos;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 2;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 3;
		this.curIndex[this.indexPos++] = pos + 2;
		if(this.indexPos > 65500) {
			this.endDraw();
		}
	}
	,draw: function(i,x,y) {
		var _gthis = this;
		this.beginDraw(this.getTexture(i));
		var x1 = x;
		var y1 = y;
		var w = i.width;
		var h = i.height;
		var pos = this.drawPos >> 2;
		this.curDraw[this.drawPos++] = x1 * _gthis.scaleX;
		this.curDraw[this.drawPos++] = y1 * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (x1 + w) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = y1 * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = i.originY / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = x1 * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (y1 + h) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + 0.001) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + (-0.01)) / _gthis.curTexture.height;
		this.curDraw[this.drawPos++] = (x1 + w) * _gthis.scaleX;
		this.curDraw[this.drawPos++] = (y1 + h) * _gthis.scaleY;
		this.curDraw[this.drawPos++] = (i.originX + i.width) / _gthis.curTexture.width;
		this.curDraw[this.drawPos++] = (i.originY + i.height + (-0.01)) / _gthis.curTexture.height;
		this.curIndex[this.indexPos++] = pos;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 2;
		this.curIndex[this.indexPos++] = pos + 1;
		this.curIndex[this.indexPos++] = pos + 3;
		this.curIndex[this.indexPos++] = pos + 2;
		if(this.indexPos > 65500) {
			this.endDraw();
		}
	}
	,endDraw: function() {
		var _gthis = this;
		if(this.curTexture == null || this.indexPos == 0) {
			return;
		}
		var index = this.gl.createBuffer();
		var vertex = this.gl.createBuffer();
		this.gl.bindBuffer(34962,vertex);
		this.gl.bufferData(34962,this.curDraw.subarray(0,this.drawPos),35044);
		this.gl.bindBuffer(34963,index);
		this.gl.bufferData(34963,this.curIndex.subarray(0,this.indexPos),35044);
		var alpha = this.get_alpha();
		var curTexture = this.curTexture;
		var indexPos = this.indexPos;
		this.drawCommands.push(function() {
			_gthis.gl.bindBuffer(34962,vertex);
			_gthis.gl.bindBuffer(34963,index);
			_gthis.gl.vertexAttribPointer(_gthis.attribPos,2,5126,false,16,0);
			_gthis.gl.vertexAttribPointer(_gthis.attribUV,2,5126,false,16,8);
			_gthis.gl.activeTexture(33984);
			_gthis.gl.uniform1i(_gthis.uniTex,0);
			_gthis.gl.uniform1f(_gthis.uniAlpha,alpha);
			_gthis.gl.bindTexture(3553,curTexture);
			_gthis.gl.drawElements(4,indexPos,5123,0);
		});
		this.allocatedBuffers.push(index);
		this.allocatedBuffers.push(vertex);
		this.indexPos = 0;
		this.drawPos = 0;
	}
	,setSize: function(w,h) {
		this.viewport.style.width = w + "px";
		this.viewport.style.height = h + "px";
		this.width = w;
		this.height = h;
	}
	,initScale: function() {
		this.scaleX = this.zoom / 2048 * 2;
		this.scaleY = this.zoom / 2048 * -2;
	}
	,fill: function(color) {
		var _gthis = this;
		this.gl.clearColor((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,(color >>> 24) / 255);
		if(this.allocatedBuffers != null) {
			var _g = 0;
			var _g1 = this.allocatedBuffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				this.gl.deleteBuffer(b);
			}
		}
		this.allocatedBuffers = [];
		this.drawCommands = [function() {
			_gthis.gl.clear(16384);
		}];
	}
	,fillRect: function(x,y,w,h,color) {
		var i = this.getColorImage(color);
		i.width = w;
		i.height = h;
		this.draw(i,x,y);
	}
	,flush: function() {
		var _gthis = this;
		this.endDraw();
		this.drawCommands.push(function() {
			_gthis.gl.bindBuffer(34962,null);
			_gthis.gl.bindBuffer(34963,null);
			_gthis.gl.bindTexture(3553,null);
			_gthis.gl.finish();
		});
		this.redraw();
	}
	,setScrollPos: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.scrollX = x;
		this.scrollY = y;
		this.redraw();
	}
	,redraw: function() {
		this.gl.viewport(0,0,2048,2048);
		this.canvas.style.marginLeft = (this.scrollX | 0) + "px";
		this.canvas.style.marginTop = (this.scrollY | 0) + "px";
		this.gl.uniform2f(this.uniScroll,-this.scrollX * 2 / 2048,this.scrollY * 2 / 2048);
		if(this.drawCommands != null) {
			var _g = 0;
			var _g1 = this.drawCommands;
			while(_g < _g1.length) {
				var d = _g1[_g];
				++_g;
				d();
			}
		}
	}
	,set_zoom: function(z) {
		this.zoom = z;
		this.initScale();
		return z;
	}
	,__class__: lvl_Image3D
});
var lvl_LayerInnerData = $hxEnums["lvl.LayerInnerData"] = { __ename__ : "lvl.LayerInnerData", __constructs__ : ["Layer","Objects","Tiles","TileInstances"]
	,Layer: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"lvl.LayerInnerData",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Objects: ($_=function(idCol,objs) { return {_hx_index:1,idCol:idCol,objs:objs,__enum__:"lvl.LayerInnerData",toString:$estr}; },$_.__params__ = ["idCol","objs"],$_)
	,Tiles: ($_=function(t,data) { return {_hx_index:2,t:t,data:data,__enum__:"lvl.LayerInnerData",toString:$estr}; },$_.__params__ = ["t","data"],$_)
	,TileInstances: ($_=function(t,insts) { return {_hx_index:3,t:t,insts:insts,__enum__:"lvl.LayerInnerData",toString:$estr}; },$_.__params__ = ["t","insts"],$_)
};
var lvl_LayerGfx = function(level) {
	this.height = 0;
	this.stride = 0;
	this.level = level;
};
$hxClasses["lvl.LayerGfx"] = lvl_LayerGfx;
lvl_LayerGfx.__name__ = "lvl.LayerGfx";
lvl_LayerGfx.prototype = {
	fromSheet: function(sheet,defColor) {
		var _gthis = this;
		this.blanks = [];
		if(sheet == null) {
			this.colors = [defColor];
			this.names = [""];
			return;
		}
		var idCol = null;
		var imageTags = [];
		var _g = 0;
		var _g1 = sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			switch(c.type._hx_index) {
			case 0:
				idCol = c;
				break;
			case 7:
				if(this.images == null) {
					this.images = [];
				}
				var size = [this.level.tileSize];
				var _g2 = 0;
				var _g11 = sheet.sheet.lines.length;
				while(_g2 < _g11) {
					var idx = [_g2++];
					if(imageTags[idx[0]]) {
						continue;
					}
					var key = Reflect.field(sheet.sheet.lines[idx[0]],c.name);
					var idat = this.level.model.getImageData(key);
					if(idat == null) {
						var i = new lvl_Image(size[0],size[0]);
						i.text("#" + idx[0],0,12);
						this.images[idx[0]] = i;
						continue;
					}
					this.level.wait();
					imageTags[idx[0]] = true;
					lvl_Image.load(idat,(function(idx1,size1) {
						return function(i1) {
							i1.resize(size1[0],size1[0]);
							_gthis.images[idx1[0]] = i1;
							_gthis.level.waitDone();
						};
					})(idx,size));
				}
				break;
			case 11:
				var _g3 = [];
				var _g12 = 0;
				var _g21 = sheet.sheet.lines;
				while(_g12 < _g21.length) {
					var o = _g21[_g12];
					++_g12;
					var c1 = Reflect.field(o,c.name);
					_g3.push(c1 == null ? 0 : c1);
				}
				this.colors = _g3;
				break;
			case 14:
				if(this.images == null) {
					this.images = [];
				}
				var size2 = this.level.tileSize;
				var _g4 = 0;
				var _g13 = sheet.sheet.lines.length;
				while(_g4 < _g13) {
					var idx2 = [_g4++];
					if(imageTags[idx2[0]]) {
						continue;
					}
					var data = [Reflect.field(sheet.sheet.lines[idx2[0]],c.name)];
					if(data[0] == null && this.images[idx2[0]] != null) {
						continue;
					}
					if(data[0] == null) {
						var i2 = new lvl_Image(size2,size2);
						i2.text("#" + idx2[0],0,12);
						this.images[idx2[0]] = i2;
						continue;
					}
					this.level.wait();
					imageTags[idx2[0]] = true;
					lvl_Image.load(this.level.model.getAbsPath(data[0].file),(function(data1,idx3) {
						return function(i3) {
							var i21 = i3.sub(data1[0].x * data1[0].size,data1[0].y * data1[0].size,data1[0].size * (data1[0].width == null ? 1 : data1[0].width),data1[0].size * (data1[0].height == null ? 1 : data1[0].height));
							_gthis.images[idx3[0]] = i21;
							_gthis.blanks[idx3[0]] = i21.isBlank();
							_gthis.level.waitDone();
						};
					})(data,idx2));
					this.level.watch(data[0].file,(function(data2) {
						return function() {
							lvl_Image.clearCache(_gthis.level.model.getAbsPath(data2[0].file));
							_gthis.level.reload();
						};
					})(data));
				}
				break;
			default:
			}
		}
		this.names = [];
		this.stride = Math.ceil(Math.sqrt(sheet.sheet.lines.length));
		this.height = Math.ceil(sheet.sheet.lines.length / this.stride);
		this.idToIndex = new haxe_ds_StringMap();
		this.indexToId = [];
		var _g22 = 0;
		var _g31 = sheet.sheet.lines.length;
		while(_g22 < _g31) {
			var index = _g22++;
			var o1 = sheet.sheet.lines[index];
			var n = sheet.sheet.props.displayColumn != null ? Reflect.field(o1,sheet.sheet.props.displayColumn) : null;
			if((n == null || n == "") && idCol != null) {
				n = Reflect.field(o1,idCol.name);
			}
			if(n == null || n == "") {
				n = "#" + index;
			}
			if(idCol != null) {
				var id = Reflect.field(o1,idCol.name);
				if(id != null && id != "") {
					var _this = this.idToIndex;
					if(__map_reserved[id] != null) {
						_this.setReserved(id,index);
					} else {
						_this.h[id] = index;
					}
				}
				this.indexToId[index] = id;
			}
			this.names.push(n);
		}
	}
	,__class__: lvl_LayerGfx
};
var lvl_LayerData = function(level,name,p,target) {
	this.currentHeight = 1;
	this.currentWidth = 1;
	this.current = 0;
	this.lock = false;
	this.visible = true;
	lvl_LayerGfx.call(this,level);
	this.name = name;
	this.props = p;
	this.targetObj = target;
};
$hxClasses["lvl.LayerData"] = lvl_LayerData;
lvl_LayerData.__name__ = "lvl.LayerData";
lvl_LayerData.__super__ = lvl_LayerGfx;
lvl_LayerData.prototype = $extend(lvl_LayerGfx.prototype,{
	loadSheetData: function(sheet) {
		if(sheet == null && this.props.color == null) {
			this.props.color = 16711680;
			var _g = 0;
			var _g1 = this.level.sheet.sheet.lines;
			while(_g < _g1.length) {
				var o = _g1[_g];
				++_g;
				var props = o.props;
				if(props == null) {
					continue;
				}
				var _g2 = 0;
				var _g11 = props.layers;
				while(_g2 < _g11.length) {
					var l = _g11[_g2];
					++_g2;
					if(l.l == this.name && l.p.color != null) {
						this.props.color = l.p.color;
						props = null;
						break;
					}
				}
				if(props == null) {
					break;
				}
			}
		}
		this.sheet = sheet;
		this.fromSheet(sheet,this.props.color);
		this.loadState();
	}
	,enabled: function() {
		if(this.visible) {
			return !this.lock;
		} else {
			return false;
		}
	}
	,loadState: function() {
		var state;
		try {
			state = haxe_Unserializer.run(js_Browser.getLocalStorage().getItem(this.level.sheetPath + ":" + this.name));
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			state = null;
		}
		if(state != null) {
			this.set_visible(state.visible);
			this.lock = !(!state.lock);
			this.floatCoord = this.hasFloatCoord && !state.lockGrid;
			if(state.current < (this.images != null ? this.images.length : this.names.length)) {
				this.set_current(state.current);
				if(this.current % this.stride + state.cw <= this.stride && (this.current / this.stride | 0) + state.ch <= this.height) {
					this.currentWidth = state.cw;
					this.currentHeight = state.ch;
				}
			}
		}
		this.stateLoaded = true;
	}
	,setLayerData: function(val) {
		if(val == null || val == "") {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.level.width * this.level.height;
			while(_g1 < _g2) {
				var x = _g1++;
				_g.push(0);
			}
			this.data = lvl_LayerInnerData.Layer(_g);
		} else {
			var a = cdb_Lz4Reader.decodeString(val);
			if(a.length != this.level.width * this.level.height) {
				throw new js__$Boot_HaxeError("Invalid layer data");
			}
			var _g3 = [];
			var _g11 = 0;
			var _g21 = this.level.width * this.level.height;
			while(_g11 < _g21) {
				var i = _g11++;
				_g3.push(a.b[i]);
			}
			this.data = lvl_LayerInnerData.Layer(_g3);
		}
		if(this.sheet.sheet.lines.length > 256) {
			throw new js__$Boot_HaxeError("Too many lines");
		}
	}
	,getTileProp: function(mode) {
		if(this.tileProps == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.x + s.y * this.stride == this.current && s.t == mode) {
				return s;
			}
		}
		return null;
	}
	,getTileObjects: function() {
		var objs = new haxe_ds_IntMap();
		if(this.tileProps == null) {
			return objs;
		}
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.t == "object") {
				objs.h[o.x + o.y * this.stride] = o;
			}
		}
		return objs;
	}
	,getSelObjects: function() {
		if(this.tileProps == null) {
			return [];
		}
		var x = this.current % this.stride;
		var y = this.current / this.stride | 0;
		var out = [];
		var _g = 0;
		var _g1 = this.tileProps.sets;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.t == "object" && !(o.x >= x + this.currentWidth || o.y >= y + this.currentHeight || o.x + o.w <= x || o.y + o.h <= y)) {
				out.push(o);
			}
		}
		return out;
	}
	,setObjectsData: function(id,val) {
		this.data = lvl_LayerInnerData.Objects(id,val);
	}
	,setTilesData: function(val) {
		var _gthis = this;
		var file = val == null ? null : val.file;
		var size = val == null ? 16 : val.size;
		var data;
		if(val == null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = this.level.width * this.level.height;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(0);
			}
			data = _g;
		} else {
			data = cdb__$Types_TileLayerData_$Impl_$.decode(val.data);
		}
		var stride = val == null ? 0 : val.stride;
		var d = { file : file, size : size, stride : stride};
		this.images = [];
		this.data = lvl_LayerInnerData.Tiles(d,data);
		if(file == null) {
			if(this.props.mode != "tiles" && this.props.mode != null) {
				Reflect.deleteField(this.props,"mode");
			}
			var i1 = new lvl_Image(16,16);
			i1.fill(-65281);
			this.images.push(i1);
			this.loadState();
			return;
		}
		this.level.wait();
		this.level.loadAndSplit(file,size,function(w,h,images,blanks) {
			_gthis.images = images;
			_gthis.blanks = blanks;
			if(data[0] == 65535) {
				_gthis.props.mode = "objects";
			}
			var _g3 = _gthis.props.mode;
			if(_g3 == null) {
				var max = w * h;
				var _g4 = 0;
				var _g11 = data.length;
				while(_g4 < _g11) {
					var i2 = _g4++;
					var v = data[i2] - 1;
					if(v < 0) {
						continue;
					}
					var vx = v % stride;
					var vy = v / stride | 0;
					var v2 = vx + vy * w;
					if(vx >= w || vy >= h || blanks[v2]) {
						v2 = -1;
					}
					if(v != v2) {
						data[i2] = v2 + 1;
						_gthis.dirty = true;
					}
				}
			} else {
				switch(_g3) {
				case "ground":case "tiles":
					var max1 = w * h;
					var _g5 = 0;
					var _g12 = data.length;
					while(_g5 < _g12) {
						var i3 = _g5++;
						var v1 = data[i3] - 1;
						if(v1 < 0) {
							continue;
						}
						var vx1 = v1 % stride;
						var vy1 = v1 / stride | 0;
						var v21 = vx1 + vy1 * w;
						if(vx1 >= w || vy1 >= h || blanks[v21]) {
							v21 = -1;
						}
						if(v1 != v21) {
							data[i3] = v21 + 1;
							_gthis.dirty = true;
						}
					}
					break;
				case "objects":
					var insts = [];
					var p = 1;
					if(data[0] != 65535) {
						throw new js__$Boot_HaxeError("assert");
					}
					while(p < data.length) {
						var x = data[p++];
						var y = data[p++];
						var v3 = data[p++];
						var flip = (v3 & 32768) != 0;
						var rot = x >> 15 | y >> 15 << 1;
						v3 &= 32767;
						var x1 = (x & 32767) / _gthis.level.tileSize;
						var y1 = (y & 32767) / _gthis.level.tileSize;
						var vx2 = v3 % stride;
						var vy2 = v3 / stride | 0;
						var v22 = vx2 + vy2 * w;
						if(vx2 >= w || vy2 >= h || x1 >= _gthis.level.width || y1 >= _gthis.level.height) {
							_gthis.dirty = true;
							continue;
						}
						if(v3 != v22) {
							_gthis.dirty = true;
						}
						insts.push({ x : x1, y : y1, o : v22, flip : flip, rot : rot});
					}
					_gthis.data = lvl_LayerInnerData.TileInstances(d,insts);
					_gthis.hasRotFlip = true;
					_gthis.hasFloatCoord = _gthis.floatCoord = true;
					break;
				}
			}
			_gthis.stride = d.stride = w;
			_gthis.height = h;
			_gthis.tileProps = _gthis.level.palette.getTileProps(file,w,w * h);
			_gthis.loadState();
			_gthis.level.waitDone();
		});
	}
	,set_visible: function(v) {
		this.visible = v;
		if(this.comp != null) {
			this.comp.toggleClass("hidden",!this.visible);
		}
		return v;
	}
	,set_current: function(v) {
		this.current = v;
		this.currentWidth = 1;
		this.currentHeight = 1;
		this.saveState();
		return v;
	}
	,setCurrent: function(id,w,h) {
		if(this.current == id && this.currentWidth == w && this.currentHeight == h) {
			return;
		}
		this["current"] = id;
		this.currentWidth = w;
		this.currentHeight = h;
		this.saveState(false);
	}
	,saveState: function(sync) {
		if(sync == null) {
			sync = true;
		}
		if(!this.stateLoaded) {
			return;
		}
		if(sync && this.data != null) {
			var _g = this.data;
			switch(_g._hx_index) {
			case 2:
				var _g4 = _g.data;
				var t = _g.t;
				var _g1 = 0;
				var _g11 = this.level.layers;
				while(_g1 < _g11.length) {
					var l = _g11[_g1];
					++_g1;
					if(l != this) {
						var _g2 = l.data;
						switch(_g2._hx_index) {
						case 2:
							var _g41 = _g2.data;
							var t2 = _g2.t;
							if(t2.file == t.file) {
								l.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						case 3:
							var _g21 = _g2.insts;
							var t21 = _g2.t;
							if(t21.file == t.file) {
								l.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						default:
						}
					}
				}
				break;
			case 3:
				var _g22 = _g.insts;
				var t1 = _g.t;
				var _g3 = 0;
				var _g12 = this.level.layers;
				while(_g3 < _g12.length) {
					var l1 = _g12[_g3];
					++_g3;
					if(l1 != this) {
						var _g5 = l1.data;
						switch(_g5._hx_index) {
						case 2:
							var _g42 = _g5.data;
							var t22 = _g5.t;
							if(t22.file == t1.file) {
								l1.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						case 3:
							var _g23 = _g5.insts;
							var t23 = _g5.t;
							if(t23.file == t1.file) {
								l1.setCurrent(this.current,this.currentWidth,this.currentHeight);
							}
							break;
						default:
						}
					}
				}
				break;
			default:
			}
		}
		var s = { current : this.current, visible : this.visible, lock : this.lock, lockGrid : this.hasFloatCoord && !this.floatCoord, cw : this.currentWidth, ch : this.currentHeight};
		js_Browser.getLocalStorage().setItem(this.level.sheetPath + ":" + this.name,haxe_Serializer.run(s));
	}
	,save: function() {
		if(!this.dirty) {
			return;
		}
		this.dirty = false;
		this.targetObj.o[this.targetObj.f] = this.getData();
	}
	,getData: function() {
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var b = new haxe_io_Bytes(new ArrayBuffer(this.level.width * this.level.height));
			var p = 0;
			var _g1 = 0;
			var _g11 = this.level.height;
			while(_g1 < _g11) {
				var y = _g1++;
				var _g2 = 0;
				var _g12 = this.level.width;
				while(_g2 < _g12) {
					var x = _g2++;
					b.b[p] = data[p];
					++p;
				}
			}
			return cdb_Lz4Reader.encodeBytes(b,this.level.model.compressionEnabled());
		case 1:
			var _g3 = _g.idCol;
			var objs = _g.objs;
			return objs;
		case 2:
			var data1 = _g.data;
			var t = _g.t;
			var b1 = new haxe_io_BytesOutput();
			var _g4 = 0;
			var _g13 = data1.length;
			while(_g4 < _g13) {
				var r = _g4++;
				b1.writeUInt16(data1[r]);
			}
			if(t.file == null) {
				return null;
			} else {
				return { file : t.file, size : t.size, stride : t.stride, data : cdb_Lz4Reader.encodeBytes(b1.getBytes(),this.level.model.compressionEnabled())};
			}
			break;
		case 3:
			var insts = _g.insts;
			var t1 = _g.t;
			var b2 = new haxe_io_BytesOutput();
			b2.writeUInt16(65535);
			var _g5 = 0;
			while(_g5 < insts.length) {
				var i = insts[_g5];
				++_g5;
				b2.writeUInt16(i.x * this.level.tileSize | 0 | (i.rot & 1) << 15);
				b2.writeUInt16(i.y * this.level.tileSize | 0 | i.rot >> 1 << 15);
				b2.writeUInt16(i.o | (i.flip ? 1 : 0) << 15);
			}
			if(t1.file == null) {
				return null;
			} else {
				return { file : t1.file, size : t1.size, stride : t1.stride, data : cdb_Lz4Reader.encodeBytes(b2.getBytes(),this.level.model.compressionEnabled())};
			}
			break;
		}
	}
	,scale: function(s) {
		var width = this.level.width;
		var height = this.level.height;
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var ndata = [];
			var _g1 = 0;
			var _g11 = height;
			while(_g1 < _g11) {
				var y = _g1++;
				var _g2 = 0;
				var _g12 = width;
				while(_g2 < _g12) {
					var x = _g2++;
					var tx = x / s | 0;
					var ty = y / s | 0;
					var k = tx >= width || ty >= height ? 0 : data[tx + ty * width];
					ndata.push(k);
				}
			}
			var _g21 = 0;
			var _g3 = width * height;
			while(_g21 < _g3) {
				var i = _g21++;
				data[i] = ndata[i];
			}
			break;
		case 1:
			var _g31 = _g.idCol;
			var objs = _g.objs;
			var m = this.floatCoord ? this.level.tileSize : 1;
			var _g4 = 0;
			var _g13 = objs.slice();
			while(_g4 < _g13.length) {
				var o = _g13[_g4];
				++_g4;
				o.x = (o.x * s * m | 0) / m;
				o.y = (o.y * s * m | 0) / m;
				if(o.x < 0 || o.y < 0 || o.x >= width || o.y >= height) {
					HxOverrides.remove(objs,o);
				}
			}
			break;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var ndata1 = [];
			var _g5 = 0;
			var _g14 = height;
			while(_g5 < _g14) {
				var y1 = _g5++;
				var _g7 = 0;
				var _g15 = width;
				while(_g7 < _g15) {
					var x1 = _g7++;
					var tx1 = x1 / s | 0;
					var ty1 = y1 / s | 0;
					var k1 = tx1 >= width || ty1 >= height ? 0 : data1[tx1 + ty1 * width];
					ndata1.push(k1);
				}
			}
			var _g22 = 0;
			var _g32 = width * height;
			while(_g22 < _g32) {
				var i1 = _g22++;
				data1[i1] = ndata1[i1];
			}
			break;
		case 3:
			var _g16 = _g.t;
			var insts = _g.insts;
			var m1 = this.floatCoord ? this.level.tileSize : 1;
			var _g8 = 0;
			var _g17 = insts.slice();
			while(_g8 < _g17.length) {
				var i2 = _g17[_g8];
				++_g8;
				i2.x = (i2.x * s * m1 | 0) / m1;
				i2.y = (i2.y * s * m1 | 0) / m1;
				if(i2.x < 0 || i2.y < 0 || i2.x >= width || i2.y >= height) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
	}
	,scroll: function(dx,dy) {
		var width = this.level.width;
		var height = this.level.height;
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var ndata = [];
			var _g1 = 0;
			var _g11 = height;
			while(_g1 < _g11) {
				var y = _g1++;
				var _g2 = 0;
				var _g12 = width;
				while(_g2 < _g12) {
					var x = _g2++;
					var tx = x - dx;
					var ty = y - dy;
					var k;
					if(tx < 0 || ty < 0 || tx >= width || ty >= height) {
						k = 0;
					} else {
						k = data[tx + ty * width];
					}
					ndata.push(k);
				}
			}
			var _g21 = 0;
			var _g3 = width * height;
			while(_g21 < _g3) {
				var i = _g21++;
				data[i] = ndata[i];
			}
			break;
		case 1:
			var _g31 = _g.idCol;
			var objs = _g.objs;
			var _g4 = 0;
			var _g13 = objs.slice();
			while(_g4 < _g13.length) {
				var o = _g13[_g4];
				++_g4;
				o.x += dx;
				o.y += dy;
				if(o.x < 0 || o.y < 0 || o.x >= width || o.y >= height) {
					HxOverrides.remove(objs,o);
				}
			}
			break;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var ndata1 = [];
			var _g5 = 0;
			var _g14 = height;
			while(_g5 < _g14) {
				var y1 = _g5++;
				var _g7 = 0;
				var _g15 = width;
				while(_g7 < _g15) {
					var x1 = _g7++;
					var tx1 = x1 - dx;
					var ty1 = y1 - dy;
					var k1;
					if(tx1 < 0 || ty1 < 0 || tx1 >= width || ty1 >= height) {
						k1 = 0;
					} else {
						k1 = data1[tx1 + ty1 * width];
					}
					ndata1.push(k1);
				}
			}
			var _g22 = 0;
			var _g32 = width * height;
			while(_g22 < _g32) {
				var i1 = _g22++;
				data1[i1] = ndata1[i1];
			}
			break;
		case 3:
			var _g16 = _g.t;
			var insts = _g.insts;
			var _g8 = 0;
			var _g17 = insts.slice();
			while(_g8 < _g17.length) {
				var i2 = _g17[_g8];
				++_g8;
				i2.x += dx;
				i2.y += dy;
				if(i2.x < 0 || i2.y < 0 || i2.x >= width || i2.y >= height) {
					HxOverrides.remove(insts,i2);
				}
			}
			break;
		}
	}
	,setMode: function(mode) {
		var old = this.props.mode;
		if(old == null) {
			old = "tiles";
		}
		var width = this.level.width;
		var height = this.level.height;
		switch(old) {
		case "ground":case "tiles":
			switch(mode) {
			case "ground":case "tiles":
				break;
			case "objects":
				var _g = this.data;
				if(_g._hx_index == 2) {
					var data = _g.data;
					var td = _g.t;
					var oids_h = { };
					var _g1 = 0;
					var _g11 = this.tileProps.sets;
					while(_g1 < _g11.length) {
						var p = _g11[_g1];
						++_g1;
						if(p.t == "object") {
							oids_h[p.x + p.y * this.stride] = p;
						}
					}
					var objs = [];
					var p1 = -1;
					var _g2 = 0;
					var _g3 = height;
					while(_g2 < _g3) {
						var y = _g2++;
						var _g21 = 0;
						var _g31 = width;
						while(_g21 < _g31) {
							var x = _g21++;
							var d = data[++p1] - 1;
							if(d < 0) {
								continue;
							}
							var o = oids_h[d];
							if(o != null) {
								var _g22 = 0;
								var _g32 = o.h;
								while(_g22 < _g32) {
									var dy = _g22++;
									var _g23 = 0;
									var _g33 = o.w;
									while(_g23 < _g33) {
										var dx = _g23++;
										var tp = p1 + dx + dy * width;
										if(x + dx >= width || y + dy >= height) {
											continue;
										}
										var id = d + dx + dy * this.stride;
										if(data[tp] != id + 1) {
											if(data[tp] == 0 && this.blanks[id]) {
												continue;
											}
											o = null;
											break;
										}
									}
									if(o == null) {
										break;
									}
								}
							}
							if(o == null) {
								objs.push({ x : x, y : y, b : y, id : d});
							} else {
								var _g24 = 0;
								var _g34 = o.h;
								while(_g24 < _g34) {
									var dy1 = _g24++;
									var _g25 = 0;
									var _g35 = o.w;
									while(_g25 < _g35) {
										var dx1 = _g25++;
										if(x + dx1 >= width || y + dy1 >= height) {
											continue;
										}
										data[p1 + dx1 + dy1 * width] = 0;
									}
								}
								objs.push({ x : x, y : y, b : y + o.w - 1, id : d});
							}
						}
					}
					objs.sort(function(o1,o2) {
						return o1.b - o2.b;
					});
					var _g4 = [];
					var _g5 = 0;
					while(_g5 < objs.length) {
						var o3 = objs[_g5];
						++_g5;
						_g4.push({ x : o3.x, y : o3.y, o : o3.id, flip : false, rot : 0});
					}
					this.data = lvl_LayerInnerData.TileInstances(td,_g4);
					this.dirty = true;
				} else {
					throw new js__$Boot_HaxeError("assert0");
				}
				break;
			}
			break;
		case "objects":
			switch(mode) {
			case "ground":case "tiles":
				var _g6 = this.data;
				if(_g6._hx_index == 3) {
					var insts = _g6.insts;
					var td1 = _g6.t;
					var objs1 = this.getTileObjects();
					var _g7 = [];
					var _g12 = 0;
					var _g26 = width * height;
					while(_g12 < _g26) {
						var i = _g12++;
						_g7.push(0);
					}
					var data1 = _g7;
					var _g36 = 0;
					while(_g36 < insts.length) {
						var i1 = insts[_g36];
						++_g36;
						var x1 = i1.x | 0;
						var y1 = i1.y | 0;
						var obj = objs1.h[i1.o];
						if(obj == null) {
							data1[x1 + y1 * width] = i1.o + 1;
						} else {
							var _g37 = 0;
							var _g41 = obj.h;
							while(_g37 < _g41) {
								var dy2 = _g37++;
								var _g38 = 0;
								var _g42 = obj.w;
								while(_g38 < _g42) {
									var dx2 = _g38++;
									var x2 = x1 + dx2;
									var y2 = y1 + dy2;
									if(x2 < width && y2 < height) {
										data1[x2 + y2 * width] = i1.o + dx2 + dy2 * this.stride + 1;
									}
								}
							}
						}
					}
					this.data = lvl_LayerInnerData.Tiles(td1,data1);
					this.dirty = true;
				} else {
					throw new js__$Boot_HaxeError("assert1");
				}
				break;
			case "objects":
				break;
			}
			break;
		}
		this.props.mode = mode;
		if(mode == "tiles") {
			Reflect.deleteField(this.props,"mode");
		}
	}
	,initMatrix: function(m,w,h,rot,flip) {
		m.a = 1;
		m.b = 0;
		m.c = 0;
		m.d = 1;
		m.x = -w * 0.5;
		m.y = -h * 0.5;
		if(rot != 0) {
			var a = Math.PI * rot / 2;
			var c = Math.cos(a);
			var s = Math.sin(a);
			var x = m.x;
			var y = m.y;
			m.a = c;
			m.b = s;
			m.c = -s;
			m.d = c;
			m.x = x * c - y * s;
			m.y = x * s + y * c;
		}
		if(flip) {
			m.a = -m.a;
			m.c = -m.c;
			m.x = -m.x;
		}
		m.x += Math.abs(m.a * w * 0.5 + m.c * h * 0.5);
		m.y += Math.abs(m.b * w * 0.5 + m.d * h * 0.5);
	}
	,draw: function(view) {
		view.set_alpha(this.props.alpha);
		var width = this.level.width;
		var height = this.level.height;
		var size = this.level.tileSize;
		var _g = this.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var first = this.level.layers[0] == this;
			var _g1 = 0;
			var _g11 = height;
			while(_g1 < _g11) {
				var y = _g1++;
				var _g2 = 0;
				var _g12 = width;
				while(_g2 < _g12) {
					var x = _g2++;
					var k = data[x + y * width];
					if(k == 0 && !first) {
						continue;
					}
					if(this.images != null) {
						var i = this.images[k];
						view.draw(i,x * size - (i.width - size >> 1),y * size - (i.height - size));
						continue;
					}
					view.fillRect(x * size,y * size,size,size,this.colors[k] | -16777216);
				}
			}
			break;
		case 1:
			var objs = _g.objs;
			var idCol = _g.idCol;
			if(idCol == null) {
				var col = this.props.color | -1610612736;
				var _g3 = 0;
				while(_g3 < objs.length) {
					var o = objs[_g3];
					++_g3;
					var w = this.hasSize ? o.width * size : size;
					var h = this.hasSize ? o.height * size : size;
					view.fillRect(o.x * size | 0,o.y * size | 0,w | 0,h | 0,col);
				}
				var col1 = this.props.color | -16777216;
				var _g13 = 0;
				while(_g13 < objs.length) {
					var o1 = objs[_g13];
					++_g13;
					var w1 = this.hasSize ? o1.width * size | 0 : size;
					var h1 = this.hasSize ? o1.height * size | 0 : size;
					var px = o1.x * size | 0;
					var py = o1.y * size | 0;
					view.fillRect(px,py,w1,1,col1);
					view.fillRect(px,py + h1 - 1,w1,1,col1);
					view.fillRect(px,py + 1,1,h1 - 2,col1);
					view.fillRect(px + w1 - 1,py + 1,1,h1 - 2,col1);
				}
			} else {
				var _g4 = 0;
				while(_g4 < objs.length) {
					var o2 = objs[_g4];
					++_g4;
					var w2 = (this.hasSize ? o2.width * size : size) | 0;
					var h2 = (this.hasSize ? o2.height * size : size) | 0;
					var px1 = o2.x * size | 0;
					var py1 = o2.y * size | 0;
					var col2 = this.props.color;
					var id = Reflect.field(o2,idCol);
					var _this = this.idToIndex;
					var k1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
					if(k1 != null && this.colors != null) {
						col2 = this.colors[k1];
					}
					if(this.hasSize || this.images == null || k1 == null) {
						view.fillRect(px1,py1,w2,h2,col2 | -1610612736);
						var col3 = col2 | -16777216;
						view.fillRect(px1,py1,w2,1,col3);
						view.fillRect(px1,py1 + h2 - 1,w2,1,col3);
						view.fillRect(px1,py1 + 1,1,h2 - 2,col3);
						view.fillRect(px1 + w2 - 1,py1 + 1,1,h2 - 2,col3);
					}
					if(this.images != null && k1 != null) {
						var i1 = this.images[k1];
						view.draw(i1,px1,py1);
					}
				}
			}
			break;
		case 2:
			var data1 = _g.data;
			var t = _g.t;
			var _g5 = 0;
			var _g14 = height;
			while(_g5 < _g14) {
				var y1 = _g5++;
				var _g6 = 0;
				var _g15 = width;
				while(_g6 < _g15) {
					var x1 = _g6++;
					var k2 = data1[x1 + y1 * width] - 1;
					if(k2 < 0) {
						continue;
					}
					view.draw(this.images[k2],x1 * size,y1 * size);
				}
			}
			if(this.props.mode == "ground") {
				var b = new cdb_TileBuilder(this.tileProps,this.stride,this.images.length);
				var a = b.buildGrounds(data1,width);
				var p = 0;
				var max = a.length;
				while(p < max) {
					var x2 = a[p++];
					var y2 = a[p++];
					var id1 = a[p++];
					view.draw(this.images[id1],x2 * size,y2 * size);
				}
			}
			break;
		case 3:
			var _g16 = _g.t;
			var insts = _g.insts;
			var objs1 = this.getTileObjects();
			var mat = { a : 1., b : 0., c : 0., d : 1., x : 0., y : 0.};
			var _g7 = 0;
			while(_g7 < insts.length) {
				var i2 = insts[_g7];
				++_g7;
				var x3 = i2.x * size | 0;
				var y3 = i2.y * size | 0;
				var obj = objs1.h[i2.o];
				var w3 = obj == null ? 1 : obj.w;
				var h3 = obj == null ? 1 : obj.h;
				var w4 = w3 * size;
				var h4 = h3 * size;
				var rot = i2.rot;
				mat.a = 1;
				mat.b = 0;
				mat.c = 0;
				mat.d = 1;
				mat.x = -w4 * 0.5;
				mat.y = -h4 * 0.5;
				if(rot != 0) {
					var a1 = Math.PI * rot / 2;
					var c = Math.cos(a1);
					var s = Math.sin(a1);
					var x4 = mat.x;
					var y4 = mat.y;
					mat.a = c;
					mat.b = s;
					mat.c = -s;
					mat.d = c;
					mat.x = x4 * c - y4 * s;
					mat.y = x4 * s + y4 * c;
				}
				if(i2.flip) {
					mat.a = -mat.a;
					mat.c = -mat.c;
					mat.x = -mat.x;
				}
				mat.x += Math.abs(mat.a * w4 * 0.5 + mat.c * h4 * 0.5);
				mat.y += Math.abs(mat.b * w4 * 0.5 + mat.d * h4 * 0.5);
				mat.x += x3;
				mat.y += y3;
				if(obj == null) {
					view.drawMat(this.images[i2.o],mat);
					view.fillRect(x3,y3,size,size,-2130771968);
				} else {
					var px2 = mat.x;
					var py2 = mat.y;
					var _g8 = 0;
					var _g17 = obj.h;
					while(_g8 < _g17) {
						var dy = _g8++;
						var _g9 = 0;
						var _g18 = obj.w;
						while(_g9 < _g18) {
							var dx = _g9++;
							mat.x = px2 + dx * size * mat.a + dy * size * mat.c;
							mat.y = py2 + dx * size * mat.b + dy * size * mat.d;
							view.drawMat(this.images[i2.o + dx + dy * this.stride],mat);
						}
					}
				}
			}
			break;
		}
	}
	,__class__: lvl_LayerData
});
var lvl_Palette = function(level) {
	this.modeCursor = 0;
	this.mode = null;
	this.randomMode = false;
	this.paintMode = false;
	this.small = false;
	this.level = level;
};
$hxClasses["lvl.Palette"] = lvl_Palette;
lvl_Palette.__name__ = "lvl.Palette";
lvl_Palette.prototype = {
	init: function() {
		this.perTileProps = [];
		var _g = 0;
		var _g1 = this.level.sheet.sheet.columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == "tileProps" && (c.type == cdb_ColumnType.TList || c.type == cdb_ColumnType.TProperties)) {
				var _this = this.level.sheet;
				this.perTileProps = _this.base.getSheet(_this.sheet.name + "@" + c.name).sheet.columns;
			}
		}
		this.perTileGfx = new haxe_ds_StringMap();
		var _g2 = 0;
		var _g3 = this.perTileProps;
		while(_g2 < _g3.length) {
			var c1 = _g3[_g2];
			++_g2;
			var _g21 = c1.type;
			if(_g21._hx_index == 6) {
				var s = _g21.sheet;
				var g = new lvl_LayerGfx(this.level);
				g.fromSheet(this.level.model.base.getSheet(s),16711680);
				var key = c1.name;
				var _this1 = this.perTileGfx;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,g);
				} else {
					_this1.h[key] = g;
				}
			}
		}
	}
	,getDefault: function(c) {
		return this.level.model.base.getDefault(c);
	}
	,getTileProp: function(x,y,create) {
		if(create == null) {
			create = true;
		}
		var l = this.currentLayer;
		var a = x + y * l.stride;
		var p = this.currentLayer.tileProps.props[a];
		if(p == null) {
			if(!create) {
				return null;
			}
			p = { };
			var _g = 0;
			var _g1 = this.perTileProps;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var v = this.getDefault(c);
				if(v != null) {
					p[c.name] = v;
				}
			}
			this.currentLayer.tileProps.props[a] = p;
		}
		return p;
	}
	,getTileProps: function(file,stride,max) {
		var p = Reflect.field(this.level.sheet.sheet.props.level.tileSets,file);
		if(p == null) {
			p = { stride : stride, sets : [], props : []};
			this.level.sheet.sheet.props.level.tileSets[file] = p;
		} else {
			if(p.sets == null) {
				p.sets = [];
			}
			if(p.props == null) {
				p.props = [];
			}
			Reflect.deleteField(p,"tags");
			if(p.stride == null) {
				p.stride = stride;
			} else if(p.stride != stride) {
				var out = [];
				var _g = 0;
				var _g1 = Math.ceil(p.props.length / p.stride);
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = p.stride;
					while(_g2 < _g11) {
						var x = _g2++;
						out[x + y * stride] = p.props[x + y * p.stride];
					}
				}
				while(out.length > 0 && (out[out.length - 1] == null || out.length > max)) out.pop();
				p.props = out;
				p.stride = stride;
			}
			if(p.props.length > max) {
				p.props.splice(max,p.props.length - max);
			}
			var _g3 = 0;
			var _g12 = p.sets.slice();
			while(_g3 < _g12.length) {
				var s = _g12[_g3];
				++_g3;
				if(s.x + s.w > stride || (s.y + s.h) * stride > max) {
					HxOverrides.remove(p.sets,s);
				}
			}
		}
		return p;
	}
	,saveTileProps: function() {
		var pr = this.currentLayer.tileProps.props;
		var _g = 0;
		var _g1 = pr.length;
		while(_g < _g1) {
			var i = _g++;
			var p = pr[i];
			if(p == null) {
				continue;
			}
			var def = true;
			var _g2 = 0;
			var _g11 = this.perTileProps;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				var v = Reflect.field(p,c.name);
				if(v != null && v != this.getDefault(c)) {
					def = false;
					break;
				}
			}
			if(def) {
				pr[i] = null;
			}
		}
		while(pr.length > 0 && pr[pr.length - 1] == null) pr.pop();
		this.level.save();
		this.level.setCursor();
	}
	,reset: function() {
		if(this.p != null) {
			this.p.remove();
			this.select = null;
		}
	}
	,layerChanged: function(l) {
		var _gthis = this;
		this.currentLayer = l;
		this.p = $($("#paletteContent").html()).appendTo(this.level.content);
		this.p.toggleClass("small",this.small);
		var i = lvl_Image.fromCanvas(this.p.find("canvas.view")[0]);
		this.zoom = 1;
		while(this.zoom < 4 && l.stride * this.zoom * this.level.tileSize < 256 && l.height * this.zoom * this.level.tileSize < 256) this.zoom++;
		var tsize = this.level.tileSize * this.zoom;
		var scaleUp = 0;
		var scaleDown = 0;
		i.setSize(l.stride * (tsize + 1),l.height * (tsize + 1));
		var _g = 0;
		var _g1 = l.images.length;
		while(_g < _g1) {
			var n = _g++;
			var x = n % l.stride * (tsize + 1);
			var y = (n / l.stride | 0) * (tsize + 1);
			var li = l.images[n];
			if(li.width == tsize && li.height == tsize) {
				i.draw(li,x,y);
			} else {
				var sw = tsize / li.width;
				var sh = tsize / li.height;
				if(sw > 1) {
					++scaleUp;
				} else if(sw < 1) {
					++scaleDown;
				}
				if(sh > 1) {
					++scaleUp;
				} else if(sh < 1) {
					++scaleDown;
				}
				i.drawScaled(li,x,y,tsize,tsize);
			}
		}
		if(scaleUp > scaleDown && scaleUp != 0) {
			$(i.getCanvas()).css("image-rendering","pixelated");
		}
		var jsel = this.p.find("canvas.select");
		var jpreview = this.p.find(".preview").hide();
		var ipreview = lvl_Image.fromCanvas(jpreview.find("canvas")[0]);
		this.select = lvl_Image.fromCanvas(jsel[0]);
		this.select.setSize(i.width,i.height);
		this.p.find(".icon.random").toggleClass("active",this.randomMode);
		this.p.find(".icon.paint").toggleClass("active",this.paintMode);
		this.p.find(".icon.small").toggleClass("active",this.small);
		this.p.mousedown(function(e) {
			e.stopPropagation();
		});
		this.p.mouseup(function(e1) {
			e1.stopPropagation();
		});
		var curPreview = -1;
		var start_y;
		var start_x;
		var start_down;
		start_x = l.current % l.stride;
		start_y = l.current / l.stride | 0;
		start_down = false;
		jsel.mousedown(function(e2) {
			_gthis.p.find("input[type=text]:focus").blur();
			var o = jsel.offset();
			var x1 = (e2.pageX - o.left) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var y1 = (e2.pageY - o.top) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			if(x1 + y1 * l.stride >= l.images.length) {
				return;
			}
			if(e2.shiftKey) {
				var x0 = x1 < start_x ? x1 : start_x;
				var y0 = y1 < start_y ? y1 : start_y;
				var x11 = x1 < start_x ? start_x : x1;
				var y11 = y1 < start_y ? start_y : y1;
				l.set_current(x0 + y0 * l.stride);
				l.currentWidth = x11 - x0 + 1;
				l.currentHeight = y11 - y0 + 1;
				l.saveState();
				_gthis.level.setCursor();
			} else {
				start_x = x1;
				start_y = y1;
				if(l.tileProps != null && (_gthis.mode == null || _gthis.mode == "t_objects")) {
					var _g2 = 0;
					var _g3 = l.tileProps.sets;
					while(_g2 < _g3.length) {
						var p = _g3[_g2];
						++_g2;
						if(x1 >= p.x && y1 >= p.y && x1 < p.x + p.w && y1 < p.y + p.h && p.t == "object") {
							l.set_current(p.x + p.y * l.stride);
							l.currentWidth = p.w;
							l.currentHeight = p.h;
							l.saveState();
							_gthis.level.setCursor();
							return;
						}
					}
				}
				start_down = true;
				_gthis.level.set_mouseCapture(jsel);
				l.set_current(x1 + y1 * l.stride);
				_gthis.level.setCursor();
			}
			var prop = _gthis.getProp();
			if(prop != null) {
				var pick = e2.which == 3;
				var _g21 = prop.type;
				switch(_g21._hx_index) {
				case 2:
					if(!pick) {
						var v = _gthis.getTileProp(x1,y1);
						v[prop.name] = !Reflect.field(v,prop.name);
						_gthis.saveTileProps();
					}
					break;
				case 5:
					var _g31 = _g21.values;
					if(pick) {
						var idx = Reflect.field(_gthis.getTileProp(x1,y1),prop.name);
						_gthis.modeCursor = idx == null ? -1 : idx;
						_gthis.level.setCursor();
						return;
					}
					var v1;
					if(_gthis.modeCursor < 0) {
						v1 = _gthis.getDefault(prop);
					} else {
						v1 = _gthis.modeCursor;
					}
					if(v1 == null) {
						Reflect.deleteField(_gthis.getTileProp(x1,y1),prop.name);
					} else {
						_gthis.getTileProp(x1,y1)[prop.name] = v1;
					}
					_gthis.saveTileProps();
					break;
				case 6:
					var _g4 = _g21.sheet;
					var key = prop.name;
					var _this = _gthis.perTileGfx;
					var c = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
					if(pick) {
						var this1 = c.idToIndex;
						var key1 = Reflect.field(_gthis.getTileProp(x1,y1),prop.name);
						var _this1 = this1;
						var idx1 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
						_gthis.modeCursor = idx1 == null ? -1 : idx1;
						_gthis.level.setCursor();
						return;
					}
					var v2;
					if(_gthis.modeCursor < 0) {
						v2 = _gthis.getDefault(prop);
					} else {
						v2 = c.indexToId[_gthis.modeCursor];
					}
					if(v2 == null) {
						Reflect.deleteField(_gthis.getTileProp(x1,y1),prop.name);
					} else {
						_gthis.getTileProp(x1,y1)[prop.name] = v2;
					}
					_gthis.saveTileProps();
					break;
				default:
				}
			}
		});
		jsel.mousemove(function(e3) {
			var o1 = jsel.offset();
			var x2 = (e3.pageX - o1.left) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var y2 = (e3.pageY - o1.top) / (_gthis.level.tileSize * _gthis.zoom + 1) | 0;
			var infos = x2 + "," + y2;
			var id = x2 + y2 * l.stride;
			if(id >= l.images.length || l.blanks[id]) {
				curPreview = -1;
				jpreview.hide();
			} else {
				if(curPreview != id) {
					curPreview = id;
					jpreview.show();
					ipreview.fill(-12582848);
					ipreview.copyFrom(l.images[id]);
				}
				if(l.names != null) {
					infos += " " + l.names[id];
				}
			}
			if(l.tileProps != null) {
				_gthis.level.content.find(".cursorPosition").text(infos);
			} else {
				_gthis.p.find(".infos").text(infos);
			}
			if(!start_down) {
				return;
			}
			var x01 = x2 < start_x ? x2 : start_x;
			var y01 = y2 < start_y ? y2 : start_y;
			var x12 = x2 < start_x ? start_x : x2;
			var y12 = y2 < start_y ? start_y : y2;
			l.set_current(x01 + y01 * l.stride);
			l.currentWidth = x12 - x01 + 1;
			l.currentHeight = y12 - y01 + 1;
			l.saveState();
			_gthis.level.setCursor();
		});
		jsel.mouseleave(function(e4) {
			if(l.tileProps != null) {
				_gthis.level.content.find(".cursorPosition").text("");
			} else {
				_gthis.p.find(".infos").text("");
			}
			curPreview = -1;
			jpreview.hide();
		});
		this.p.mouseleave(function(_) {
			start_down = false;
		});
		this.p.mousemove(function(e5) {
			_gthis.level.mousePos.x = e5.pageX | 0;
			_gthis.level.mousePos.y = e5.pageY | 0;
			_gthis.level.updateCursorPos();
			if(_gthis.level.selection == null) {
				_gthis.level.cursor.hide();
			}
		});
		this.p.mouseup(function(_1) {
			start_down = false;
			_gthis.level.content.mouseup();
		});
	}
	,updateSelect: function() {
		var _gthis = this;
		if(this.select == null) {
			return;
		}
		var l = this.currentLayer;
		this.select.clear();
		var used = [];
		var _g = l.data;
		switch(_g._hx_index) {
		case 0:
			var data = _g.a;
			var _g1 = 0;
			while(_g1 < data.length) {
				var k = data[_g1];
				++_g1;
				used[k] = true;
			}
			break;
		case 1:
			var objs = _g.objs;
			var id = _g.idCol;
			var _g2 = 0;
			while(_g2 < objs.length) {
				var o = objs[_g2];
				++_g2;
				var key = Reflect.field(o,id);
				var _this = l.idToIndex;
				var id1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(id1 != null) {
					used[id1] = true;
				}
			}
			break;
		case 2:
			var _g6 = _g.t;
			var data1 = _g.data;
			var _g3 = 0;
			while(_g3 < data1.length) {
				var k1 = data1[_g3];
				++_g3;
				if(k1 == 0) {
					continue;
				}
				used[k1 - 1] = true;
			}
			break;
		case 3:
			var _g11 = _g.t;
			var insts = _g.insts;
			var objs1 = l.getTileObjects();
			var _g4 = 0;
			while(_g4 < insts.length) {
				var i = insts[_g4];
				++_g4;
				var t = objs1.h[i.o];
				if(t == null) {
					used[i.o] = true;
					continue;
				}
				var _g5 = 0;
				var _g12 = t.h;
				while(_g5 < _g12) {
					var dy = _g5++;
					var _g7 = 0;
					var _g13 = t.w;
					while(_g7 < _g13) {
						var dx = _g7++;
						used[i.o + dx + dy * l.stride] = true;
					}
				}
			}
			break;
		}
		var tsize = this.level.tileSize * this.zoom;
		var _g8 = 0;
		var _g9 = l.images.length;
		while(_g8 < _g9) {
			var i1 = _g8++;
			if(used[i1]) {
				continue;
			}
			this.select.fillRect(i1 % l.stride * (tsize + 1),(i1 / l.stride | 0) * (tsize + 1),tsize,tsize,805306368);
		}
		var prop = this.getProp();
		var tmp;
		if(prop != null) {
			var _g10 = prop.type;
			var tmp1;
			switch(_g10._hx_index) {
			case 2:
				tmp1 = true;
				break;
			case 5:
				var _g111 = _g10.values;
				tmp1 = true;
				break;
			case 6:
				var _g121 = _g10.sheet;
				tmp1 = true;
				break;
			default:
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			var objs2 = this.mode == null ? l.getSelObjects() : [];
			if(objs2.length > 1) {
				var _g131 = 0;
				while(_g131 < objs2.length) {
					var o1 = objs2[_g131];
					++_g131;
					this.select.fillRect(o1.x * (tsize + 1),o1.y * (tsize + 1),(tsize + 1) * o1.w - 1,(tsize + 1) * o1.h - 1,-2141478405);
				}
			} else {
				this.select.fillRect(l.current % l.stride * (tsize + 1),(l.current / l.stride | 0) * (tsize + 1),(tsize + 1) * l.currentWidth - 1,(tsize + 1) * l.currentHeight - 1,-2141478405);
			}
		}
		if(prop != null) {
			var def = this.getDefault(prop);
			var _g132 = prop.type;
			switch(_g132._hx_index) {
			case 2:
				var k2 = 0;
				var _g133 = 0;
				var _g14 = l.height;
				while(_g133 < _g14) {
					var y = _g133++;
					var _g134 = 0;
					var _g141 = l.stride;
					while(_g134 < _g141) {
						var x = _g134++;
						var p = l.tileProps.props[k2++];
						if(p == null) {
							continue;
						}
						var v = Reflect.field(p,prop.name);
						if(v == def) {
							continue;
						}
						this.select.fillRect(x * (tsize + 1),y * (tsize + 1),tsize,tsize,v ? -2131010655 : -2141455455);
					}
				}
				break;
			case 5:
				var _g142 = _g132.values;
				var k3 = 0;
				var _g135 = 0;
				var _g143 = l.height;
				while(_g135 < _g143) {
					var y1 = _g135++;
					var _g136 = 0;
					var _g144 = l.stride;
					while(_g136 < _g144) {
						var x1 = _g136++;
						var p1 = l.tileProps.props[k3++];
						if(p1 == null) {
							continue;
						}
						var v1 = Reflect.field(p1,prop.name);
						if(v1 == null || v1 == def) {
							continue;
						}
						this.select.fillRect(x1 * (tsize + 1),y1 * (tsize + 1),tsize,tsize,lvl_Palette.colorPalette[v1] | -2147483648);
					}
				}
				break;
			case 6:
				var _g15 = _g132.sheet;
				var key1 = prop.name;
				var _this1 = this.perTileGfx;
				var gfx = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				var k4 = 0;
				this.select.set_alpha(0.5);
				var _g137 = 0;
				var _g145 = l.height;
				while(_g137 < _g145) {
					var y2 = _g137++;
					var _g138 = 0;
					var _g146 = l.stride;
					while(_g138 < _g146) {
						var x2 = _g138++;
						var p2 = l.tileProps.props[k4++];
						if(p2 == null) {
							continue;
						}
						var r = Reflect.field(p2,prop.name);
						var _this2 = gfx.idToIndex;
						var v2 = __map_reserved[r] != null ? _this2.getReserved(r) : _this2.h[r];
						if(v2 == null || r == def) {
							continue;
						}
						this.select.drawScaled(gfx.images[v2],x2 * (tsize + 1),y2 * (tsize + 1),tsize,tsize);
					}
				}
				this.select.set_alpha(1);
				break;
			case 1:case 3:case 4:case 11:case 13:case 16:
				var k5 = 0;
				var _g139 = 0;
				var _g147 = l.height;
				while(_g139 < _g147) {
					var y3 = _g139++;
					var _g1310 = 0;
					var _g148 = l.stride;
					while(_g1310 < _g148) {
						var x3 = _g1310++;
						var p3 = l.tileProps.props[k5++];
						if(p3 == null) {
							continue;
						}
						var v3 = Reflect.field(p3,prop.name);
						if(v3 == null || v3 == def) {
							continue;
						}
						this.select.fillRect(x3 * (tsize + 1),y3 * (tsize + 1),tsize,1,-1);
						this.select.fillRect(x3 * (tsize + 1),y3 * (tsize + 1),1,tsize,-1);
						this.select.fillRect(x3 * (tsize + 1),(y3 + 1) * (tsize + 1) - 1,tsize,1,-1);
						this.select.fillRect((x3 + 1) * (tsize + 1) - 1,y3 * (tsize + 1),1,tsize,-1);
					}
				}
				break;
			default:
			}
		}
		var m = this.p.find(".mode");
		var sel = this.p.find(".sel");
		if(l.tileProps == null) {
			m.hide();
			sel.show();
		} else {
			sel.hide();
			var grounds = [];
			var _g1311 = 0;
			var _g149 = l.tileProps.sets;
			while(_g1311 < _g149.length) {
				var s = _g149[_g1311];
				++_g1311;
				var color;
				switch(s.t) {
				case "border":
					if(this.mode != "t_border") {
						continue;
					}
					color = 65535;
					break;
				case "ground":
					if(s.opts.name != null && s.opts.name != "") {
						HxOverrides.remove(grounds,s.opts.name);
						grounds.push(s.opts.name);
					}
					if(this.mode != null && this.mode != "t_ground") {
						continue;
					}
					color = this.mode == null ? 40960 : 65280;
					break;
				case "group":
					if(this.mode != "t_group") {
						continue;
					}
					color = 16777215;
					break;
				case "object":
					if(this.mode != null && this.mode != "t_object") {
						continue;
					}
					color = this.mode == null ? 8388608 : 16711680;
					break;
				case "tile":
					continue;
				}
				color |= -16777216;
				var tsize1 = this.level.tileSize * this.zoom;
				var px = s.x * (tsize1 + 1);
				var py = s.y * (tsize1 + 1);
				var w = s.w * (tsize1 + 1) - 1;
				var h = s.h * (tsize1 + 1) - 1;
				this.select.fillRect(px,py,w,1,color);
				this.select.fillRect(px,py + h - 1,w,1,color);
				this.select.fillRect(px,py,1,h,color);
				this.select.fillRect(px + w - 1,py,1,h,color);
			}
			var tmode = cdb__$Data_TileMode_$Impl_$.ofString(this.mode == null ? "" : HxOverrides.substr(this.mode,2,null));
			var tobj = l.getTileProp(tmode);
			if(tobj == null) {
				tobj = { x : 0, y : 0, w : 0, h : 0, t : "tile", opts : { }};
			}
			var _g151 = [];
			var m1 = "tile";
			_g151.push("<option value=\"t_" + m1 + "\">" + (HxOverrides.substr(m1,0,1).toUpperCase() + HxOverrides.substr(m1,1,null)) + "</option>");
			var m2 = "object";
			_g151.push("<option value=\"t_" + m2 + "\">" + (HxOverrides.substr(m2,0,1).toUpperCase() + HxOverrides.substr(m2,1,null)) + "</option>");
			var m3 = "ground";
			_g151.push("<option value=\"t_" + m3 + "\">" + (HxOverrides.substr(m3,0,1).toUpperCase() + HxOverrides.substr(m3,1,null)) + "</option>");
			var m4 = "border";
			_g151.push("<option value=\"t_" + m4 + "\">" + (HxOverrides.substr(m4,0,1).toUpperCase() + HxOverrides.substr(m4,1,null)) + "</option>");
			var m5 = "group";
			_g151.push("<option value=\"t_" + m5 + "\">" + (HxOverrides.substr(m5,0,1).toUpperCase() + HxOverrides.substr(m5,1,null)) + "</option>");
			var baseModes = _g151.join("\n");
			var _g16 = [];
			var _g17 = 0;
			var _g18 = this.perTileProps;
			while(_g17 < _g18.length) {
				var t1 = _g18[_g17];
				++_g17;
				_g16.push("<option value=\"" + t1.name + "\">" + t1.name + "</option>");
			}
			var props = _g16.join("\n");
			var tmp2 = m.find("[name=mode]");
			var tmp3 = this.mode == null ? "t_tile" : this.mode;
			tmp2.html(baseModes + props).val(tmp3);
			m.attr("class","").addClass("mode");
			if(prop != null) {
				var _g19 = prop.type;
				switch(_g19._hx_index) {
				case 5:
					var values = _g19.values;
					m.addClass("m_ref");
					var refList = m.find(".opt.refList");
					refList.html("");
					if(prop.opt) {
						$("<div>").addClass("icon").addClass("delete").appendTo(refList).toggleClass("active",this.modeCursor < 0).click(function(_) {
							_gthis.modeCursor = -1;
							_gthis.level.setCursor();
						});
					}
					var _g191 = 0;
					var _g20 = values.length;
					while(_g191 < _g20) {
						var i2 = [_g191++];
						var d = $("<div>").addClass("icon").css({ background : this.level.toColor(lvl_Palette.colorPalette[i2[0]]), width : "auto"}).text(values[i2[0]]);
						d.appendTo(refList);
						d.toggleClass("active",this.modeCursor == i2[0]);
						d.click((function(i3) {
							return function(_1) {
								_gthis.modeCursor = i3[0];
								_gthis.level.setCursor();
							};
						})(i2));
					}
					break;
				case 6:
					var _g21 = _g19.sheet;
					var key2 = prop.name;
					var _this3 = this.perTileGfx;
					var gfx1 = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
					m.addClass("m_ref");
					var refList1 = m.find(".opt.refList");
					refList1.html("");
					if(prop.opt) {
						$("<div>").addClass("icon").addClass("delete").appendTo(refList1).toggleClass("active",this.modeCursor < 0).click(function(_2) {
							_gthis.modeCursor = -1;
							_gthis.level.setCursor();
						});
					}
					var _g192 = 0;
					var _g201 = gfx1.images.length;
					while(_g192 < _g201) {
						var i4 = [_g192++];
						var d1 = $("<div>").addClass("icon").css({ background : "url('" + gfx1.images[i4[0]].getCanvas().toDataURL() + "')"});
						d1.appendTo(refList1);
						d1.toggleClass("active",this.modeCursor == i4[0]);
						d1.attr("title",gfx1.names[i4[0]]);
						d1.click((function(i5) {
							return function(_3) {
								_gthis.modeCursor = i5[0];
								_gthis.level.setCursor();
							};
						})(i4));
					}
					break;
				case 1:case 3:case 4:case 16:
					m.addClass("m_value");
					var p4 = this.getTileProp(l.current % l.stride,l.current / l.stride | 0,false);
					var v4 = p4 == null ? null : Reflect.field(p4,prop.name);
					m.find("[name=value]").val(prop.type == cdb_ColumnType.TDynamic ? JSON.stringify(v4) : v4 == null ? "" : "" + v4);
					break;
				default:
				}
			} else if("t_" + cdb__$Data_TileMode_$Impl_$.toString(tobj.t) != this.mode) {
				if(this.mode == null) {
					m.addClass("m_tile");
				} else {
					m.addClass("m_create").addClass("c_" + HxOverrides.substr(this.mode,2,null));
				}
			} else {
				m.addClass("m_" + HxOverrides.substr(this.mode,2,null)).addClass("m_exists");
				switch(tobj.t) {
				case "border":
					var _g193 = [];
					var _g202 = 0;
					while(_g202 < grounds.length) {
						var g = grounds[_g202];
						++_g202;
						_g193.push("<option value=\"" + g + "\">" + g + "</option>");
					}
					var opts = _g193.join("");
					m.find("[name=border_in]").html("<option value='null'>upper</option><option value='lower'>lower</option>" + opts).val(Std.string(tobj.opts.borderIn));
					m.find("[name=border_out]").html("<option value='null'>lower</option><option value='upper'>upper</option>" + opts).val(Std.string(tobj.opts.borderOut));
					m.find("[name=border_mode]").val(Std.string(tobj.opts.borderMode));
					break;
				case "ground":
					var tmp4 = tobj.opts.name == null ? "" : tobj.opts.name;
					m.find("[name=name]").val(tmp4);
					m.find("[name=priority]").val("" + (tobj.opts.priority == null ? 0 : tobj.opts.priority));
					break;
				case "group":
					var tmp5 = tobj.opts.name == null ? "" : tobj.opts.name;
					m.find("[name=name]").val(tmp5);
					m.find("[name=value]").val(tobj.opts.value == null ? "" : JSON.stringify(tobj.opts.value)).width(80).width(m.parent().width() - 300);
					break;
				case "object":case "tile":
					break;
				}
			}
			m.show();
		}
	}
	,getProp: function() {
		if(this.mode == null || HxOverrides.substr(this.mode,0,2) == "t_" || this.currentLayer.tileProps == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.perTileProps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == this.mode) {
				return c;
			}
		}
		return null;
	}
	,option: function(name,val) {
		if(this.p == null) {
			return false;
		}
		var m = cdb__$Data_TileMode_$Impl_$.ofString(this.mode == null ? "" : HxOverrides.substr(this.mode,2,null));
		var l = this.currentLayer;
		if(val != null) {
			val = StringTools.trim(val);
		}
		switch(name) {
		case "border_in":
			var s = l.getTileProp(m);
			if(s != null) {
				if(val == "null") {
					Reflect.deleteField(s.opts,"borderIn");
				} else {
					s.opts.borderIn = val;
				}
			}
			break;
		case "border_mode":
			var s1 = l.getTileProp(m);
			if(s1 != null) {
				if(val == "null") {
					Reflect.deleteField(s1.opts,"borderMode");
				} else {
					s1.opts.borderMode = val;
				}
			}
			break;
		case "border_out":
			var s2 = l.getTileProp(m);
			if(s2 != null) {
				if(val == "null") {
					Reflect.deleteField(s2.opts,"borderOut");
				} else {
					s2.opts.borderOut = val;
				}
			}
			break;
		case "mode":
			this.mode = val == "t_tile" ? null : val;
			this.modeCursor = 0;
			this.level.savePrefs();
			this.level.setCursor();
			break;
		case "name":
			var s3 = l.getTileProp(m);
			if(s3 != null) {
				s3.opts.name = val;
			}
			break;
		case "paint":
			this.paintMode = !this.paintMode;
			var _g = l.data;
			var tmp;
			if(_g._hx_index == 3) {
				var _g2 = _g.insts;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.paintMode = false;
			}
			this.level.savePrefs();
			this.p.find(".icon.paint").toggleClass("active",this.paintMode);
			return false;
		case "priority":
			var s4 = l.getTileProp(m);
			if(s4 != null) {
				s4.opts.priority = Std.parseInt(val);
			}
			break;
		case "random":
			this.randomMode = !this.randomMode;
			var _g3 = l.data;
			var tmp1;
			if(_g3._hx_index == 3) {
				var _g21 = _g3.insts;
				var _g11 = _g3.t;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				this.randomMode = false;
			}
			this.p.find(".icon.random").toggleClass("active",this.randomMode);
			this.level.savePrefs();
			this.level.setCursor();
			return false;
		case "small":
			this.small = !this.small;
			this.level.savePrefs();
			this.p.toggleClass("small",this.small);
			this.p.find(".icon.small").toggleClass("active",this.small);
			return false;
		case "toggleMode":
			var s5 = l.getTileProp(m);
			if(s5 == null) {
				s5 = { x : l.current % l.stride, y : l.current / l.stride | 0, w : l.currentWidth, h : l.currentHeight, t : m, opts : { }};
				l.tileProps.sets.push(s5);
			} else {
				HxOverrides.remove(l.tileProps.sets,s5);
			}
			this.level.setCursor();
			break;
		case "value":
			var p = this.getProp();
			if(p != null) {
				var t = this.getTileProp(l.current % l.stride,l.current / l.stride | 0);
				var v;
				switch(p.type._hx_index) {
				case 1:
					v = val;
					break;
				case 3:
					v = Std.parseInt(val);
					break;
				case 4:
					v = parseFloat(val);
					break;
				case 16:
					try {
						v = this.level.model.base.parseDynamic(val);
					} catch( e ) {
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						v = null;
					}
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				if(v == null) {
					Reflect.deleteField(t,p.name);
				} else {
					t[p.name] = v;
				}
				this.saveTileProps();
				return false;
			}
			var s6 = l.getTileProp(m);
			if(s6 != null) {
				var v1;
				if(val == null) {
					v1 = s6.opts.value;
				} else {
					try {
						v1 = this.level.model.base.parseDynamic(val);
					} catch( e2 ) {
						var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
						v1 = null;
					}
				}
				if(v1 == null) {
					Reflect.deleteField(s6.opts,"value");
				} else {
					s6.opts.value = v1;
				}
				this.p.find("[name=value]").val(v1 == null ? "" : JSON.stringify(v1));
			}
			break;
		}
		return true;
	}
	,__class__: lvl_Palette
};
var ops_FullSnapshot = function() {
};
$hxClasses["ops.FullSnapshot"] = ops_FullSnapshot;
ops_FullSnapshot.__name__ = "ops.FullSnapshot";
ops_FullSnapshot.__interfaces__ = [Operation];
ops_FullSnapshot.prototype = {
	setPreviousState: function(context) {
		this.previousState = cdb_Parser.saveMonofile(context.base.data,true);
		this.previousFormat = context.base.data.format;
		return this;
	}
	,setCurrentState: function(context) {
		this.currentState = cdb_Parser.saveMonofile(context.base.data,true);
		this.currentFormat = context.base.data.format;
	}
	,apply: function(context) {
		context.base.loadJson(this.currentState);
		context.base.data.format = this.currentFormat;
	}
	,rollback: function(context) {
		context.base.loadJson(this.previousState);
		context.base.data.format = this.previousFormat;
	}
	,__class__: ops_FullSnapshot
};
var ops_RowModify = function(context,rowPos) {
	this.rowPos = rowPos;
	this.oldState = ops_RowModify.serialize(context.base.getNestedRow(rowPos));
	this.newState = this.oldState;
};
$hxClasses["ops.RowModify"] = ops_RowModify;
ops_RowModify.__name__ = "ops.RowModify";
ops_RowModify.__interfaces__ = [Operation];
ops_RowModify.serialize = function(obj) {
	return JSON.stringify(obj,null,"");
};
ops_RowModify.prototype = {
	commitNewState: function(context) {
		this.newState = ops_RowModify.serialize(context.base.getNestedRow(this.rowPos));
	}
	,_apply: function(context,state) {
		var arr = context.base.getNestedSheetRowArray(this.rowPos);
		var idx = this.rowPos[this.rowPos.length - 1].row;
		arr[idx] = JSON.parse(state);
		context.base.sync();
	}
	,apply: function(context) {
		this._apply(context,this.newState);
	}
	,rollback: function(context) {
		this._apply(context,this.oldState);
	}
	,isUseless: function() {
		return this.oldState == this.newState;
	}
	,__class__: ops_RowModify
};
var ops_RowMove = function(initialPos,newIndex) {
	this.initialPos = initialPos;
	this.newIndex = newIndex;
};
$hxClasses["ops.RowMove"] = ops_RowMove;
ops_RowMove.__name__ = "ops.RowMove";
ops_RowMove.__interfaces__ = [Operation];
ops_RowMove.prototype = {
	apply: function(context) {
		var table = context.base.getNestedSheetRowArray(this.initialPos);
		var index1 = this.initialPos[this.initialPos.length - 1].row;
		var index2 = this.newIndex;
		var row1 = table[index1];
		var row2 = table[index2];
		table[index1] = row2;
		table[index2] = row1;
	}
	,rollback: function(context) {
		this.apply(context);
	}
	,__class__: ops_RowMove
};
var ops_SeparatorMove = function(sheet,separatorIndex,newSeparatorPos) {
	this.tableName = sheet.sheet.name;
	this.sepIdx = separatorIndex;
	this.oldPos = sheet.sheet.separators[separatorIndex];
	this.newPos = newSeparatorPos;
};
$hxClasses["ops.SeparatorMove"] = ops_SeparatorMove;
ops_SeparatorMove.__name__ = "ops.SeparatorMove";
ops_SeparatorMove.__interfaces__ = [Operation];
ops_SeparatorMove.prototype = {
	_apply: function(context,pos1,pos2) {
		var table = context.base.getSheet(this.tableName);
		table.sheet.separators[this.sepIdx] = pos2;
	}
	,apply: function(context) {
		this._apply(context,this.oldPos,this.newPos);
	}
	,rollback: function(context) {
		this._apply(context,this.newPos,this.oldPos);
	}
	,__class__: ops_SeparatorMove
};
var sys_FileSystem = function() { };
$hxClasses["sys.FileSystem"] = sys_FileSystem;
sys_FileSystem.__name__ = "sys.FileSystem";
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(e1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _ ) {
				var _1 = ((_) instanceof js__$Boot_HaxeError) ? _.val : _;
				throw e1;
			}
			if(!stat.isDirectory()) {
				throw e1;
			}
		}
	}
};
sys_FileSystem.deleteDirectory = function(path) {
	if(sys_FileSystem.exists(path)) {
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync(path);
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var curPath = path + "/" + file;
			if(sys_FileSystem.isDirectory(curPath)) {
				sys_FileSystem.deleteDirectory(curPath);
			} else {
				js_node_Fs.unlinkSync(curPath);
			}
		}
		js_node_Fs.rmdirSync(path);
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileInput"] = sys_io_FileInput;
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		if(bytesRead == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
	,__class__: sys_io_FileInput
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
$hxClasses["sys.io.FileOutput"] = sys_io_FileOutput;
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = new js_node_buffer_Buffer(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : "sys.io.FileSeek", __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
var vdom_Answer = $hxEnums["vdom.Answer"] = { __ename__ : "vdom.Answer", __constructs__ : ["Event","SetValue","Done"]
	,Event: ($_=function(eid,props) { return {_hx_index:0,eid:eid,props:props,__enum__:"vdom.Answer",toString:$estr}; },$_.__params__ = ["eid","props"],$_)
	,SetValue: ($_=function(id,value) { return {_hx_index:1,id:id,value:value,__enum__:"vdom.Answer",toString:$estr}; },$_.__params__ = ["id","value"],$_)
	,Done: ($_=function(eid) { return {_hx_index:2,eid:eid,__enum__:"vdom.Answer",toString:$estr}; },$_.__params__ = ["eid"],$_)
};
var vdom_Message = $hxEnums["vdom.Message"] = { __ename__ : "vdom.Message", __constructs__ : ["Create","AddClass","RemoveClass","Append","InsertAt","CreateText","Reset","Remove","Event","SetAttr","SetStyle","Trigger","Special","Anim","Dispose","Unbind","Group","SetVal"]
	,Create: ($_=function(id,name,attr) { return {_hx_index:0,id:id,name:name,attr:attr,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name","attr"],$_)
	,AddClass: ($_=function(id,name) { return {_hx_index:1,id:id,name:name,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name"],$_)
	,RemoveClass: ($_=function(id,name) { return {_hx_index:2,id:id,name:name,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name"],$_)
	,Append: ($_=function(id,to) { return {_hx_index:3,id:id,to:to,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","to"],$_)
	,InsertAt: ($_=function(id,to,pos) { return {_hx_index:4,id:id,to:to,pos:pos,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","to","pos"],$_)
	,CreateText: ($_=function(id,text,pid) { return {_hx_index:5,id:id,text:text,pid:pid,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","text","pid"],$_)
	,Reset: ($_=function(id) { return {_hx_index:6,id:id,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id"],$_)
	,Remove: ($_=function(id) { return {_hx_index:7,id:id,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id"],$_)
	,Event: ($_=function(id,name,eid) { return {_hx_index:8,id:id,name:name,eid:eid,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name","eid"],$_)
	,SetAttr: ($_=function(id,att,val) { return {_hx_index:9,id:id,att:att,val:val,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","att","val"],$_)
	,SetStyle: ($_=function(id,st,val) { return {_hx_index:10,id:id,st:st,val:val,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","st","val"],$_)
	,Trigger: ($_=function(id,name) { return {_hx_index:11,id:id,name:name,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name"],$_)
	,Special: ($_=function(id,name,args,eid) { return {_hx_index:12,id:id,name:name,args:args,eid:eid,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name","args","eid"],$_)
	,Anim: ($_=function(id,name,dur) { return {_hx_index:13,id:id,name:name,dur:dur,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","name","dur"],$_)
	,Dispose: ($_=function(id,events) { return {_hx_index:14,id:id,events:events,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","events"],$_)
	,Unbind: ($_=function(events) { return {_hx_index:15,events:events,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["events"],$_)
	,Group: ($_=function(msg) { return {_hx_index:16,msg:msg,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,SetVal: ($_=function(id,value) { return {_hx_index:17,id:id,value:value,__enum__:"vdom.Message",toString:$estr}; },$_.__params__ = ["id","value"],$_)
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
var JQueryDefined = typeof($) != "undefined";
if(JQueryDefined && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var JQueryDefined = typeof($) != "undefined";
if(JQueryDefined && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Level.UID = 0;
Level.loadedTilesCache = new haxe_ds_StringMap();
K.INSERT = 45;
K.DELETE = 46;
K.LEFT = 37;
K.UP = 38;
K.RIGHT = 39;
K.DOWN = 40;
K.ESC = 27;
K.TAB = 9;
K.SPACE = 32;
K.ENTER = 13;
K.F2 = 113;
K.F3 = 114;
K.F4 = 115;
K.NUMPAD_ADD = 107;
K.NUMPAD_SUB = 109;
K.NUMPAD_DIV = 111;
Main.UID = 0;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
cdb__$Data_TileMode_$Impl_$.Tile = "tile";
cdb__$Data_TileMode_$Impl_$.Ground = "ground";
cdb__$Data_TileMode_$Impl_$.Border = "border";
cdb__$Data_TileMode_$Impl_$.Object = "object";
cdb__$Data_TileMode_$Impl_$.Group = "group";
cdb_MultifileLoadSave.lastStateOnDisk = new haxe_ds_StringMap();
cdb_MultifileLoadSave.MULTIFILE_CDB_DIR = "cdb";
cdb_MultifileLoadSave.MULTIFILE_FORMAT = "ee-multifile";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
hxbit_Convert.convFuns = new haxe_ds_StringMap();
hxbit_Macros.IN_ENUM_SER = false;
hxbit_Serializer.UID = 0;
hxbit_Serializer.SEQ = 0;
hxbit_Serializer.SEQ_BITS = 8;
hxbit_Serializer.SEQ_MASK = 16777215;
hxbit_Serializer.CLASSES = [];
hxbit_Serializer.ENUM_CLASSES = new haxe_ds_StringMap();
hxbit_Schema.__clid = hxbit_Serializer.registerClass(hxbit_Schema);
lvl_Image.cache = new haxe_ds_StringMap();
lvl_Image3D.CANVAS_SIZE = 2048;
lvl_Palette.colorPalette = [16711680,65280,16711935,65535,16776960,16777215,33023,65408,8388863,8453888,16711808,16744448];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=castle.js.map